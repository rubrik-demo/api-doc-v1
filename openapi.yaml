swagger: '2.0'
info:
  version: v1
  title: Rubrik REST API
  description: |

    Copyright © 2017 Rubrik Inc. [Legal](#section/Legal)

    # Introduction

    Welcome to the Rubrik™ REST API documentation.

    The Rubrik REST API provides a RESTful interface for working with Rubrik clusters and Rubrik Edge virtual appliances. The Rubrik REST API can be used to query, configure, and control nearly all of the operations of the Rubrik software.

    Through authenticated and encrypted interaction with the Rubrik REST API server, perform any of the operations that are available through the Rubrik web UI and many bulk-type operations that might otherwise be difficult or impossible to perform.

    This documentation provides reference information and examples of typical workflows for the Rubrik REST API. For more detailed information about working with Rubrik clusters and Rubrik Edge virtual appliances refer to the *Rubrik User Guide*.

    A quick way to become familiar with the Rubrik REST API, is to use the Rubrik REST API Explorer. [OpenAPI](#section/OpenAPI) describes this tool.

    Refer to the [changelog](#section/Changelog) to see information about changes within this version of the Rubrik REST API.

    # Changelog

     Revisions are listed with the most recent revision first.

     ### Changes to V1 API in Rubrik Version 4.2.0
     ## Breaking changes:
     * The input field OperatingSystemType value `Linux` is replaced by `UnixLike`
       in FilesetTemplateCreateDefinition, used by POST /fileset-template, and
       in FilesetTemplatePatchDefinition, used by PATCH /fileset_template/{id}.
     * The input field operating_system_type value `Linux` is replaced by `UnixLike`
       in GET /fileset-template and GET /host.

     ## New features:
     * Added a new /ldap_service endpoint for managing Active Directory integration.
     * Added a new optional field 'nasBaseConfig' to GET /api/v1/host. This field
       allows NAS (Isilon/NetApp) api credential to be displayed and edited.
     * GET /host/{id}/search now returns search results for filesets, Windows volume
       groups, and storage array volume groups belonging to the host. Previously,
       the endpoint would only return fileset search results.
     * Added endpoints for actions related to log shipping configurations:
       POST /mssql/db/{id}/log_shipping to create, GET /mssql/db/log_shipping to
       query, GET /mssql/db/log_shipping/{id} to retrieve individual details,
       DELETE /mssql/db/log_shipping/{id} to delete, and POST
       /mssql/db/log_shipping/{id}/reseed to reseed an unhealthy secondary
       database.
     * Added new optional fields 'organizationId' and 'organizationName' to
       `/host/{id}` and `/host` endpoints to get the organization a host is
       assigned to due to Envoy.
     * Added `Africa/Johannesburg`, `Africa/Lagos` and `Africa/Nairobi` as
       supported cluster time zones.
     ## Improvements:
     * Added 2 new optional fields `apiHostname` and `zoneName` to POST /host
       and GET /host. These fields allow different zones to be configured for
       Isilon NAS.
     * Added a new field 'geolocation' to GET /cluster/{id} and PATCH /cluster/{id}.
       These allow users to view and modify the geolocation of the cluster,
       respectively.
     * Added a new field `guestOsType` to the `VirtualMachineDetail`
       object used in response of `GET /vmware/vm/{id}`
     * Added an optional organizationId field to the HostRegister request in POST
       /host to allow users with the global admin RBAC role to add a host to an
       organization specified by the value of the organizationId field.
     * Added canLiveMount field to the responses of `GET /mssql/db/snapshot/{id}`
       and `GET /mssql/db/{id}/snapshot`.
     * Added an optional field `agentStatus` to `VirtualMachineSummary` object used
       in response of `GET /vmware/vm` endpoint. This allows user to check the
       Rubrik Backup Service connection status of the corresponding VMware VM.
     * Added the `POST /vmware/vm/{id}/register_agent` endpoint.
     * Added a new field 'createDatastoreOnly' to POST
       /vmware/vm/snapshot/{id}/mount. This allows user to mount snapshot to vmware
       datastore only, without create a virtual machine.
     * Added a new field `numWindowsVolumeGroups` to the `SlaDomainDetail` and
       `SlaDomainSummary` objects used in response to `GET /sla_domain` endpoints.
     * Added isMountAllowed field to the response of GET
       /mssql/db/{id}/recoverable_range. This helps identify which recoverable
       ranges support Live Mount, which is affected by whether a database snapshot
       contains filestreams.
     * Added new optional field 'shouldRefreshCacheAfterUpdate' to PATCH
       /vmware/vm/{id} to indicate whether or not to refresh the in-memory cache
       after updates to a virtual machine record.
     * Added a new optional field 'operating_system' to 'GET /host'.

     ### Changes to V1 API in Rubrik Version 4.1.0

     ## Breaking changes:
     * The 'allowedBackupWindow' and 'firstFullBackupWindow' input field for
       /sla_domain now take the cluster time zone instead of UTC.

     ## New features:
     * Added POST /host/{id}/refresh endpoint to refresh hosts without
       registering them again
     * Added GET /fileset/snapshot/{id} endpoint to retrieve details of a
       fileset snapshot.
     * Added POST /mssql/db/{id}/log_backup endpoint for taking on-demand
       log backup of SQL Server databases.
     * Added a new optional query parameter 'is_agentless' to
       GET /windows_cluster. This allows users to filter all clusters that
       do not have any hosts with Rubrik connectors installed. If this
       parameter is omitted, all clusters are returned.
     * Added a new field 'isAgentless' to GET /windows_cluster. This indicates
       whether all the hosts on this windows cluster do not have Rubrik connector
       installed. If even one host has Rubrik connector installed, this will
       be set to false.
     * Added a new optional 'organization_id' query parameter on POST /session.
       This allows users to specify the organization to which they intend to
       authenticate. If this parameter is omitted, an organization is chosen
       automatically.
     * Added a new 'organizationId' field to the response on POST /session. This
       indicates the organization to which the user has authenticated.
     * Added a new field 'moid' on GET /vmware/vm. This allows users to search
       VMWare VMs by Managed Object ID. The list of results of the call can now
       additionally be sorted in ascending/descending order by moid.
     * Added new fields 'replicas' and 'availabilityGroupId' on GET /mssql/db
       and GET /mssql/db/{id}. If a database is an availability database,
       it will have some number of replicas, which are copies of the database
       running on different instances. Otherwise, there will only be one
       replica, which represents the single copy of the database. The field
       'availabilityGroupId' will be set only for availability databases
       and points to the availability group of the database. Also deprecated
       several fields on these endpoints, as they should now be accessed via
       the 'replicas' field.
     * Added a field 'cloudInstantiationSpec' on GET /vmware/vm and PATCH
       /vmware/vm/{id} to allow enabling/disabling/updating specs for automatic
       conversion to cloud image on a per VM basis
     * Added a new optional query parameter 'availabilityGroupId' to GET /mssql/db,
       in order to filter databases by their availability group ID.
     * Added a new field 'timezone' to GET /cluster/{id} and PATCH /cluster/{id}.
       These calls show and change, the current time zone setting of the cluster.
     * Add a new field 'ignoreErrors' to POST /vmware/vm/snapshot/{id}/restore_file
       that will let job to ignore file errors during restore jobs.
     * Added `Asia/Kolkata` and `Asia/Kathmandu` as supported cluster time zones.

     ### Changes to V1 API in Rubrik version 4.0.0

     New features:
     * Added a new field 'name' on GET /sla_domain. This allows users to search
       SLA Domains by name. Users can also sort the SLA Domain summary results
       in ascending/descending order by name
     * The Rubrik cluster generates a unique ID for each virtual machine when a
       vCenter Server is added. When a virtual machine changes to another vCenter
       Server or unregisters and registers with the same vCenter Server, a new
       unique ID is generated for that virtual machine. When this happens, the
       virtual machine object associated with the original ID becomes a relic.
       In this release we have added the option conflictResolutionAuthz to
       add/edit vCenter endpoints of the Rubrik REST APIs. This option can take
       either 'AllowAutoConflictResolution' to authorize the linking of relic
       virtual machine objects with the current virtual machine object of a
       specific virtual machine, and makes the collective snapshot history
       available through the current object. Or it can take 'NoConflictResolution'
       to not allow linking. Default value is 'NoConflictResolution'.
     * Introduced endpoints for SQL Server Live Mounts: POST /mssql/db/{id}/mount,
       GET /mssql/db/mount, GET /mssql/db/mount/{id}, and
       DELETE /mssql/db/mount/{id}. These allow users to create, query for, and
       delete Live Mounts for SQL Server databases.
     * Added the isLiveMount field to the response of GET /mssql/db. Added an
       optional is_live_mount query parameter to filter by this field.
     * Added links field to the paginated responses of
       GET /vmware/vm, /vmware/vm/mount and /fileset endpoints. This allows users
       to navigate between pages by following the href in links.prev and links.next.
     * Introduced optional caCerts parameter for the vCenter post/put/patch
       endpoints to specify trusted CA certs to use when connecting to a vCenter
       server and associated ESX hosts.
     * Modified PATCH /mssql/instance/{id} endpoint to support SQL db
       auto-protection, added fields configuredSlaDomainId,
       logBackupFrequencyInSeconds, logRetentionHours, and copyOnly to the PATCH
       request, as well as configuredSlaDomainId, configuredSlaDomainName,
       logBackupFrequencyInSeconds, logRetentionHours, and copyOnly to the GET and
       PATCH responses.
     * Added GET /vmware/vcenter/{id} endpoint to allow fetching details of a
       single vCenter server, including its refresh and delete status.
     * Introduced optional parameter keepMacAddresses to
       POST /vmware/vm/snapshot/{id}/mount, /vmware/vm/snapshot/{id}/export, and
       /vmware/vm/snapshot/{id}/instant_recovery endpints.
       This allows new VMs to have the same MAC address as their source VMs.
     * Introduced optional parameters offset and limit to support
       pagination for Browse end-point.
     * Added `nodeId` to `AsyncRequestStatus` to improve debugging job failures.


     ### Changes to V1 API in Rubrik version 3.2.0

     New features:
     * Added an option to preserve the virtual machine moid during instant recovery.
       Use this option cautiously. It will permanently overwrite the source
       virtual machine. The source virtual machine cannot be recovered if the
       operation fails. It will not create a new virtual machine and rename
       the original one so we could fall back to the original in case of a failure
       in the process. This is not exposed in the Web UI and the API user should
       be careful to not destroy the original virtual machine by accident.
     * Introduced shareId into /fileset endpoints to support
       the creation of filesets based on network shares.
     * Introduced optional config parameter for all on demand
       snapshot endpoints. The config parameter includes an optional slaId field.
       The policies of the specified SLA Domain determine the retention of backups
       on the local Rubrik cluster, the retention target, and the archival location.
     * Introduced optional parameters to endpoint /mssql/db/{id}/export,
       so that physical filenames and logical filenames can be changed
       for exported databases. These two parameters are newFilename and
       newLogicalName.
     * Introduced optional config parameter for the VM patch endpoint
       (PATCH /vmware/vm/{id}) to specify a guest credential for a
       specific VM.
     * Introduced optional query parameters to endpoint /host, to
       support infix searching by hostname and sort order of results.
     * Introduced slaId and slaName field to all snapshot summary/details object.
       These fields specify the SLA Domain object that is associated with the
       snapshot.

    Bug Fixes:
     * Made path parameter required in GET /fileset/snapshot/{id}/browse
       and GET /vmware/vm/snapshot/{id}/browse. Previously, an error was
       thrown when path wasn't passed in. This solves that bug.

     ### Changes to V1 API in Rubrik version 3.1.0
     Initial GA release

    # Overview #
    The Rubrik REST API provides a means to work with Rubrik clusters and Rubrik Edge virtual appliances using text-based representations of the resource objects that are managed by the Rubrik software.

    In its simplest form, the RESTful architecture used by the Rubrik REST API has the following workflow:
    1. Client authenticates with the Rubrik REST API server and starts a session.
    2. Client sends an HTTP request to the URI for a resource object.
    3. Server handles the request and sends an HTTP response with a JSON formatted response body.

    This overview section provides a basic description of the HTTP requests and responses used with the Rubrik REST API. The [Authentication](#section/Authentication) section provides information about how a client authenticates with the Rubrik REST API server.

    ## Documentation conventions

    The descriptions in this documentation use 'Rubrik cluster' to refer to both Rubrik clusters and Rubrik Edge virtual appliances.

    The documentation uses a dollar symbol to indicate a variable in body text and code samples. Some examples:
    * `$cluster_address` to represent a Rubrik cluster IP or resolvable host name
    * `$snapshot_id` to represent the ID of a specific snapshot
    * `$request_id` to represent the ID of a specific asynchronous request

    To shorten the path shown in a code sample, the documentation sometimes replaces a longer variable form with the variable form `{id}`. This variable form represents the `id` value for an associated member string in a response body or request URL.

    The documentation use the term 'snappable' to refer to all objects that have data that can be protected by a Rubrik cluster or a Rubrik Edge appliance. For example, all of the following are 'snappables':
    * Virtual machines
    * File systems
    * SQL Server databases

    ## Versioning

    The Rubrik REST API structures the request URL to include the version of the API. This ensures that backwards incompatible improvements in a new version are not unintentionally used with an earlier version of the API.

    The URL of a request includes a segment that identifies the version of the API. In the URL, the version segment always follows immediately after the Rubrik REST API server name or IPv4 address.

    For example, for a Rubrik cluster with the server address `$cluster_address` a request to the cluster endpoint for Rubrik REST API v1 would look like this:
    `https://$cluster_address/api/v1/cluster`

    In this URL, the `v1` represents the version number for Rubrik REST API v1.

    The Rubrik REST API increments the version number when the new version includes a change that is not backward compatible.

    Examples of changes that are not backward compatible include:
    * Resource type removed
    * Required parameter added to an existing resource type
    * Required parameter removed from an existing resource type
    * Renamed resource or parameter
    * Authentication requirement added for a previously unauthenticated resource

    When the Rubrik REST API has changes that are not backward compatible, those changes appear in a new version. For example, incompatible changes to v1 appear in v2. The Rubrik REST API server makes v2 endpoints available on the path: `https://$cluster_address/api/v2/`. The Rubrik REST API server continues to provide the v1 endpoints on the path: `https://$cluster_address/api/v1/`.

    ### Changes within a version

    Backward compatible changes can be added to the Rubrik REST API as part of an update of the Rubrik CDM software on a Rubrik cluster or Rubrik Edge appliance. When this occurs, the version number remains the same and the URL segment that identifies the API version does not change. The [Changelog](#section/Changelog) that is provided in the docs for each version of the Rubrik REST API describes the changes that are made within that version.

    Examples of backward compatible changes include:
    * New API resource added
    * New optional request parameters added to existing resources
    * New properties added to existing responses

    ## Architecture

    The Rubrik REST API architecture centers around logical entities called *resource objects*. Resource objects can be discrete entities or can contain a hierarchy of other, dependent, resource objects. A dependent, or child, resource object is referenced through the parent object.

    For example, a virtualization environment is a resource object that contains virtual machines as child resource objects. The virtual machines, in turn, contain snapshots as child resource objects. To address this hierarchy, the path to a snapshot must include the parent objects.
    As shown here those parent objects are the virtualization environment (`vmware`) and the virtual machine (`vm`): `/vmware/vm/snapshot`.

    When a request addresses a specific resource object the path must include the  `id` of that specific object.

    For example, to address a specific snapshot with the `id` value of `123-456` the path would be: `/vmware/vm/snapshot/123-456`.

    The full URL for the request would be: `https://$cluster_address/api/v1/vmware/vm/snapshot/123-456`

    The path in this example points to a specific snapshot with the `id` value of `123-456`.

    The `id` is an opaque value which is generated by the Rubrik REST API. It does not follow any specific format.

    ### API base path

    Each endpoint in the Rubrik REST API exists on one of two possible base paths:
    * `https://$cluster_address/api/v1/`
    * `https://$cluster_address/api/internal/`

    The `/api/v1` base path provides the most commonly used endpoints. Rubrik considers these endpoints to be stable. Rubrik designs new releases of the Rubrik REST API to provide as much backward compatibility for these endpoints as possible. After an upgrade to a new version of the Rubrik CDM software, or to a new version of the Rubrik REST API, existing calls to endpoints on the `/api/v1` base path will normally continue to work.

    The primary purpose of the `/api/internal` base path is to provide endpoints that are used by the Rubrik cluster. These endpoints are *internal* in the sense that the Rubrik CDM software uses them to provide a wide variety of cloud data management features. The evolution and improvement of the Rubrik CDM software can cause changes to these endpoints, removal of these endpoints, or addition of new `/api/internal` endpoints. Rubrik does not attempt to make the `/api/internal` endpoints backward compatible.

    ### Requests

    To perform a task, the Rubrik REST API uses an HTTP request. Most requests perform one of these actions:
    * Get an instance of an object from a list
    * Add an instance of an object to a list
    * Perform an operation on an object using the `id` of the object.

    The following table describes the HTTP method and endpoint excerpts for some typical HTTP requests.

    **Note:** The endpoints shown here would be appended to the base URL: `https://$cluster_address/vmware`.

    | Method | Endpoint | Description |
    | ------ | --- | ----------- |
    | GET | `/vm/snapshot` | Returns a list of snapshots. |
    | POST | `/vm/snapshot` | Creates a new snapshot resource object. |
    | GET | `/vm/snapshot/{id}` | Returns information about the snapshot that is identified by `id`. |
    | PATCH | `/vm/snapshot/mount/{id}` | Changes the power status of the mounted snapshot that is identified by `id`. |
    | PUT | `/vcenter/{id}` | Provides a request body with a complete update of the properties of the vCenter Server object that is identified by `id`. |
    | DELETE | `/vm/snapshot/{id}` | Deletes the snapshot that is identified by `id`. |
    | GET | `/vm/{id}/missed_snapshot` | Returns the value of `missed_snapshot` for a snapshot that is identified by `id`. |
    | POST | `/vm/snapshot/{id}/mount` | Performs a `mount` operation using the snapshot that is identified by `id`. |

    #### Reserved ID alias

    The alias `me` can be used with some endpoints as a shorthand replacement for the current, or local, value of that resource object type. For example, for the resource object type `/cluster` the alias `me` can be substituted for the `id` of the Rubrik cluster that is hosting the current session. For the resource object type `/session` the alias `me` can be substituted for the `id` of the current session.

    In filters, use the alias `local` to refer to the Rubrik cluster that is hosting the current session.

    #### Timestamp

    The Rubrik REST API uses a timestamp to express all time values. The timestamp meets the standards of ISO 8601 and uses Coordinated Universal Time (UTC). Timestamps take the form: YYYY-MM-DDTHH:MM:SSZ, with YYYY for the four digit year value, MM for the two digit month value, DD for the two digit day of the month value, HH for the two digit hour value using a 24-hour clock, MM for the two digit minute value, and SS for the two digit second value. The T stands for time and the Z stands for Zulu time, another name for UTC.

    **Example:** Timestamp in a JSON-formatted response body

    ```bash
    {
      "createdTimestamp": "2016-02-11T18:02:24Z"
    }
    ```

    ### Responses

    The Rubrik REST API server responds to all requests by sending an HTTP response message. The response contains a status code and, when appropriate, a JSON object in the response body.

    #### Status codes

    The Rubrik REST API server includes an HTTP status code with every response. The following table describes the status codes supported by the Rubrik REST API server.

    | Status code | Description |
    | ----------- | ----------- |
    | 200&nbsp;OK | Request succeeded. Not used for a DELETE request, or for a POST request that creates a resource. |
    | 201&nbsp;Created | POST request to create a resource object succeeded. |
    | 202&nbsp;Accepted | Request was successfully accepted for further processing. |
    | 204&nbsp;No&nbsp;Content | Request succeeded and the response body is empty. Used for successful DELETE requests and for successful POST requests that do not return content. |
    | 400&nbsp;Bad&nbsp;Request | Request failed because it was malformed. The request may be garbled, or it may be missing required parameters. |
    | 401&nbsp;Unauthorized | The requestor has insufficient authorization to perform the requested action. |
    | 403&nbsp;Forbidden | The requested action is blocked in the current context. |
    | 404&nbsp;Not&nbsp;Found | The request references a resource object that is unknown to the Rubrik REST API server. |
    | 415&nbsp;Unsupported Media Type | The HTTP header of the request specifies a media type that is not supported by the Rubrik REST API server. |
    | 422&nbsp;Unprocessable Entity | The request specifies a correct media type and contains correct syntax but cannot be processed because of semantical errors. |
    | 500&nbsp;Internal Server Error | The Rubrik REST API server encountered an unhandled error. |
    | 503&nbsp;Service Unavailable Error | The Rubrik REST API server is temporarily unavailable. |

    #### Response body

    The JSON object included in a response body can contain members (`{string : value}`) and arrays (`[elements]`). Also, members and arrays can be nested within members and arrays.

    When a response includes a resource object, the object always includes an `id` member in the form `id : $id`. The value of the `id` member is the unique ID of the resource.

    When a response includes a large array (or list) of elements, the Rubrik REST API server encloses the array in a `ListResponse` structure. The `ListResponse` structure breaks a lengthy array into 'pages' of information to make the information easier to manage. Refer to 'Working with lists' for information about managing arrays with large numbers of values.

    #### Status code 400 responses

    The Rubrik REST API server sends a response containing the HTTP status code '400 Bad Request' when the server cannot process the request. This can be caused by malformed request syntax, invalid request message framing, or deceptive request routing.

    The Rubrik REST API server returns a '400 Bad Request' when:
    * Request does not conform with the format specified in OpenAPI definition files. For example, the request is missing required fields.
    * Request is malformed. For example, the request has a malformed `id`.
    * Request contains unsupported `enum` values.

    #### Status code 422 responses

    The Rubrik REST API server sends a response containing the HTTP status code '422 Unproccessable entity' when the request is syntactically correct but has semantic errors.

    For example, when a request refers to an archival location that is not available. Although the request is properly formed, the Rubrik REST API server cannot act on the request because of the missing archival location, and the server returns '422 Unproccessable entity'.

    The Rubrik REST API server also returns '422 Unproccessable entity' when invalid credentials are submitted during login. In that situation, the request may be correctly formed but the action cannot be completed by using the supplied values.

    The following table describes the members of a '422 Unproccessable entity' response object.

    | Member | Optional | Description |
    | ------ | --- | ----------- |
    | `type` | No | Error category. Possible values include: vcenter_error, oracle_error, rubrik_error |
    | `message` | No | Plain text explanation of the cause of the error. |
    | `code` | Yes | A short text string representing the cause of the error. |
    | `param` | Yes | The request member that is the source of the error, such as `backup_window`. |

    ## Working with lists

    When a request returns a large list of elements, the response array can be encapsulated within a `ListResponse` object. The `ListResponse` object is a pagination structure for the elements in the response array. The `ListResponse` object allows the response array to be addressed through smaller subsets of the array, or 'pages'.

    To work with a `ListResponse` object, form a request that calls for a specific page of the results by specifying an offset value and a limit. The response includes the elements from the list starting at the offset value and continuing to the limit. When the limit is very large, or unspecified, the Rubrik REST API server returns as many elements as can be handled by the available memory.

    The `ListResponse` object consists of the members described in the following table.

    | Member | Optional | Description |
    | ------ | --- | ----------- |
    | `hasMore` | No | Indicates whether the array contains elements that are not provided by the current response. `true` if more elements are available for the original request and `false` if the last element is in the current response. |
    | `data` | No | An array of the requested elements. Can be all or some of the elements requested. The elements can be members, arrays, or objects. |
    | `total` | Yes | Total number of elements. |
    | `links` | Yes | When `hasMore` is true, provides a request URL for the next page of results. When appropriate, also provides a request URL for the previous page of results. The request URLs provided by `links` retain the query parameters from the original request. For example, a request URL would retain a value specified by `limit` and a value specified by `search`. The exception to this is the value specified by `offset`, which the Rubrik REST API server uses to specify next and previous pages. |

    Control the contents of a `ListResponse` object by including the following optional query parameters with the original request:
    * `limit`
    Defines the maximum number of a elements to include in the `data` array of the response. Available memory may prevent the return of all elements for very large `limit` values. When that occurs, the response includes `"hasMore": true`.
    * `offset`
    Index reference point to use when determining the elements to include in a response. Include the next element after the index number specified by `offset`. The default value is `0`, which means the list page that is provided in the response starts with first element in the list.

    For example, if the total number of elements in response to a query are 100, and the request includes the following query parameters: `limit=10` and `offset=30`, then the response will include a list page with elements 31-40.

    When the `ListResponse` object provides `next` and `prev`, use the URL specified by `next` to request the next page of elements or use the URL specified by `prev` to request the previous page of elements.

    **Example:** Request for all snapshots from a Rubrik cluster

    The initial request uses the query parameter `limit=1`.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/vm/snapshot?limit=1"
    ```

    The response returns the first element and `"hasMore": true` indicates that more than one snapshot meets the request.

    ```bash
    {
      "hasMore": true,
      "status": "RUNNING",
      "data": [
        {
          "id": "1",
          "name": "Windows2012"
        }
      ],
      "links": {
        "next": {
          "href": "https://$cluster_address/api/v1/vmware/vm/snapshot?limit=1&offset=1"
        }
      }
    }

    ```

    To obtain the next element, the request is reissued with the query parameters set to: `limit=1&offset=1`. This could also be achieved by using the URL specified by `next` to request the next page.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/vm/snapshot?limit=1&offset=1"
    ```

    The response returns the second element in the array. Since there are elements before and after the element in the response, the `links` member contains both a `next` request URL and a `prev` request URL.

    ```bash
    {
      "hasMore": false,
      "status": "RUNNING",
      "data": [
        {
          "id": "2",
          "name": "Windows2016"
        }
      ],
      "links": {
        "prev": {
           "href": "https://$cluster_address/api/v1/vmware/vm/snapshot?limit=1&offset=0",
          "rel": "prev"
        },
        "next": {
          "href": "https://$cluster_address/api/v1/vmware/vm/snapshot?limit=1&offset=2",
          "rel": "next"
        }
      }
    }
    ```

    ## Asynchronous requests

    The Rubrik REST API server uses asynchronous (async) API requests for tasks that take longer to run. By using async requests the Rubrik REST API server avoids blocking the requestor from performing other tasks while the async tasks run.

    The response to an async request includes a task object in the response body. The following table describes the members of a task object.

    | Member | Optional | Description |
    | ------ | --- | ----------- |
    | `id` | No |  ID assigned to the task.  |
    | `status` | No |  Status of the task: 'RUNNING', 'SUCCEEDED', 'CANCELED', or 'FAILED'.   |
    | `error` | No | Message describing reason for canceled or failed task, or 'None'. |
    | `startTime` | Yes | Timestamp when the Rubrik cluster schedules the task. |
    | `endTime` | Yes | Timestamp when the task ends. |
    | `progress` | Yes | Percentage of the task that is complete. |
    | `links` | No | Polling request array that provides information about how to poll the task. |

    The following table describes the polling request array in the `links` member.

    | Member | Optional | Description |
    | ------ | --- | ----------- |
    | `href` | No | URL to send requests to when polling the task. |
    | `rel` | No | Provides a value of 'self' to indicate that the array refers to the resource represented by the parent JSON object. |

    When an async task is completed the Rubrik REST API server adds a second array to the `links` member in the response that is sent. The second array provides information about how to request the result of the async task.

    The following table describes the results array in the `links` member.

    | Member | Optional | Description |
    | ------ | --- | ----------- |
    | `href` | No | URL to send a request to for the result of the task. |
    | `rel` | No | Provides a value of 'result' to indicate that the array refers to the resource represented by the parent JSON object. |

    **Example:** Starting a mount task and polling the task status

    To initiate a mount operation, send a POST request to the mount endpoint. Include an object containing the details of the snapshot.

    ```bash
    curl -X POST "https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id/mount"
    ```

    The Rubrik REST API server returns a task object for the mount operation. The task object describes the task status as 'RUNNING' and provides the `links` member which contains the polling request array.

    ```bash
    {
      "id": "$request_id",
      "status": "RUNNING",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vm/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```

    Using the information provided in the task object, send a GET request to poll the task status.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/vm/request/$request_id"
    ```

    ```bash
    {
      "id": "$request_id",
      "status": "RUNNING",
      "error": "None",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vm/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```

    Continue to poll the task object until the status changes to 'SUCCEEDED'.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/vm/request/$request_id"
    ```

    When the task object status changes to 'SUCCEEDED', the `links` member of the request includes a results array that provides a URL for the task results.

    ```bash
    {
      "id": "$request_id",
      "status": "SUCCEEDED",
      "error": "None",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vm/request/$request_id",
          "rel": "self"
        },
        {
          "href": "https://$cluster_address/api/v1/vmware/vm/$mounted_vm_id",
          "rel": "result"
        }
      ]
    }
    ```

    # OpenAPI
    The Rubrik REST API specification conforms to the OpenAPI 2.0 Specification. Tools that work with the OpenAPI 2.0 Specification can be used with the Rubrik REST API specification.

    Development releases (pre-1.0) of the Rubrik REST API specification made reference to 'swagger'. The previous release of the OpenAPI 2.0 Specification was named the Swagger 1.2 Specification.

    Download the Rubrik REST API specification for your tools. [Download](./api-docs)

    ## Rubrik REST API Explorer
    The Rubrik REST API Explorer is a browser-based API client hosted by the Rubrik cluster. The Explorer has the Rubrik REST API specification built in. You can use the Explorer to try out Rubrik REST API calls and view the responses.

    **IMPORTANT:** The Explorer interacts with the Rubrik cluster through the API calls you make. Use care when making calls that modify or delete configurations and data.

    To access the Rubrik REST API Explorer, click: [Rubrik REST API Explorer](./playground/)

    # Authentication

    The Rubrik REST API server requires that all API calls use the HTTPS protocol.
    To meet the security requirements of that protocol, the Rubrik REST API server
    uses a self-signed certificate. A Certificate Authority cannot validate a
    self-signed certificate. Configure client tools to ignore the certificate
    validation error.

    The Rubrik REST API server requires authentication and authorization for each
    API call, except calls made to the following endpoints:

    * [/cluster/me/version](#operation/getClusterVersion)
    * [/cluster/me/api_version](#operation/getClusterApiVersion)

    ## Authentication session
    Rubrik REST API server authenticates a session using either of the following
    methods:

    * BasicAuth
    * Token

    The Rubrik REST API server requires that you use an authorized username and
    password for the Rubrik cluster. Usernames are managed by either the Rubrik
    cluster or by your Active Directory service.

    ### BasicAuth authentication

    BasicAuth authentication uses the HTTP Basic Authentication method and requires
    you to include the user credentials with each API call. Since each API call
    made using the BasicAuth method is separately authenticated, you do not need
    to manage the session state. You also do not need to log out of a session,
    since this method does not create a session.

    To use the BasicAuth method, provide the user credentials in the
    'Authorization' header of an API call.

    Use the string `Basic` followed by the Base64 encoding of `<username:password>`
    as the user credentials, where `<username:password>` is the username for an
    Admin account on the host Rubrik cluster, a colon, and the account password.

    **Example:** Using curl to retrieve a session ID

    This example uses the local Admin username 'admin' and the password 'pass' to
    retrieve: a session ID, the Rubrik server software version, and the API
    version.

    The curl command shown here takes `<username:password>`, adds 'Basic ' to the
    string, and Base64 encodes the result.

     The command includes the following arguments:
     * `-k` to bypass an alert about the self-signed certificate
     * `-u` to flag the `<username:password>` string
     * `-X` to flag the HTTP method `GET`

    ```bash
    curl -k -u admin:pass -X GET "https://$cluster_address/api/v1/cluster/me"
    ```
    The Rubrik REST API server returns the following response body.
    ```bash
    {
      "id": "$cluster_id",
      "version": "3.1.0",
      "apiVersion": "1.0"
    }
    ```

    ### Token authentication

    Token authentication creates a token at the beginning of a session and then
    uses that token to authenticate the API calls that are made during the session.
    The token remains valid for the session - normally 30 minutes after the last
    activity. You can close a session and invalidate the session token at any time
    by making a DELETE call to `/session/{id}` where `{id}` is the session ID or
    `me` for the current session ID.

    **Example:** Token authentication in a session

    This example uses the local Admin username 'admin' and the password 'pass'. To
    open a session, first use the [BasicAuth](#section/BasicAuth) method to
    authenticate a POST call to [/session](#operation/createSession).

    ```bash
    curl -k -u admin:pass -X POST "https://$cluster_address/api/v1/session"
    ```

    The response body includes an array with the session token.

    ```bash
    {
      "id": "$session_id",
      "token": "$token_id",
      "userId": "$user_id"
    }
    ```
    For all subsequent calls during the session, include the token in the
    Authorization header using the form: `Authorization: Bearer $token_id` where
    `$token_id` is the value of the `token` member from the response array.

    In this curl command, the GET request to
    [/cluster](#operation/getPublicClusterInfo) uses `-H` to provide the
    `Authorization: Bearer $token_id` value.

    ```bash
    curl -k -H "Authorization: Bearer $token_id" -X GET
      "https://$cluster_address/api/v1/cluster/me"
    ```

    The response body contains an array with the session ID, the Rubrik
    cluster software version, and the API version.

    ```bash
    {
      "id": "$cluster_id",
      "version": "3.1.0",
      "apiVersion": "1.0"
    }
    ```

    To close the session and invalidate the session token, make a DELETE call to
    [/session](#operation/deleteSession) using the value of the `id` key or use
    `me`. The alias `me` represents the session specified in the Authorization
    header.

    ```bash
    curl -k -H "Authorization: Bearer $token_id" -X DELETE
      "https://$cluster_address/api/v1/session/me"
    ```

    ## Active Directory Authentication

    The Rubrik cluster can be integrated with an Active Directory service for
    authentication. The API endpoints provide support for adding, updating and
    deleting a specific Active Directory service as well as list all of the
    configured Active Directory services.

    ### Add a new Active Directory service
    You can add a new Active Directory service by making a POST call to
    [/ldap_service](#operation/createLdapService). Adding a new Active Directory
    service requires information about the dynamic DNS name of the service, an
    administrative user who is authorized to create a computer user account as
    well as search for all the Active Directory objects needed for use by the
    Rubrik cluster. The Rubrik cluster resolves the dynamic DNS name using DNS
    SRV records while honoring the advertised priority values.

    **Example:** Adds a new Active Directory service for use by the Rubrik cluster

    This example adds an Active Directory service that uses a dynamic DNS name
    of *example.com*, with a bind administrator user of *Administrator* with a
    password of *VerySafe*.

    ```bash
    curl -k -u admin:pass -X POST -d '{"dynamicDnsName": "example.com",
      "bindUserName": "Administrator", "bindUserPassword": "VerySafe"}'
      'https://$cluster_address/api/v1/ldap_service'
    ```

    The response body includes the ID associated with this Active Directory.

    ```bash
    {
      "id": "499aeb71-f114-45a5-8456-91b9f6c45ddd",
      "domainType": "AD",
      "name": "example.com",
      "serviceAccount": "cluster10-c8D7A54$",
      "initialRefreshStatus": "ongoing"
    }
    ```

    ### Update an existing Active Directory service
    The parameters associated with the Active Directory domain can be updated by
    making a PATCH request to [/ldap_service/{id}](#operation/updateLdapService).

    For example, you could add a prioritized list of authentication servers that
    supercede the LDAP servers advertised for the dynamic DNS name. These
    authentication servers can even be proxies that connect to the actual
    Active Directory Domain controllers.

    **Example:** Add two new Active Directory services

    This example adds two Active Directory servers called ad-proxy1.example.com
    and ad-proxy2.cloud.example.com.

    ```bash
    curl -k -u admin:pass -X PATCH -d '{ "authServers":
    ["ldap://ad-proxy1.example.com:389", "ldap://ad-proxy2.example.com:389"]}'
    https://$cluster_address/api/v1/ldap_service/499aeb71-f114-45a5-8456-91b9f6c45ddd
    ```

    The response body confirms a successful update.

    ```bash
    {
      "id": "499aeb71-f114-45a5-8456-91b9f6c45ddd",
      "domainType": "AD",
      "name": "example.com",
      "initialRefreshStatus": "success"
    }
    ```

    ### List configured Active Directory services
    You can get a listing of all the configured authentication domains using
    a GET request to [/ldap_service](#operation/queryLdapService).

    **Example:** Get the list of Active Directory domains.

    ```bash
    curl -k -u admin:pass -X GET 'https://$cluster_address/api/v1/ldap_service'
    ```

    The response body will contain the ID of all the authentication realms.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "id": "499aeb71-f114-45a5-8456-91b9f6c45ddd",
          "domainType": "AD",
          "name": "example.com",
          "serviceAccount": "cluster10-c8D7A54$",
          "initialRefreshStatus": "success"
        },
        {
          "id": "9fef084b-75f8-4c03-9efa-c73b55be5da8",
          "domainType": "LOCAL",
          "name": "local",
          "initialRefreshStatus": "success"
        }
      ],
      "total": 2
    }

    ```

    ### Get information about a specific Active Directory service

    You can also get information about a specific Active Directory service using
    a GET request to [/ldap_service/{id}](#operation/getLdapService).

    **Example:** Get information about a configured Active Directory domains.

    ```bash
    curl -k -u admin:pass -X GET
      'https://$cluster_address/api/v1/ldap_service/499aeb71-f114-45a5-8456-91b9f6c45ddd'
    ```

    The response body will contain information about this Active Directory service.

    ```bash
    {
      "id": "499aeb71-f114-45a5-8456-91b9f6c45ddd",
      "domainType": "AD",
      "name": "example.com",
      "serviceAccount": "cluster10-c8D7A54$",
      "initialRefreshStatus": "success"
    }
    ```

    ### Delete an Active Directory service
    Finally, any Active Directory authentication domain that is configured
    to a Rubrik cluster can be removed by issuing a DELETE request to
    [/ldap_service/{id}](#operation/deleteLdapService).

    **Example:** Remove the Active Directory service

    ```bash
    curl -k -u admin:pass -X DELETE
    https://$cluster_address/api/v1/ldap_service/499aeb71-f114-45a5-8456-91b9f6c45ddd

    ```

    # Rubrik cluster management

    This section explains how to retrieve basic information about a Rubrik cluster, as well as how to update the name of a cluster.

    ## Retrieving Rubrik Cluster Information


    **Example:** Retrieving publicly available information about a Rubrik cluster

    To retrieve information about a Rubrik cluster, send a GET request to the [`/cluster/$cluster_id`](#operation/getPublicClusterInfo) endpoint. The Rubrik REST API server responds with the publicly available information for the specified Rubrik cluster.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/cluster/$cluster_id"
    ```

    The Rubrik REST API server returns an array with the session ID, the Rubrik cluster software version, the API version, the Rubrik cluster name, and the Rubrik cluster time zone.

    ```bash
    {
      "id": "$cluster_id",
      "version": "4.1.0",
      "apiVersion": "1.0",
      "name": "$cluster_name",
      "timezone": {
        "timezone": "$cluster_timezone"
      }
    }
    ```

    To request only the current software version of the Rubrik cluster, send a GET request to the [`/cluster/$cluster_id/version`](#operation/getClusterVersion) endpoint.
    ```bash
    curl -X GET "https://$cluster_address/api/v1/cluster/$cluster_id/version"
    ```

    To request only the current REST API version running on the cluster, send a GET request to [`/cluster/$cluster_id/api_version`](#operation/getClusterApiVersion)

    ```bash
    curl -X GET "https://$cluster_address/api/v1/cluster/$cluster_id/api_version"
    ```

    ## Changing the Rubrik cluster name or time zone

    To change the name or the current time zone of a Rubrik cluster, send a PATCH request to the [`/cluster/$cluster_id`](#operation/updateCluster) endpoint.  Specify the new name as the value of `$cluster_name`, and specify the new time zone as the value of `$cluster_timezone`.

    **Example:** Changing the name and the time zone of a Rubrik cluster

    ```bash
    curl -X PATCH \
      -d '{ "clusterName": $cluster_name, "timezone": { "timezone": $cluster_timezone } }' \
      "https://$cluster_address/api/v1/cluster/$cluster_id"
    ```

    The response provides the attributes of the specified Rubrik cluster object, including the new name, and the new time zone.

    ```bash
    {
      "id": "$cluster_id",
      "version": "4.1.0",
      "apiVersion": "1.0",
      "name": "$cluster_name",
      "timezone": {
          "timezone": "$cluster_timezone"
      }
    }
    ```

    # SLA Domains

    Rubrik clusters provide automated data management and protection through SLA Domains.
    An SLA Domain defines the data management and protection policies for their assigned snappables (virtual machines, file systems, and applications).

    To provide policy based management and protection of a snappable, add the snappable to an SLA Domain, or to multiple SLA Domains.

    ## Retrieving SLA Domains

    Before assigning snappables to SLA Domains, get a list of the SLA Domains that exist on a Rubrik cluster. For a new Rubrik cluster, the list shows only the default SLA Domains. When custom SLA Domains are added to the Rubrik cluster, the list is modified to include those SLA Domains.

    **Example:** Retrieving SLA Domains from a Rubrik cluster

    Send a GET request to [`/sla_domain`](#operation/querySlaDomain).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/sla_domain"
    ```

    The Rubrik REST API server returns a `ListResponse` object of all SLA Domains.
    At a minimum, the `ListResponse` object includes the default SLA Domains: Gold, Silver, and Bronze.

    ```bash
    {
      "data": [
        {
          "id": "$gold_sla_id",
          "name": "Gold"
        },
        {
          "id": "$silver_sla_id",
          "name": "Silver"
        },
        {
          "id": "$bronze_sla_id",
          "name": "Bronze"
        }
      ],
      "hasMore": false,
      "total": 3
    }
    ```

    To obtain more details about a specific SLA domain send a GET request with the `id` of one of the SLA Domains to the `/sla_domain/{id}` endpoint:  [`/sla_domain/{id}`](#operation/getSlaDomain)

    ```bash
    curl -X GET "https://$cluster_address/api/v1/sla_domain/$bronze_sla_id"
    ```
    The Rubrik REST API server responds with the details of the specified SLA Domain.

    ```bash
    {
      "id": "$bronze_sla_id",
      "primaryClusterId": "$cluster_id",
      "name": "Bronze",
      "frequencies": [
        {
          "timeUnit": "Daily",
          "frequency": 1,
          "retention": 32
        },
        {
          "timeUnit": "Monthly",
          "frequency": 1,
          "retention": 12
        },
        {
          "timeUnit": "Yearly",
          "frequency": 1,
          "retention": 2
        }
      ],
      "allowedBackupWindows": [],
      "firstFullAllowedBackupWindows": [],
      "archivalSpecs": [],
      "replicationSpecs": [
        {
          "locationId": "$repl_location_id",
          "retentionLimit": 0
        }
      ],
      "numDbs": 0,
      "numFilesets": 7,
      "numLinuxHosts": 3,
      "numWindowsHosts": 2,
      "numVms": 1,
      "isDefault": false,
      "uiColor": "#cc8366"
    }
    ```

    ## Working with SLA Domains

    To work with an SLA Domain, obtain the `id` of that SLA Domain. As described in [Retrieving SLA Domains](#section/SLA-Domains/Retrieving-SLA-Domains), start by sending a GET request to [`/sla_domain`](#operation/querySlaDomain).

    The Rubrik REST API server responds with a `ListResponse` object that contains all of the SLA Domains on the specfied Rubrik cluster. From that list object, find the data array element that has the `name` value of the selected SLA Domain. In the same array element as the `name` value, note the value of the `id` string.

    ## Creating SLA Domains

    To create an SLA domain send a POST request to [`/sla_domain`](#operation/createSlaDomain). Include the attributes for the SLA Domain in the request body.

    The following table describes the required and optional attributes to include in the request body when creating an SLA Domain.

    | Attribute | Req'd | JSON Type | Description |
    | ------ | --- | ----- | ----------- |
    | `name` | Yes | String | Name of the SLA Domain.  |
    | `frequencies` | Yes | Array | Each member defines a policy by specifying: `timeUnit`, `frequency`, and `retention`. Requires at least one member in the array.  |
    | `allowedBackupWindows` | Yes | Array | Each member defines a backup window using values for `startTimeAttributes` and `durationInHours`. The time specified in `startTimeAttributes` uses the Rubrik cluster time zone. To specify multiple backup windows, add an array member for each window. To create an SLA Domain without a backup window, specify a null array value: `[]`.  |
    | `firstFullAllowedBackupWindows` | Yes | Array | Each member defines a period when first full backups are allowed by specifying: `startTimeAttributes` and `durationInHours`. Several first full backup windows can be specified by adding an array member for each one. Create an SLA Domain without a first full backup window by specifying a null array value: `[]`.  |
    | `localRetentionLimit` | No | String | Specify an integer value to set the number of days to retain a local copy of a snapshot. When an archival location is specified, specify `0` to enable Instant Archiving. |
    | `archivalSpecs` | No | Array | Defines the archival location for the SLA Domain by specifying: `locationId` and `archivalThreshold`. Currently limited to one array member. |
    | `replicationSpecs` | No | Array | Defines the replication location for the SLA Domain by specifying: `locationId` and `retentionLimit`. Currently limited to one array member. |

    **Example:** Creating an SLA Domain for daily backups

    Create an SLA Domain that takes a backup once a day and retains the backup for seven days. Do not set a backup window or a first full backup window. Do not include archival or replication.

    ```bash
    curl -X POST \
      -d '{
      "name": "Daily SLA",
      "frequencies": [
        {
          "timeUnit": "Day",
          "frequency": 1,
          "retention": 7
        }
      ],
      "allowedBackupWindows": [],
      "firstFullAllowedBackupWindows": [] }' \
      "https://$cluster_address/api/v1/sla_domain"
    ```
    The response confirms the attributes of the SLA Domain and provides the `id` of the new SLA Domain.

    ```bash
    {
      "id": "$sla_id",
      "name": "Daily SLA",
      "frequencies": [
        {
          "timeUnit": "Day",
          "frequency": 1,
          "retention": 7
        }
      ],
      "allowedBackupWindows": [],
      "firstFullAllowedBackupWindows": []
    }
    ```
    ## Modifying SLA Domains

    To modify the attributes of an SLA domain send a PUT request to [`/sla_domain/{id}`](#operation/updateSlaDomain). Include in the request body the new attributes.

    **Example:** Modifying the daily backup SLA Domain

    Change the SLA Domain that was created in [Creating SLA Domains](#section/SLA-Domains/Creating-SLA-Domains) to increase the retention to 14 days.

    ```bash
    curl -X PUT \
      -d '{
      "name": "Daily SLA",
      "frequencies": [
        {
          "timeUnit": "Day",
          "frequency": 1,
          "retention": 14
        }
      ],
      "allowedBackupWindows": [],
      "firstFullAllowedBackupWindows": [] }' \
      "https://$cluster_address/api/v1/sla_domain/$sla_id"
    ```
    The response confirms the new attribute.

    ```bash
    {
      "id": "$sla_id",
      "name": "Daily SLA",
      "frequencies": [
        {
          "timeUnit": "Day",
          "frequency": 1,
          "retention": 14
        }
      ],
      "allowedBackupWindows": [],
      "firstFullAllowedBackupWindows": []
    }
    ```
    ## Patching SLA Domains

    To patch the attributes of an SLA domain, send a PATCH request to
    [`/sla_domain/{id}`](#operation/patchSlaDomain). Include in the request body
    only the attributes that needs to be patched.

    **Example:** Patching the daily backup SLA Domain

    Patch the SLA Domain that was created in [Creating SLA Domains]
    (#section/SLA-Domains/Creating-SLA-Domains) to change the archival
    specifications.

    ```bash
    curl -X PATCH \
      -d '{
      "archivalSpecs": [
        {
            "locationId": "some-valid-archived-location-id",
            "archivalThreshold": 14
        }
      ]}' \
      "https://$cluster_address/api/v1/sla_domain/$sla_id"
    ```
    The response confirms the new attribute and also includes the other
    attributes that were not changed.

    ```bash
    {
      "id": "$sla_id",
      "name": "Daily SLA",
      "frequencies": [
        {
          "timeUnit": "Day",
          "frequency": 1,
          "retention": 7
        }
      ],
      "archivalSpecs": [
        {
          "locationId": "some-valid-archived-location-id",
          "archivalThreshold": 14
        }
      ],
      "allowedBackupWindows": [],
      "firstFullAllowedBackupWindows": []
    }
    ```
    ## Deleting SLA Domains

    To delete an SLA domain send a DELETE request to [`/sla_domain/{id}`](#operation/deleteSlaDomain).

    **Example:** Deleting an SLA Domain

    Delete an SLA Domain with the `id` of `$sla_id`.

    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/sla_domain/$sla_id"
    ```
    The Rubrik REST API server responds with HTTP response code 204. This indicates the request succeeded and the response body is empty.

    ## Inherited protection

    The Rubrik REST API uses the reserved value `INHERIT` with the `configuredSlaDomainId` string to identify a snappable that derives its protection policy from a parent object. Examples of this:
    * VMware virtual machine inherits from vCenter Server
    * SQL Server database inherits from SQL Server instance

    Every snappable that can be protected through an SLA Domain is represented by an object that has a `configuredSlaDomainId` attribute and an `effectiveSlaDomainId` attribute. The `configuredSlaDomainId` attribute contains either the value of a direct SLA Domain assignment or the reserved value `INHERIT`.

    The `effectiveSlaDomainId` attribute contains the value of the SLA Domain setting that the Rubrik cluster actually applies to the snappable. When the value of the `configuredSlaDomainId` attribute is `INHERIT`, the value of the `effectiveSlaDomainId` attribute is derived from a parent object of the snappable. In all other cases, the value of the `effectiveSlaDomainId` attribute is the same as the value of the `configuredSlaDomainId` attribute.


    ## SLA Domain assignments

    To assign a snappable to an SLA Domain, use the endpoint that is provided for that type of snappable.
    * VMware virtual machines  
    Send a PATCH request to  [`/vmware/vm/{id}`](#operation/updateVm). [VMware virtual machines](#section/VMware-virtual-machines) provides more information about this.
    * Linux or Windows filesets  
    Send a PATCH request to  [`/fileset/{id}`](#operation/updateFileset). [Filesets](#section/Filesets) provides more information about this.
    * SQL Server databases  
    Send a PATCH request to  [`/mssql/db/{id}`](#operation/updateMssqlDb). [SQL Server databases](#section/SQL-Server-databases) provides more information about this.

    # Virtual machines

    The Rubrik cluster protects virtual machines running in a VMware vSphere
    environment through the VADP APIs. The Rubrik cluster also works with
    the Rubrik Backup Service running on the virtual machine to provide:

    * Optimal performance when restoring files and folders to the virtual machine
    * Application consistent snapshots of a Windows virtual machine


    ## vCenter servers

    A Rubrik cluster normally protects and manages virtual machines through the vCenter Server that administers those virtual machines. After a vCenter server is added to a Rubrik cluster, the Rubrik cluster automatically discovers the virtual machines that are administered by that vCenter server.

    ### Retrieving vCenter Servers

    Request a list of the vCenter servers that are registered with a Rubrik cluster by sending a GET request to  [`/vmware/vcenter`](#operation/queryVcenter).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/vcenter"
    ```

    The Rubrik REST API server responds with the first page of a `ListResponse` object.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "id": "$vcenter_id0",
          "hostname": "$vcenter_address0",
          "username": "$vcenter_admin0",
          "configuredSlaDomainId": "INHERIT",
          "primaryClusterId": "$cluster_id",
          "caCerts": "$ca_certs0"
        },
        {
          "id": "$vcenter_id1",
          "hostname": "$vcenter_address1",
          "username": "$vcenter_admin1",
          "configuredSlaDomainId": "INHERIT",
          "primaryClusterId": "$cluster_id",
          "caCerts": "$ca_certs1"
        }
      ],
      "total": 2
    }
    ```
    Depending on the number of registered vCenter Servers, all of the entries on the list may not be included on the first page. [Working with lists](#section/Overview/Working-with-lists) describes how to work with a ListResponse object to obtain additional pages of the list.


    ### Adding a vCenter server

    To add a vCenter server, send a POST request to [`/vmware/vcenter`](#operation/createVcenter).
    Include in the body of the request the address of the vCenter server and credentials for a user account (`username`) that has the required permissions. The Rubrik User Guide provides details about creating an account with the required permissions.

    ```bash
    curl -X POST \
      -d '{
        "hostname": "$vcenter_address",
        "username": "$vcenter_admin",
        "password": "$vcenter_password" }' \
      "https://$cluster_address/api/v1/vmware/vcenter"
    ```

    The Rubrik REST API server initiates the asynchronous request task and responds with a task object.

    ```bash
    {
      "id": "$request_id",
      "status": "RUNNING",
      "error": "None",
      "progress": "$request_progress"
      "links": [
        {
          href: "https://$cluster_address/api/v1/vmware/vcenter/request/$request_id",
          rel: "self"
        }
      ]
    }
    ```

    Using the information provided in the task object, send a GET request to the [`/vmware/vcenter/request/{id}`](#operation/getVcenterAsyncRequestStatus) endpoint to poll the task status. When the value of `status` in the task object is `SUCCEEDED`, the task finished successfully.

    ### Retrieve vCenter Server details
    Get the details for a vCenter Server that is registered with a Rubrik cluster by sending a GET request to [`/vmware/vcenter/{id}`](#operation/getVcenter).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/vcenter/{id}"
    ```

    The Rubrik REST API server responds with the details of the specified vCenter Server object.

    ```bash
    {
      "id": "$id",
      "hostname": "$vcenter_address0",
      "username": "$vcenter_admin0",
      "configuredSlaDomainId": "INHERIT",
      "primaryClusterId": "$cluster_id"
    }
    ```

    ### Modifying a vCenter Server entry

    To change the information that a Rubrik cluster stores for a vCenter Server, send a PUT request to [`/vmware/vcenter/{id}`](#operation/updateVcenter). All of the members of the `VcenterConfig` object must be in the PUT request. Using the new values, include in the body of the PUT request each member (`{string : value}`) of the `VcenterConfig` object:
    * `"hostname": "$vcenter_address"`
    * `"username": "$vcenter_admin"`
    * `"password": "$vcenter_password"`

    To change the configured SLA that is configured for a vCenter Server or to change CA certificates for the vCenter, send a PATCH request to[`/vmware/vcenter/{id}`](#operation/patchVcenter).

    ```bash
    curl -X PUT \
      -d '{
        "hostname": "$vcenter_address",
        "username": "$vcenter_admin",
        "password": "$vcenter_password" }' \
      "https://$cluster_address/api/v1/vmware/vcenter/$vcenter_id"
    ```

    The Rubrik REST API server sends a response, with the updated details of the vCenter Server entry in the response body.

    ```bash
    {
      "id": "$vcenter_id",
      "hostname": "$vcenter_address",
      "username": "$vcenter_admin",
      "configuredSlaDomainId": "INHERIT",
      "primaryClusterId": "$cluster_id",
      "caCerts": "$ca_certs"
    }
    ```
    ### Removing a vCenter Server entry

    To remove a vCenter Server entry from a Rubrik cluster, first unmount any Live Mount and Instant Recovery virtual machines for the vCenter Server. Then send a DELETE request to [`/vmware/vcenter/{id}`](#operation/deleteVcenter).

    ```bash
    curl -X DELETE \
      "https://$cluster_address/api/v1/vmware/vcenter/$vcenter_id"
    ```
    The Rubrik REST API server initiates the asynchronous delete task and responds with a task object.

    ```bash
    {
        "id": "$request_id",
        "status": "RUNNING",
        "error": "None",
        "progress": 0,
        "startTime": "$start_timestamp",
        "endTime": "$end_timestamp",
        "links": [
          {
            "href": "https://$cluster_address/api/v1/vmware/vcenter/request/$request_id",
            "rel": "self"
          }
        ]
      }
    ```
    Using the information provided in the task object, send a GET request to poll the task status. When the value of `status` in the task object is `SUCCEEDED`, the removal of the vCenter Server object finished successfully.



    ### Metadata refresh

    The Rubrik cluster regularly refreshes the metadata of the registered vCenter Servers. As part of a refresh operation, the Rubrik cluster discovers any changes or additions to the virtual machines that are administered by the vCenter Servers. Instead of waiting for a regular refresh, a metadata refresh can be manually initiated by sending a POST request to [`/vmware/vm/refresh`](#operation/createRefresh), using the Rubrik cluster ID (`$cluster_address`) and the vCenter Server ID (`$vcenter_id`).

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/vmware/vcenter/$vcenter_id/refresh"
    ```

    The Rubrik REST API server initiates the asynchronous request task and responds with a task object.

    ```bash
    {
      "id": "$request_id",
      "status": "RUNNING",
      "error": "None",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vcenter/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```

    Using the information provided in the task object, send a GET request to poll the task status. When the value of `status` in the task object is `SUCCEEDED`, the metadata refresh completed successfully.

    ## ESXi hypervisors

    Retrieve a list of all available ESXi hypervisors in the vSphere environment by sending a GET request to [`/vmware/host`](#operation/queryVmwareHost).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/host?primary_cluster_id=$cluster_id"
    ```
    The value of `primary_cluster_id` is the `id` of a Rubrik cluster. Use `local` to retrieve a list for the Rubrik cluster that is hosting the current session.

    The Rubrik REST API server responds with the first page of a `ListResponse` object.

    **Note:** To shorten the example, the response uses ellipsis to replace some members.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "id": "$esxi_id",
          "name": "$esxi_name",
          "datacenterId": "$datacenter_id",
          "computeClusterId": "$compute_cluster_id",
          "datastores": [
          ...
          ],
          "configuredSlaDomainId": "INHERIT",
          "primaryClusterId": "$cluster_id"
        }
        ],
      "total": 1
    }
    ```

    Retrieve more details for an ESXi hypervisor by sending a GET request to [`/vmware/host/{id}`](#operation/getVmwareHost)

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/vmware/host/$esxi_id"
    ```

    The Rubrik REST API server responds with the details for the specified ESXi hypervisor.

    **Note:** To shorten the example, the response uses ellipsis to replace some members.

    ```bash
    {
      "id": "$esxi_id",
      "moid": "$moid",
      "name": "$esxi_name",
      "computeClusterId": "$compute_cluster_id",
      "datacenter": {
        "id": "$datacenter_id",
        "name": "$datacenter_name",
        "vcenterId": "$vcenter_id",
        "configuredSlaDomainId": "INHERIT",
        "primaryClusterId": "$cluster_id"
      },
      "datastores": [
        ...
      ],
      "virtualMachines": [
        ...
      ],
      "configuredSlaDomainId": "INHERIT",
      "primaryClusterId": "$cluster_id"
    }
    ```

    Additionally, To change the SLA Domain that is configured for an ESXi hypervisor, send a PATCH request on [`/vmware/host`](#operation/updateVmwareHost)

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/vmware/host/$snapshot_id"
    ```

    ## Virtual machine protection

    After a vCenter Server is registered, the Rubrik cluster acquires metadata for the virtual machines that are administered through that vCenter Server. Using the metadata, assign Rubrik cluster protection to the virtual machines.

    The typical protection workflow involves the following tasks:
    1. Find the virtual machine resource object.
    2. (Optional) Enable scripts on the virtual machine.
    3. (Optional) Exclude specified vmdk files for the virtual machine.
    4. Assign the virtual machine to an SLA Domain.

    ### Finding virtual machines
    Get a list of the virtual machine objects known to the Rubrik cluster by sending a GET request to [`/vmware/vm`](#operation/queryVm). The Rubrik REST API server returns a response that includes a `ListResponse` object. Use query parameters as part of the GET request, to filter the list and to work with the `ListResponse` object.

    A GET request that is sent to the [`/vmware/vm`](#operation/queryVm) endpoint accepts the query parameters that are described in the following table.
    | Parameter | Description |
    | --------- | ----------- |
    | `effective_sla_domain_id` | SLA Domain applied to the virtual machine, either directly or derived. Use `UNPROTECTED` for virtual machines that do not have a derived or direct SLA Domain. |
    | `primary_cluster_id` | The `id` of the primary Rubrik cluster for the virtual machine. Use `local` for the Rubrik cluster that is hosting the Rubrik REST API session. |
    | `limit` | Maximum number of a elements to include in the `data` array of the response. |
    | `offset` | Index reference point to use when determining the elements to include in the response. |
    | `is_relic` | Relic status of the virtual machine. `true` to specify only relic virtual machines. `false` to exclude relic virtual machines. Do not include the parameter to include both relic and non-relic virtual machines. |
    | `name` | String value to match in any part of the name of a virtual machine.  |
    | `moid` | String value to match in any part of the MOID of a virtual machine.  |
    | `sla_assignment` | SLA Domain assignment status of the virtual machine. Use `derived` for virtual machines that derive protection status from another resource object. Use `direct` for virtual machines that have a directly assigned SLA Domain. Use `unassigned` for virtual machines that do not have a direct or derived SLA Domain. |
    | `sort_by` | Perform an ASCII sort of the elements in the `ListResponse` object data array by a specified object value: `effective_sla_domain_id`, `name`, `moid`, `folderPath`, or `infraPath`. |
    | sort_order | Sort order for the elements in the ListResponse object data array. Use `asc` for ascending sort or `desc` for descending sort. |


    **Example:** Retrieving a list of virtual machine resource objects

    Retrieve a list of unprotected virtual machine resource objects that have 'test' in their name. Limit the first page of the response to the first object.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/vm?effective_sla_domain_id=UNPROTECTED&limit=1&offset=0&name=test"
    ```
    The Rubrik REST API server responds with a `ListResponse` object. The first page has the first object of the 156 objects that matched the query parameters.

    **Note:** To shorten the example, the response uses ellipsis to replace some members.

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "id": "$vm_id",
          "moid": "$vm_moid",
          "name": "abctest123",
          "vcenterId": "$vcenter_id",
          "hostName": "$esxi_host_name",
          "hostId": "$esxi_host_id",
          "clusterName": "$vcenter_cluster_name",
          "powerStatus": "poweredOn",
          "configuredSlaDomainId": "INHERIT",
          "configuredSlaDomainName": "Inherit",
          "effectiveSlaDomainId": "UNPROTECTED",
          "effectiveSlaDomainName": "Unprotected",
          "slaAssignment": "Unassigned",
          "ipAddress": "$vm_ip",
          "toolsInstalled": true,
          "primaryClusterId": "$cluster_id",
          "isReplicationEnabled": false,
          "folderPath": [
            ...
          ],
          "infraPath": [
            ...
          ],
          "vmwareToolsInstalled": true,
          "isRelic": false,
          "maxNestedVsphereSnapshots": -1,
          "snapshotConsistencyMandate": "UNKNOWN",
          "physicalStorage": 0,
          "guestCredentialAuthorizationStatus": "PENDING"
        }
      ],
      "total": 156
    }
    ```

    ### Retrieving more details for a virtual machine
    To get detailed information for a specified virtual machine object, send a GET request to [`/vmware/vm/{id}`](#operation/getVm).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/vm/$vm_id"
    ```
    The Rubrik REST API server responds with the details for the virtual machine object.

    **Note:** To shorten the example, the response uses ellipsis to replace some members.

    ```bash
    {
      "id": "$vm_id",
      "moid": "$vm_moid",
      "name": "abctest123",
      "powerStatus": "poweredOn",
      "configuredSlaDomainId": "INHERIT",
      "effectiveSlaDomain": {
        ...
      },
      "slaAssignment": "Unassigned",
      "blackoutWindowStatus": {
        "isGlobalBlackoutActive": false,
        "isSnappableBlackoutActive": false
      },
      "blackoutWindows": {
        ...
        ],
        "snappableBlackoutWindows": []
      },
      "currentHost": {
        ...
      },
      "virtualDiskIds": [
        ...
      ],
      "snapshots": [],
      "ipAddress": "$vm_ip",
      "toolsInstalled": true,
      "snapshotCount": 0,
      "snapshotConsistencyMandate": "",
      "maxNestedVsphereSnapshots": -1,
      "primaryClusterId": "$cluster_id",
      "isReplicationEnabled": false,
      "isRelic": false,
      "physicalStorage": 0,
      "guestOsName": "$guest_os",
      "guestCredentialAuthorizationStatus": "PENDING",
      "isArrayIntegrationPossible": false,
      "isArrayIntegrationEnabled": false
    }
    ```

    ### Register Rubrik Backup Service

    To register Rubrik Backup Service running on a specified virtual machine,
    send a POST request to
    [`/vmware/vm/{id}/register_agent`](#operation/vmRegisterAgent).

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/vmware/vm/$vm_id/register_agent"
    ```
    The Rubrik REST API server responds with an HTTP 204 response when the
    registration is successful.


    ### Enabling scripts

    A virtual machine object can be configured to start scripts on the guest operating system. A script can be started before the backup (`preBackupScript`), after the snapshot completes (`postSnapScript`), and after the backup task completes (`postBackupScript`). The *Rubrik User Guide* provides information about script requirements.

    To configure a virtual machine object to start scripts, send a PATCH request to [`/vmware/vm/{id}`](#operation/updateVm). Since this is a PATCH request, only the elements of the virtual machine object that are modified or added should be included in the request body. All three script members are shown in the request body in this model, but all are optional.

    ```bash
    curl -X PATCH \
     -d '{
          "preBackupScript": {
            "scriptPath": "$pre_script_path",
            "timeoutMs": 10000,
            "failureHandling": "abort"
          },
          "postSnapScript": {
            "scriptPath": "$postsnap_script_path",
            "timeoutMs": 10000,
            "failureHandling": "abort"
          },
          "postBackupScript": {
            "scriptPath": "$postbackup_script_path",
            "timeoutMs": 10000,
            "failureHandling": "abort"
          }
        }' \
      "https://$cluster_address/api/v1/vmware/vm/$vm_id"
    ```

    The Rubrik REST API server sends an HTTP 200 response that includes the modified or added members in the response body.

    #### Manually starting a virtual machine script

    For testing or to run a script before running a backup, manually trigger the script by sending a POST request to [`/vmware/vm/{id}/guest_script/run`](#operation/runGuestOsScript). To manually start a script, the script must first be a part of the configuration of the virtual machine object. Use the value of the `phase` member to identify the script, as follows:
    * Use `PreBackup` for the script identified by the `preBackupScript` member.
    * Use `PostSnap` for the script identified by the `postSnapScript` member.
    * Use `PostBackup` for the script identified by the `postBackupScript` member.

    ```bash
    curl -X POST \
      -d '{
        "phase": "PreBackup" }' \
      "https://$cluster_address/api/v1/vmware/vm/$vm_id/guest_script/run"
    ```
    The Rubrik REST API server responds with an HTTP 204 response when the script finishes with a 0 exit code.


    ### Excluding a VMDK file

    The Rubrik cluster can be configured to ignore some of the VMDK files of a virtual machine while protecting the other VMDK files of that virtual machine. To exclude a VMDK file, send a GET request to [`/vmware/vm/virtual_disk/{id}`](#operation/getVirtualDisk) using the `$disk_id` of the VMDK file.

    To get the `$disk_id` values, send a GET request to [`/vmware/vm/{id}`](#operation/getVm). The response body has the `disk_id` values for the virtual machine in the `virtualDiskIds` array.

    After identifying the `$disk_id` for a VMDK file, obtain the current state of the VMDK file.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/vm/virtual_disk/$disk_id"
    ```
    The Rubrik REST API server responds with the value of `excludeFromSnapshots`.

    ```bash
    {
      "id": "$disk_id",
      "excludeFromSnapshots": false
    }
    ```
    When the value is `false` the Rubrik cluster is not configured to exclude the VMDK file. Change this value to `true` to instruct the Rubrik cluster to exclude the VMDK file from all subsequent snapshots of the virtual machine.

    Send a PATCH request to [`/vmware/vm/virtual_disk/{id}`](#operation/updateVirtualDisk) to change the value of `excludeFromSnapshots` to `true` and exclude the VMDK file.

    ```bash
    curl -X PATCH \
      -d '{
        "excludeFromSnapshots": true }' \
      "https://$cluster_address/api/v1/vmware/vm/virtual_disk/$disk_id"
    ```

    The Rubrik REST API server responds with the updated `excludeFromSnapshots` value for the VMDK file.

    ```bash
    {
      "id": "$disk_id",
      "excludeFromSnapshots": true
    }
    ```

    ### Assigning a virtual machine to an SLA Domain
    To protect a virtual machine through the rules and policies of an SLA Domain send a PATCH request to [`/vmware/vm/{id}`](#operation/updateVm) with the value of `configuredSlaDomainId` set to the `$sla_domain_id`.

    **Note:** [Retrieving SLA Domains](#section/SLA-Domains/Retrieving-SLA-Domains) describes how to retrieve the SLA Domain objects on a Rubrik cluster.

    ```bash
    curl -X PATCH -d \
      '{
        "configuredSlaDomainId": "$sla_domain_id"
      }' \
      "https://$cluster_address/api/v1/vmware/vm/$vm_id"
    ```
    The Rubrik REST API server responds with confirmation of the assignment.

    ```bash
    {
      "id": "$vm_id",
      "configuredSlaDomainId": "$sla_domain_id"
    }
    ```
    ## Snapshot management

    Managing snapshots includes the following possible actions:
    * Retrieving snapshot information
    * Retrieving snapshot details
    * Retrieving missed snapshot information
    * Creating on-demand snapshots
    * Expiring individual snapshots
    * Expiring all snapshots for a virtual machine

    ### Retrieving snapshot information

    To retrieve a list of the snapshots for a virtual machine, send a GET request to [`/vmware/vm/{id}/snapshot`](#operation/querySnapshot).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/vm/$vm_id/snapshot"
    ```
    The Rubrik REST API server responds with a `ListResponse` object.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "date": "$timestamp0",
          "indexState": 0,
          "cloudState": 0,
          "vmName": "$vm_name",
          "replicationLocationIds": [],
          "id": "$snapshot_id0",
          "consistencyLevel": "$consistency_level0",
          "archivalLocationIds": [],
          "isOnDemandSnapshot": false
        },
        {
          "date": "$timestamp1",
          "indexState": 0,
          "cloudState": 0,
          "vmName": "$vm_name",
          "replicationLocationIds": [],
          "id": "$snapshot_id1",
          "consistencyLevel": "$consistency_level1",
          "archivalLocationIds": [],
          "isOnDemandSnapshot": true
        }
     ],
     "total": 2
    }
    ```
    Each member of the data array includes the `id` of a snapshot. Use this value (`$snapshot_id`) to perform tasks with the snapshot, such as:
    * Browsing for data in the snapshot
    * Downloading data from the snapshot
    * Restoring data from the snapshot
    * Exporting data from the snapshot
    * Mounting a virtual machine from the snapshot

    ### Retrieving snapshot details

    To retrieve details for a specified snapshot send a GET request to [`/vmware/vm/snapshot/{id}`](#operation/getSnapshot).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id"
    ```
    The Rubrik REST API server responds with the details of the specified snapshot.

    **Note:** To shorten the example, the response uses ellipsis to replace some members.

    ```bash
    {
      "date": "$timestamp",
      "indexState": 0,
      "virtualMachine": {
       ...
      },
      "vmName": "$vm_name",
      "isCorrupt": false,
      "replicationLocationIds": [],
      "archivalLocationIds": [],
      "snapshotDiskIds": [
        "$vmdk_id"
      ],
      "isOnDemandSnapshot": false,
      "cloudState": 0,
      "id": "$snapshot_id",
      "consistencyLevel": "1",
      "config": "[]"
    }
    ```

    ### Retrieving missed snapshot information

    The Rubrik cluster stores information for missed snapshots. *Missed snapshots* are snapshot tasks that are not completed as required by the rules and policies of an SLA Domain.  Retrieve missed snapshot information for a virtual machine by sending  a GET request to [`/vmware/vm/{id}/missed_snapshot`](#operation/missedSnapshots).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/vm/$vm_id/missed_snapshot"
    ```
    The Rubrik REST API server responds with a `ListResponse` object.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "archivalLocationType": [
            "missed"
          ],
          "missedSnapshotTime": "$timestamp0"
        },
        {
          "archivalLocationType": [
            "missed"
          ],
          "missedSnapshotTime": "$timestamp1"
        }
      ],
      "total": 2
    }
    ```

    ### Creating on-demand snapshots

    On-demand snapshots can be created for both protected and unprotected virtual machines. To create an on-demand snapshot of a virtual machine send a POST request to [`/vmware/vm/{id}/snapshot`](#operation/createOnDemandBackup).

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/vmware/vm/$vm_id/snapshot"
    ```
    The Rubrik REST API server initiates the asynchronous snapshot task and responds with a task object.

    ```bash
    {
      "id": "$request_id",
      "status": "ACQUIRING",
      "progress": 0,
      "startTime": "$timestamp",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vm/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```
    Using the information provided in the task object, send a GET request to poll the task status. When the value of `status` in the task object is `SUCCEEDED`, the on-demand snapshot finished successfully.


    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/vm/request/$request_id"
    ```
    The Rubrik REST API server sends a task object with `status="SUCCEEDED"`.  The task object for a successful snapshot includes the URI for the snapshot: `https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id`.

    ```bash
    {
      "id":"$request_id",
      "status":"SUCCEEDED",
      "startTime":"$timestamp0",
      "endTime":"$timestamp1",
      "links":[
        {
          "href":"https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id",
          "rel":"result"
        },
       {
          "href":"https://$cluster_address/api/v1/vmware/vm/request/$request_id",
          "rel":"self"
       }
      ]
    }
    ```

    ### Expiring individual snapshots

    On-demand snapshots and snapshots for unprotected virtual machines can be expired by using the snapshot `id`. To expire an individual snapshot, send a DELETE request to [`/vmware/vm/snapshot/{id}`](#operation/deleteVmwareSnapshot). Include the query parameter `location` to specify whether to expire all copies of the snapshot, or only the local copy. Use `location=local` to expire only the copy of the snapshot on the specified Rubrik cluster. Use `location=all` to expire all copies of the snapshot, including replicas and archival copies.

    ```bash
    curl -X DELETE \
      "https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id?location=$snapshot_location"
    ```
    The Rubrik REST API server expires the specified snapshot and responds with HTTP response code 204. This indicates the request succeeded and the response body is empty.

    The Rubrik REST API server responds with HTTP response code 422 'Unprocessable Entity', when the specified snapshot is not one of the following:
    * On-demand snapshot
    * Snapshot for an unprotected virtual machine

    ### Expiring all snapshots for a virtual machine

    All snapshots for an unprotected virtual machine can be expired by using the virtual machine `id`. To expire all snapshots for an unprotected virtual machine, send a DELETE request to [`/vmware/vm/{id}/snapshot`](#operation/deleteVmwareSnapshots). The Rubrik cluster expires all snapshots, replicas, and archival snapshots for the specified virtual machine.

    ```bash
    curl -X DELETE \
      "https://$cluster_address/api/v1/vmware/vm/$vm_id/snapshot"
    ```
    The Rubrik REST API server expires all snapshots for the specified virtual machine in all locations and responds with HTTP response code 204. This indicates the request succeeded and the response body is empty.

    The Rubrik REST API server responds with HTTP response code 422 'Unprocessable Entity', when the specified virtual machine is protected through an SLA Domain assignment.




    ## Data recovery
    To recover a file or folder from a snapshot, retrieve the `id` of the file or folder using either search or browse. Then use the `id` with one of the recovery methods:
    * Download the file or folder
    * Restore the file or folder to the source location
    * Export the file or folder to another host

    ### Searching for data in snapshots

    Search for files and folders across all indexed snapshots of a virtual machine by using the virtual machine `id`. Send a GET request to [`/vmware/vm/{id}/search`](#operation/searchVm) with the `path` query parameter. Use a path segment string or a name segment string for the value of `path`.

    **IMPORTANT:** The snapshot used in this task must be indexed. Indexing makes the file system structure of the data available to the Rubrik cluster. To determine whether a snapshot has been successfully indexed, send a GET request to [`/vmware/vm/snapshot/{id}`](#operation/getSnapshot) as described in the 'Retrieving snapshot information' section of [Snapshot management](#section/Virtual-machines/Snapshot-management). Look at the value of `indexState`. A value of `1` means the snapshot has been indexed. A value of `0` means the snapshot has not been indexed.

    The Rubrik REST API server uses the rules described in the following table when matching the value of `path` with folders and files in the indexed snapshots.
    | Type | Rule | Description |
    | ---- | ---- | ----------- |
    | Path delimiter | Forward slashes and backslashes are equally recognized as path delimiters. | In the value of path, `/` matches both `/` and `\`, and `\` matches both `/` and `\`. |
    | Path segments | Path segments match all files and folders that begin with the same path segment. | For example, '/abc/x' matches files and folders at '/abc/' or '\abc\\' with a filename or folder name that starts with 'x'. |
    | Name segments | Name segments match all files and folders that begin with the same name segment. | For example, 'xyz' matches files and folders with a filename or folder name that starts with 'xyz', in all path locations. |
    | Characters | Any character that the guest operating system accepts in a file path can be used.  | For example, the greater than symbol `>` and the lesser than symbol `<` are not allowed. |
    | Windows drive | To specify a full path on a Windows guest follow the Windows file system requirement. | For example, to specify the 'temp' folder on the 'D' drive of a Windows virtual machine, use: `D:\temp`. |

    **Example:** Searching for files and folders

    Search for all files and folders in '/usr/local/' with a name that starts with the later 'g'.

    Send a GET request to [`/vmware/vm/{id}/search`](#operation/searchVm) with `path=/usr/local/g`.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/vm/$vm_id/search?path=%2Fusr%2Flocal%2Fg"
    ```
    The Rubrik REST API server responds with a `ListResponse` object. The data array has two members, a directory at: `/usr/local/games` and a file at: `/usr/local/gamehints`.


    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "path": "/usr/local/games",
          "filename": "games",
          "fileVersions": [
            {
              "lastModified": "$timestamp0",
              "size": 4096,
              "snapshotId": "$snapshot_id0",
              "fileMode": "directory",
              "source": "cloud"
            }
          ]
        },
        {
        "path": "/usr/local/gamehints",
        "filename": "gamehints",
        "fileVersions": [
          {
            "lastModified": "$timestamp1",
            "size": 14480,
            "snapshotId": "$snapshot_id1",
            "fileMode": "file",
            "source": "cloud"
          },
          {
            "lastModified": "$timestamp2",
            "size": 14480,
            "snapshotId": "$snapshot_id2",
            "fileMode": "file",
            "source": "cloud"
          }
        ]
       }
      ],
      "total": 2
    }
    ```

    ### Browsing for data in snapshots

    Browse for files and folders with an indexed snapshot by using the snapshot `id`. Send a GET request to  [`/vmware/vm/snapshot/{id}/browse`](#operation/browseVmwareSnapshot) with the `path` query parameter.  Use a path segment string for the value of `path`. The response provides a ListResponse object that includes all of the files and folders in the directory that is specified by the value of `path`.

    **IMPORTANT:** The snapshot used in this task must be indexed. Indexing makes the file system structure of the data available to the Rubrik cluster. To determine whether a snapshot has been successfully indexed, send a GET request to [`/vmware/vm/snapshot/{id}`](#operation/getSnapshot) as described in the 'Retrieving snapshot information' section of [Snapshot management](#section/Virtual-machines/Snapshot-management). Look at the value of `indexState`. A value of `1` means the snapshot has been indexed. A value of `0` means the snapshot has not been indexed.

    The Rubrik REST API server uses the rules described in the following table when matching the value of `path` with the path in the specified snapshot.
    | Type | Rule | Description |
    | ---- | ---- | ----------- |
    | Path delimiter | Forward slashes and backslashes are equally recognized as path delimiters. | In the value of path, `/` matches both `/` and `\`, and `\` matches both `/` and `\`. |
    | Path description | The path description must end in a directory name, without an ending slash. | For example, '/abc/x' returns all files and folders in the directory at '/abc/x', but '/abc/x/' returns an HTTP 422 response. |
    | Characters | Any character that the guest operating system accepts in a file path can be used.  | For example, the greater than symbol `>` and the lesser than symbol `<` are not allowed. |
    | Windows drive | To specify a full path on a Windows guest follow the Windows file system requirement. | For example, to specify the 'temp' folder on the 'D' drive of a Windows virtual machine, use: `D:\temp`. |

    **Example:** Browsing for files and folders

    Retrieve a ListResponse object with all of the files and folders in '/home'.

    Send a GET request to  [`/vmware/vm/snapshot/{id}/browse`](#operation/browseVmwareSnapshot) with `path=/home`.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id/browse?path=%2Fhome&offset=0"
    ```
    The Rubrik REST API server responds with a `ListResponse` object. The data array has two members, the directory: `ubuntu` and the file: `ubuntu.tar`.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "filename": "ubuntu",
          "path": "ubuntu",
          "lastModified": "$timestamp0",
          "size": 31892819777,
          "fileMode": "directory",
          "statusMessage": ""
        },
        {
          "filename": "ubuntu.tar",
          "path": "ubuntu.tar",
          "lastModified": "$timestamp1",
          "size": 4746675383,
          "fileMode": "file",
          "statusMessage": ""
        }
      ],
      "total": 2
    }
    ```
    ### Downloading data from a snapshot

    Data can be retrieved from a snapshot by creating a download link for an individual file and folder from the snapshot. To have the Rubrik cluster create a download link, send a POST request to [`/vmware/vm/snapshot/{id}/download`](#operation/createDownloadFileJob). Include in the request body the string/value pair: `"path":"$path"`, where `$path` is the full path to the file or folder. When `$path` refers to a folder, the Rubrik cluster creates a ZIP file of the folder and all that it contains.

    The basic download work flow is:
    1. Send a POST request to start the asynchronous download task.
    2. Send a GET request to poll the task status.
    3. When the task succeeds, use the download link provided in the response body to retrieve the file or folder.

    **IMPORTANT:** The snapshot used in this task must be indexed. Indexing makes the file system structure of the data available to the Rubrik cluster. To determine whether a snapshot has been successfully indexed, send a GET request to [`/vmware/vm/snapshot/{id}`](#operation/getSnapshot) as described in the 'Retrieving snapshot information' section of [Snapshot management](#section/Virtual-machines/Snapshot-management). Look at the value of `indexState`. A value of `1` means the snapshot has been indexed. A value of `0` means the snapshot has not been indexed.

    ```bash
    curl -X POST -d \
    '{
       "path": "$full_source_path"
     }' \
     'https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id/download_file'
    ```
    The Rubrik REST API server initiates the asynchronous request task and responds with a task object.

    ```bash
    {
      "id": "$download_task_id",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$timestamp",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vcenter/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```

    ### Restoring data from a snapshot

    To restore a file or folder to the source virtual machine send a POST request to [`/vmware/vm/snapshot/{id}/restore_file`](#operation/createRestoreFileJob). With the request, include a request body. The following table describes the members of the request body.

    | Name | Description |
    | ---- | ----------- |
    | `path` | Full path of the file or folder. |
    | `domainName` | Authentication domain for the credentials being used to authenticate and authorize the action. |
    | `username` | Username of account to authenticate and authorize the action. |
    | `password` | Password for the account to authenticate and authorize the action. |
    | `restorePath` | Full path location for the restore of the file or folder. The action can create a directory at the end of the specified path, but cannot create directories that are specified within the path. |
    | `shouldSaveCredentials` | Instruct the Rubrik cluster to save the credentials included in the request. Use `true` to save the credentials and `false` to use the credentials only for the current request. |

    ```bash
    curl -X POST -d \
    '{
       "path": "$full_source_path",
       "domainName": "$auth_domain",
       "username": "$username",
       "password": "$password",
       "restorePath": "$full_restore_path",
       "shouldSaveCredentials": true
     }' \
     "https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id/restore_file"
    ```

    The Rubrik REST API server initiates the asynchronous request task and responds with a task object.

    ```bash
    {
      "id": "$restore_task_id",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$timestamp",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vcenter/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```


    ## Snapshot mount operations
    Snapshot mount operations include the following possible actions:
    * Retrieving a snapshot from an archival location
    * Mounting a snapshot by using Instant Recovery
    * Mounting a snapshot by using Live Mount
    * Exporting a snapshot
    * Changing the properties of a mounted virtual machine
    * Removing a virtual machine mount

    ### Retrieving a snapshot from an archival location

    To work with a snapshot that is stored only at an archival location, first download the snapshot to the Rubrik cluster by sending a POST request to [`/vmware/vm/snapshot/{id}/download`](#operation/createDownloadSnapshotFromCloud).

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id/download"
    ```
    The Rubrik REST API server initiates the asynchronous request task and responds with a task object.

    ```bash
    {
      "id": "$snap_download_task_id",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$timestamp",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vcenter/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```

    ### Mounting a snapshot by using Instant Recovery

    Replace a source virtual machine from a snapshot by using the Instant Recovery feature. To use Instant Recovery, send a POST request to [`/vmware/vm/snapshot/{id}/instant_recover`](#operation/createInstantRecovery). This request requires a snapshot `id` and can optionally include the parameters that are described in the following table.

    | Name | Description |
    | ---- | ----------- |
    | `hostId` | The `id` of an ESXi hypervisor. When not specified, the Rubrik cluster uses the original hypervisor. |
    | `vmName` | Assigns a specified name to the virtual machine. |
    | `removeNetworkDevices` | Determines whether the virtual machine has network devices. Use `true` to remove network devices from the virtual machine. Use `false` to keep the existing network devices. |

    ```bash
    curl -X POST -d \
      '{
        "vmName": "$vm_name",
        "hostId": "$esxi_id",
        "removeNetworkDevices": true
       }' \
       "https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id/instant_recover"
    ```
    The Rubrik REST API server initiates the asynchronous request task and responds with a task object.

    ```bash
    {
      "id": "$instant_recovery_task_id",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$timestamp",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vcenter/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```

    ### Mounting a snapshot by using Live Mount

    Mount a new virtual machine from a snapshot by using the Live Mount feature. To use Live Mount, send a POST request to [`/vmware/vm/snapshot/{id}/mount`](#operation/createMountV1). This request requires a snapshot `id` and can optionally include the parameters that are described in the following table.

    | Name | Description |
    | ---- | ----------- |
    | `hostId` | The `id` of an ESXi hypervisor. When not specified, the Rubrik cluster uses the original hypervisor. |
    | `vmName` | Assigns a specified name to the virtual machine. |
    | `dataStoreName` | Assigns a specified name for the data store that the Rubrik cluster creates for the Live Mount. |
    | `disableNetwork` | Determines whether the virtual machine has access to the network. Use `true` to Mount the snapshot with network access disabled. Use `false` to allow the virtual machine to access the network. |
    | `removeNetworkDevices` | Determines whether the virtual machine has network devices. Use `true` to remove network devices from the virtual machine. Use `false` to keep the existing network devices. |
    | `powerOn` | Determines whether the virtual machine is powered on after mounting. Use `true` to power on the virtual machine. Use `false` to leave the virtual machine powered off after mounting. |


    ```bash
    curl -X POST \
      -d '{
         "hostId": "$esxi_id",
         "vmName": "$vm_name",
         "dataStoreName": "$datastore_name",
         "disableNetwork": $network_state,
         "removeNetworkDevices": $network_devices_state,
         "powerOn": $power_state
       }'\
        "https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id/mount"
    ```

    The Rubrik REST API server initiates the asynchronous request task and responds with a task object.

    ```bash
    {
      "id": "$live_mount_task_id",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$timestamp",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vcenter/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```
    ### Retrieving the ID of the mount

    After a mount task successfully completes, the `id` of the mount object can be retrieved by sending a GET request to [`/vmware/vm/request/{id}`](#operation/getAsyncRequestStatus) and using the `$request_id` value from the original request object for the Live Mount.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/vmware/vm/request/$request_id"
    ```
    The Rubrik REST API server responds with a request object that includes the `id` of the mount object.

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vm/snapshot/mount/$mount_id",
          "rel": "result"
        },
        {
          "href": "https://$cluster_address/api/v1/vmware/vm/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "SUCCEEDED"
    }
    ```
    ### Retrieving active mounts

    To retrieve a list of all of the active mounts for a Rubrik cluster, send a GET request to [`/vmware/vm/snapshot/mount`](#operation/queryMountV1).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/vm/snapshot/mount"
    ```
    The Rubrik REST API server responds with a ListResponse object.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "id": "$mount_id",
          "snapshotDate": "$snapshot_timestamp",
          "vmId": "$source_vm_id",
          "mountedVmId": "$mounted_vm_id",
          "hostId": "$esxi_id",
          "isReady": true
        }
      ],
      "total": 1
    }
    ```
    ### Retrieving the details for a mount

    To retrieve details about a specific mount, send a GET request to [`/vmware/vm/snapshot/mount/{id}`](#operation/getMountV1).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/vmware/vm/snapshot/mount/$mount_id"
    ```
    The Rubrik REST API server responds with the details.

    ```bash
    {
      "snapshotDate": "$timestamp",
      "vmId": "$source_vm_id",
      "isReady": true,
      "hostId": "$esxi_id",
      "id": "$mount_id",
      "mountedVmId": "$mounted_vm_id"
    }
    ```

    ### Exporting a snapshot

    To export a snapshot send a POST request to [`/vmware/vm/snapshot/{id}/export`](#operation/createExport).  This request requires a snapshot `id` and the parameters that are described in the following table.

    | Name | Description |
    | ---- | ----------- |
    | `datastoreId` | The `id` of a datastore for the specified ESXi hypervisor. |
    | `vmName` | Assigns a specified name to the virtual machine. |
    | `hostId` | The `id` of an ESXi hypervisor. |
    | `disableNetwork` | Determines whether the virtual machine has access to the network. Use `true` to Mount the snapshot with network access disabled. Use `false` to allow the virtual machine to access the network. |
    | `removeNetworkDevices` | Determines whether the virtual machine has network devices. Use `true` to remove network devices from the virtual machine. Use `false` to keep the existing network devices. |
    | `powerOn` | Determines whether the virtual machine is powered on after mounting. Use `true` to power on the virtual machine. Use `false` to leave the virtual machine powered off after mounting. |
    | `unregisterVm` | Determines whether to add the exported virtual machine to the vCenter Server inventory. Use `true` to remove the exported virtual machine from the associated vCenter Server inventory. Use `false` to add the exported virtual machine to the associated vCenter Server inventory. |


    ```bash
    curl -X  -d \
     '{
       "datastoreId": "string",
       "vmName": "string",
       "hostId": "string",
       "disableNetwork": true,
       "removeNetworkDevices": true,
       "powerOn": true,
       "unregisterVm": true
     }' \
     "https://$cluster_address/api/v1/vmware/vm/snapshot/$snapshot_id/export"
    ```

    The Rubrik REST API server initiates the asynchronous request task and responds with a task object.

    ```bash
    {
      "id": "$export_task_id",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$timestamp",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vcenter/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```

    ### Changing power status of a mounted virtual machine

    To change the power status of a mounted virtual machine send a PATCH request to [`/vmware/vm/snapshot/mount/{id}`](#operation/updateMount). Include in the request body, the member `"powerStatus": $power_state`. For `$power_state`, use `true` to power on the virtual machine, or use `false` to power off the virtual machine.

    ```bash
    curl -X PATCH \
      -d '{
        "powerStatus": $power_state }' \
      "https://$cluster_address/api/v1/vmware/vm/snapshot/mount/$mount_id"
    ```

    The Rubrik REST API server responds with the mount details.

    ```bash
    {
      "powerStatus": "$power_state",
      "id": "$mount_id",
      "snapshotDate": "$timestamp",
      "vmId": "$vm_id",
      "mountedVmId": "$mounted_vm_id",
      "hostId": "$esxi_id",
      "isReady": true,
      "mountRequestId": "$mount_request_id",
      "unmountRequestId": "$unmount_request_id"
    }
    ```

    ### Removing a virtual machine mount

    To remove a Live Mount send a DELETE request to [`/vmware/vm/snapshot/mount/{id}`](#operation/createUnmount). To remove a mount object after live migration of the virtual machine include the query parameter `force=true`.

    ```bash
    curl -X DELETE \
      "https://$cluster_address/api/v1/vmware/vm/snapshot/mount/$mount_id"
    ```
    The Rubrik REST API server initiates the asynchronous request task and responds with a task object.

    ```bash
    {
      "id": "$delete_mount_task_id",
      "status": "QUEUED",
      "progress": 0,
      "startTime": "$timestamp",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/vmware/vcenter/request/$request_id",
          "rel": "self"
        }
      ]
    }
    ```


    # Hosts

    Rubrik clusters can protect file system data and application data through direct interaction with a host operating system. This method of protection does not require a virtual environment API. Instead, the Rubrik cluster works with the Rubrik Backup Service software that is running on supported Linux hosts and Windows hosts.

    In some situations, the Rubrik cluster can directly interact with hosts without the Rubrik Backup Service, for example when providing protection of data on a network share.

    ## Rubrik Backup Service

    The Rubrik Backup Service software must be installed on a host to enable file system level protection and direct protection of supported applications. The Rubrik Backup Service software is signed by a specific Rubrik cluster and can only be used with that Rubrik cluster.

    The following URLs provide access to the Rubrik Backup Service software on a Rubrik cluster:
    * Linux: https://$cluster_address/connector/rubrik-agent.x86_64.rpm
    * Windows: https://$cluster_address/connector/RubrikBackupService.zip

    **IMPORTANT:** The Rubrik User Guide describes how to install the Rubrik Backup Service software, and lists the permissions and settings that are required to allow the Rubrik Backup Service to provide support for specific operating systems, applications, and clusters.

    ## Registering a host
    After installing the Rubrik Backup Service on a host, register the host with the Rubrik cluster. Registering initiates secure communication between the Rubrik cluster and the Rubrik Backup Service on the host. After a host is registered, the Rubrik Backup Service on the host sends detailed information about the host to the Rubrik cluster.

    The Rubrik Backup Service scans a registered host for protectable objects, such as: applications, databases, and Windows clusters. The Rubrik Backup Service sends the results of the scan to the Rubrik cluster.

    To register a host, send a POST request to [`/host`](#operation/registerHost) and include `hostname: $hostname`. The `$hostname` value must be the IPv4 address of the host or the resolvable hostname of the host.

    ```bash
    curl -X POST \
      -d '{
        "hostname": "$hostname" }' \
      "https://$cluster_address/api/v1/host"
    ```
    The Rubrik REST API server responds with the details for the host, including the connection status.

    ```bash
    {
      "id": "$host_id",
      "hostname": "$hostname",
      "primaryClusterId": "$cluster_id",
      "agentId": "$agent_id",
      "operatingSystem": "$os_version",
      "operatingSystemType": "$os_type",
      "status": "Connected",
      "compressionEnabled": false
    }
    ```

    ## Retrieving host information

    To retrieve a current list of the hosts that are registered with a Rubrik cluster, send a GET request to [`/host`](#operation/queryHost).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/host"
    ```

    The Rubrik REST API server responds with a ListResponse object that contains the first page of the current list.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "id": "$host_id0",
          "hostname": "$hostname0",
          "primaryClusterId": "$cluster_id",
          "operatingSystem": "$os_version0",
          "operatingSystemType": "$os_type0",
          "status": "Connected"
        },
        {
          "id": "$host_id1",
          "hostname": "$hostname1",
          "primaryClusterId": "$cluster_id",
          "operatingSystem": "$os_version1",
          "operatingSystemType": "$os_type1",
          "status": "Connected"
        }
      ],
      "total": 2
    }
    ```
    Depending on the number of registered hosts, the complete list of registered hosts may not be included on the first page. [Working with lists](#section/Overview/Working-with-lists) describes how to work with a ListResponse object to obtain additional pages of the list.


    To retrieve the details for a specified host, send a GET request to [`/host/{id}`](#operation/getHost).

    Adding a host will cause Rubrik to communicate with the remote Rubrik agent and get detailed information about the host.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/host/$host_id0"
    ```
    The Rubrik REST API server responds with the details of the specified host.

    ```bash
      {
        "id": "$host_id0",
        "hostname": "$hostname0",
        "primaryClusterId": "$cluster_id",
        "agentId": "$agent_id",
        "operatingSystem": "$os_version0",
        "operatingSystemType": "$os_type0",
        "status": "Connected",
        "compressionEnabled": false
      }
    ```

    ## Adding a host without the Rubrik Backup Service

    A host without the Rubrik Backup Service can be added by setting the `hasAgent` flag to `false`. This can be used to register a host that will be accessed through network shares.

    ```bash
    curl -X POST \
      -d '{ \
        "hostname": "$hostname",
        "hasAgent": "false" }' \
      "https://$cluster_address/api/v1/host"
    ```

    ## Modifying a registered host

    To change the FQDN or IPv4 address that the Rubrik cluster uses to connect with a registered host, send a PATCH request to [`/host`](#operation/updateHost). Use the value of `hostname` to specify the new FQDN or IPv4 address of the host. Optionally, also use this PATCH request to specify whether to compress the data that is transmitted to and from the host. Set the value of `compressionEnabled` to `true` to enable compression or set the value to `false` to turn compression off.


    ```bash
    curl -X POST \
      -d '{
        "hostname": "$hostname",
        "compressionEnabled": true }' \
      "https://$cluster_address/api/v1/host/$host_id"
    ```

    The Rubrik REST API server responds with a confirmation of the new details of the registered host.

    ```bash
     {
      "id": "$host_id",
      "hostname": "$hostname",
      "primaryClusterId": "$cluster_id",
      "agentId": "$agent_id",
      "operatingSystem": "$os_version",
      "operatingSystemType": "$os_type",
      "status": "Connected",
      "compressionEnabled": true
     }
    ```
    ## Removing a host

    Remove a host from the Rubrik cluster when the host no longer requires protection. The Rubrik cluster moves all of the unexpired backups for the host filesets of the host to Unmanaged Objects.

    To remove a host send a DELETE request to [`/host/{id}`](#operation/deleteHost).

    ```bash
    curl -X DELETE \
      "https://$cluster_address/api/v1/host/$host_id"
    ```

    The Rubrik REST API server responds with HTTP response code 204. This indicates the request succeeded and the response body is empty.

    ## Refreshing a Host

    Refresh a host when changes made on the host do not appear in the
    Rubrik web UI. The refresh requests updated information from the
    Rubrik Backup Service that is running on the host.

    To refresh a host send a POST request to
    [`/host/{id}/refresh`](#operation/refreshHost)

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/host/$host_id/refresh"
    ```

    The Rubrik REST API server responds with HTTP response code 200 and
    includes the updated properties of the host object in the response body.


    ## Windows Server Failover Clustering nodes

    To begin working with Windows Server Failover Clustering (WSFC) clusters, register each WSFC node with the Rubrik cluster as described in [`Registering a host`](#section/Hosts/Registering-a-host). The scan performed by the Rubrik Backup Service on each WSFC node detects the WSFC cluster and provides information about the WSFC cluster to the Rubrik cluster.

    To view WSFC cluster information, send a GET request to [`/windows_cluster`](#operation/queryWindowsCluster).

    **Note:** The variable `$cluster_address` refers to the FQDN or IPv4 address of the Rubrik cluster.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/windows_cluster"
    ```
    The Rubrik REST API server responds with a ListResponse object that contains the first page of the list of WSFC clusters.

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "id": "$wsfc_id",
          "name": "$wsfc_name",
          "fqdn": "$wsfc_fqdn",
          "hostIds": [
            "$wsfc_node_id0",
            "$wsfc_node_id1"
          ],
          "primaryClusterId": "$cluster_id"
        }
      ],
      "total": 1
    }
    ```

    To retrieve detailed information about a WSFC cluster, send a GET request to: [`/windows_cluster/{id}`](#operation/getWindowsCluster), where `$cluster_id` is the `id` of the WSFC cluster.


    ```bash
    curl -X GET "https://$cluster_address/api/v1/windows_cluster/$cluster_id"
    ```

    The Rubrik REST API server responds with the details for the specified WSFC cluster.

    ```bash
    {
      "name": "$wsfc_name",
      "id": "$wsfc_id",
      "naturalId": "$cluster_natural_id",
      "hostIds": [
      "$wsfc_node_id0",
      "$wsfc_node_id1"
      ],
      "fqdn": "$wsfc_fqdn",
      "primaryClusterId": "$cluster_id"
    }
    ```

    # Filesets

    A fileset defines a set of files and folders on a Linux host or on a Windows host. The Rubrik cluster uses the filesets that are assigned to a host to determine the data to protect on that host.

    The Rubrik cluster interprets a fileset based on the values provided in the
    Include, Exclude, and Do Not Exclude arrays. The Rubrik cluster applies a
    set of rules to the values provided in these arrays and permits several
    types of values to be added to the arrays. The Do Not Exclude array specifies objects that should not be excluded from the fileset by the values in the Exclude array.

    ## Fileset workflow
    The basic workflow to follow when using filesets to protect data in host file systems is:
    1. Obtain and install the Rubrik Backup Service software on the host.  
    The Rubrik user guide describes this task.
    2. Add the host to the Rubrik cluster.  
    The [Hosts](#section/Hosts) section describes this task.
    3. Create a fileset template that defines a set of file system data to protect.  
    The [Fileset templates](#section/Filesets/fileset_templates) section describes this task.
    4. Use a fileset template to assign a fileset to a host.
    5. Assign the host fileset to an SLA Domain.

    ## Fileset templates

    To get the current list of hosts we GET on the [`/fileset_template`](#operation/queryFilesetTemplate) endpoint.

    ```bash
    curl -X POST \
      -d '{
        "hostname": "$hostname" }' \
      "https://$cluster_address/api/v1/host"
    ```

    ```bash
    {
      "id": "$host_id",
      "hostname": "$hostname",
      "status": "Connected"
    }
    ```

    To get the current further details of hosts we GET on the [`/fileset_template/{id}`](#operation/getFilesetTemplate) endpoint.

    ```bash
    curl -X POST \
      -d '{
        "hostname": "$hostname" }' \
      "https://$cluster_address/api/v1/host"
    ```

    ```bash
    {
      "id": "$host_id",
      "hostname": "$hostname",
      "status": "Connected"
    }
    ```

    First create a fileset template.
    A fileset template can be used to create fileset instances for various hosts.
    Performing a POST on [`/fileset_template`](#operation/createFilesetTemplate)  with the necessary details will create a fileset template.

    ```bash
    curl -X POST \
      -d '{
        "name": "Users",
        "includes": ["C:\\Users"],
        "operatingSystemType": "Windows"}' \
      "https://$cluster_address/api/v1/fileset_template"
    ```

    ```bash
    {
      "id": "$fileset_template_id",
      "name": "Users",
      "excludes": [],
      "operatingSystemType": "Windows",
      "includes": [
        "C:\\Users"
      ]
    }
    ```

    Modify with PATCH on the [`/fileset_template/{id}`](#operation/updateFilesetTemplate) endpoint.

    ```bash
    curl -X POST \
      -d '{
        "hostname": "$hostname" }' \
      "https://$cluster_address/api/v1/host"
    ```

    ```bash
    {
      "id": "$host_id",
      "hostname": "$hostname",
      "status": "Connected"
    }
    ```

    Delete with n the [`/fileset_template/{id}`](#operation/deleteFilesetTemplate) endpoint.

    ```bash
    curl -X DELETE \
      -d '{
        "hostname": "$hostname" }' \
      "https://$cluster_address/api/v1/host"
    ```
    ## Fileset

    Using a fileset template, a fileset can be created.
    The fileset is an instance of the template that is assigned to a specific host.

    To get the current list of hosts we GET on the [`/fileset`](#operation/queryFileset) endpoint.

    ```bash
    curl -X POST \
      -d '{
        "hostname": "$hostname" }' \
      "https://$cluster_address/api/v1/host"
    ```

    ```bash
    {
      "id": "$host_id",
      "hostname": "$hostname",
      "status": "Connected"
    }
    ```

    To get the current further details of hosts we GET on the [`/fileset/{id}`](#operation/getFileset) endpoint.

    ```bash
    curl -X POST \
      -d '{
        "hostname": "$hostname" }' \
      "https://$cluster_address/api/v1/host"
    ```

    ```bash
    {
      "id": "$host_id",
      "hostname": "$hostname",
      "status": "Connected"
    }
    ```

    A fileset can be created with a POST on [`/fileset`](#operation/createFileset).

    ```bash
    curl -X POST \
      -d '{
        "templateId": "$fileset_template_id",
        "hostId": "$host_id" }' \
      "https://$cluster_address/api/v1/fileset"
    ```

    ```bash
    {
      "id": "$fileset_id",
      "excludes": [],
      "operatingSystemType": "Windows",
      "includes": [
        "C:\\Users"
      ],
      "hostId": "$host_id",
      "templateId": "$fileset_template_id",
      "configuredSlaDomainId": "UNPROTECTED"
    }
    ```

    A fileset can be deleted with a DELETE on [`/fileset`](#operation/deleteFileset).

    ```bash
    curl -X POST \
      -d '{
        "templateId": "fileset_template_id",
        "hostId": "$host_id" }' \
      "https://$cluster_address/api/v1/fileset"
    ```

    ```bash
    {
      "id": "$fileset_id",
      "excludes": [],
      "operatingSystemType": "Windows",
      "includes": [
        "C:\\Users"
      ],
      "hostId": "$host_id",
      "templateId": "$fileset_template_id",
      "configuredSlaDomainId": "UNPROTECTED"
    }
    ```
    ## On demand backups of host filesets

    To create an on-demand snapshot POST on [`/fileset/{id}/snapshot`](#operation/createFilesetBackupJob).

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/fileset/$fileset_id/snapshot"
    ```

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/fileset/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "QUEUED"
    }
    ```

    Once the snapshot has been taken you should be able to retrieve the `$snapshot_id` by querying [`/fileset/request`](#operation/getFilesetAsyncRequestStatus).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/fileset/request/$request_id"
    ```

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/fileset/snapshot/$snapshot_id",
          "rel": "result"
        },
        {
          "href": "https://$cluster_address/api/v1/fileset/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "SUCCEEDED"
    }
    ```


    Once the snapshot has been taken you should be able to retrieve the `$snapshot_id` from the request.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/fileset/request/$request_id"
    ```

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/fileset/snapshot/$snapshot_id",
          "rel": "result"
        },
        {
          "href": "https://$cluster_address/api/v1/fileset/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "SUCCEEDED"
    }
    ```

    For more information about a specific snapshot, send a GET request to
    the [`/fileset/snapshot/{id}`](#operation/getFilesetSnapshot) endpoint.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/fileset/snapshot/$snapshot_id"
    ```

    ```bash
    {
      "id": "$snapshot_id"
      "date": <timestamp1>,
      "expirationDate": <timestamp2>,
      "sourceObjectType": "Fileset",
      "isOnDemandSnapshot": true,
      "cloudState": 2,
      "consistencyLevel": "none",
      "indexState": 1,
      "replicationLocationIds": [
        "$replication_location_id"
      ],
      "archivalLocationIds": [
        "$archival_location_id"
      ],
      "slaId": "$sla_id",
      "slaName": "sla",
      "filesetName": "fileset",
      "fileCount": 10,
      "lastModified": <timestamp3>,
      "size": 533120
    }
    ```

    To delete a specific snapshot, send a DELETE request to the
    [`/fileset/snapshot/{id}`](#operation/deleteFilesetSnapshot) endpoint,
    where `{id}` is the ID of the snapshot.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/fileset/snapshot/$snapshot_id"
    ```

    ```bash
    {
    }
    ```

    Delete all snapshots for a specific vm with a DELETE on [`/fileset/{id}/snapshot`](#operation/deleteFilesetSnapshots).

    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/fileset/$vm_id/snapshot"
    ```
    ## SLA Domain protection of host filesets

    Assign a fileset to an SLA with a PATCH [`/fileset/{id}`](#operation/updateFileset).

    ```bash
    curl -X PATCH \
      -d '{ 
        "configuredSlaDomainId": "$sla_domain_id" }' \
      "https://$cluster_address/api/v1/fileset/$fileset_id"
    ```

    ```bash
    {
      "id": "$fileset_id",
      "excludes": [],
      "operatingSystemType": "Windows",
      "includes": [
        "C:\\Users"
      ],
      "hostId": "$host_id",
      "templateId": "$fileset_template_id",
      "configuredSlaDomainId": "$sla_domain_id"
    }
    ```

    Missed snapshot with a GET on [`/fileset/{id}/missed_snapshot`](#operation/getMissedFilesetSnapshots).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/fileset/$vm_id/missed_snapshot"
    ```

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "missedSnapshotTime": "2000-01-02T11:08:40.420Z"
        }
      ],
      "total": 1
    }
    ```

    ## Search & Recovery

    Once snapshots have been taken, they can be used to search for files and recover.

    A host-level file search can be performed with a GET on [`/host/{id}/search`](#operation/searchHost).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/host/$host_id/search?path=home"
    ```

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "path": "/home",
          "filename": "home",
          "fileVersions": [
            {
              "snapshotId": "$snapshot_id",
              "lastModified": "2014-07-17T02:02:54+0000",
              "size": 533120
            }
          ]
        }
      ],
      "total": 1
    }
    ```

    File search can be performed on a specific fileset using its `$fileset_id` with a GET on [`/fileset/{id}/search`](#operation/searchFileset) and specifying the file path with the `path` query parameter.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/fileset/$fileset_id/search?path=home"
    ```

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "path": "/home",
          "filename": "home",
          "fileVersions": [
            {
              "snapshotId": "$snapshot_id",
              "lastModified": "2014-07-17T02:02:54+0000",
              "size": 533120
            }
          ]
        }
      ],
      "total": 1
    }
    ```

    Given the snapshot one can browse files within the snapshot with GET on [`/fileset/snapshot/{id}/browse`](#operation/browseFilesetSnapshot).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/fileset/snapshot/$snapshot_id/browse?path=%2Fhome&offset=0"
    ```

    ```bash
    {
      "hasMore": false,
      "data": [
        {
          "filename": "ubuntu",
          "path": "ubuntu",
          "lastModified": "2016-12-01T23:26:59+0000",
          "size": 529024,
        }
      ],
      "total": 1
    }
    ```

    To retrieve files from the snapshot we can either download the entire snapshot or just individual files.
    A entire snapshot can be downloaded with POST on [`/fileset/snapshot/{id}/download`](#operation/createDownloadFilesetSnapshotFromCloud).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/fileset/snapshot/$snapshot_id"
    ```

    Also individual files can be downloaded with POST on [`/fileset/snapshot/{id}/download`](#operation/createFilesetDownloadFileJob).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/fileset/snapshot/$snapshot_id/download_file"
    ```

    Both [`/fileset/snapshot/{id}/download`](#operation/createDownloadFilesetSnapshotFromCloud) and [`/fileset/snapshot/{id}/download`](#operation/createFilesetDownloadFileJob) return an async request that can be polled to retrieve the eventual download location.

    ```bash
    curl -X GET "https://$cluster_address/api/v1/fileset/request/$request_id"
    ```

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "$download_url",
          "rel": "result"
        },
        {
          "href": "https://$cluster_address/api/v1/fileset/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "QUEUED"
    }
    ```

    Files from a snapshot can also be restored to a host with POST on [`/fileset/snapshot/{id}/restore_file`](#operation/createFilesetRestoreFileJob).

    ```bash
    curl -X POST -d \
      '{
        "sourceDir": "/foo.txt",
        "destinationDir": "/bar.txt"
      }' \
      "https://$cluster_address/api/v1/fileset/snapshot/$snapshot_id/download_file"
    ```

    Files can also be restored to a different host with POST on [`/fileset/snapshot/{id}/export_file`](#operation/createFilesetExportFileJob).

    ```bash
    curl -X POST -d \
      '{
        "sourceDir": "/foo.txt",
        "destinationDir": "/bar.txt",
        "hostId": "$host_id"
      }' \
      "https://$cluster_address/api/v1/fileset/snapshot/$snapshot_id/download_file"
    ```

    # SQL Server databases

    Version 3.0 added support for Microsoft SQL backups.
    First add the hosts hosting the Microsoft SQL databases as specified in the [host protection](#section/Hosts) section.
    Once the host has been added, instances and databases will be auto-discovered.

    ## Instances

    Microsoft SQL instances can be found by a GET on [`/mssql/instance`](#operation/queryMssqlInstance)

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/instance"
    ```

    ```bash
    {
      "data": [
        {
          "id": "$instance_id",
          "name": "$instance_name",
          "configuredSlaDomainId": "INHERIT",
          "configuredSlaDomainName": "Inherit",
          "effectiveSlaDomainId": "INHERIT",
          "effectiveSlaDomainName": "Inherit"
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    Further details are acquired from [`/mssql/instance/{id}`](#operation/getMssqlInstance).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/instance/$instance_id"
    ```

    ```bash
    {
      "data": [
        {
          "id": "$instance_id",
          "name": "$instance_name",
          "configuredSlaDomainId": "INHERIT",
          "configuredSlaDomainName": "Inherit",
          "effectiveSlaDomainId": "UNPROTECTED",
          "effectiveSlaDomainName": "Unprotected"
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    The Rubrik cluster auto-detects most fields of the Microsoft SQL instance. However, certain fields such as the `clusterInstanceAddress` can be overridden with a PATCH to [`/mssql/instance/{id}`](#operation/updateMssqlInstance).

    ```bash
    curl -X PATCH \
      -d '{
        "clusterInstanceAddress": "1.1.1.1"
      }' \
      "https://$cluster_address/api/v1/mssql/instance/$instance_id"
    ```

    ```bash
    {
      "data": [
        '{
          "id": "$instance_id",
          "name": "$instance_name",
          "configuredSlaDomainId": "INHERIT",
          "configuredSlaDomainName": "Inherit",
          "effectiveSlaDomainId": "UNPROTECTED",
          "effectiveSlaDomainName": "Unprotected",
          "clusterInstanceAddress": "1.1.1.1"
      }' \
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    ## Databases

    All Microsoft SQL databases on an instance can be found with a GET on [`/mssql/db`](#operation/queryMssqlDb).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/db?instance_id=$instance_id"
    ```

    ```bash
    {
      "data": [
        {
          "id": "$db_id",
          "name": "$db_name",
          "configuredSlaDomainId": "INHERIT",
          "configuredSlaDomainName": "Inherit",
          "effectiveSlaDomainId": "UNPROTECTED",
          "effectiveSlaDomainName": "Unprotected",
          "instanceId": "$instance_id"
          "instanceName": "$instance_name"
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    Further details are acquired from [`/mssql/db/{id}`](#operation/getMssqlDb).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/db/$db_id"
    ```

    ```bash
    {
      "data": [
        {
          "id": "$db_id",
          "name": "$db_name",
          "configuredSlaDomainId": "INHERIT",
          "configuredSlaDomainName": "Inherit",
          "effectiveSlaDomainId": "UNPROTECTED",
          "effectiveSlaDomainName": "Unprotected",
          "instanceId": "$instance_id"
          "instanceName": "$instance_name"
        }
      ],
      "hasMore": false,
      "total": 1
    }
    ```

    ## Protection

    To create an on-demand snapshot, POST on [`/mssql/db/{id}/snapshot`](#operation/createOnDemandMssqlBackup).

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/mssql/db/$db_id/snapshot"
    ```

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/mssql/db/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "QUEUED"
    }
    ```

    Once the snapshot has been taken, the `$snapshot_id` can be retrieved from the request with [`/mssql/request/{id}`](#operation/getMssqlAsyncRequestStatus).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/mssql/request/$request_id"
    ```

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/mssql/db/snapshot/$snapshot_id",
          "rel": "result"
        },
        {
          "href": "https://$cluster_address/api/v1/mssql/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "SUCCEEDED"
    }
    ```

    The `$snapshot_id` can be used to extract further information on the snapshot with a GET on [`/mssql/db/snapshot/{id}`](#operation/getMssqlDbSnapshot).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/mssql/db/snapshot/$snapshot_id"
    ```

    ```bash
    {
      "id": "$snapshot_id",
      "date": "2017-02-02T18:53:12.718Z",
      "isOnDemandSnapshot": true
    }
    ```

    To create an on-demand log backup, POST on [`/mssql/db/{id}/log_backup`](#operation/createOnDemandMssqlLogBackup).

    ```bash
    curl -X POST \
      "https://$cluster_address/api/v1/mssql/db/$db_id/log_backup"
    ```

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/mssql/db/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "QUEUED"
    }
    ```

    To protect a specific database under an SLA, perform a PATCH on [`/mssql/db/{id}`](#operation/updateMssqlDb)

    ```bash
    curl -X PATCH \
      -d '{
        "configuredSlaDomainId": "$sla_domain_id" }' \
      "https://$cluster_address/api/v1/mssql/db/$db_id"
    ```

    ```bash
    {
      "id": "$db_id",
      "name": "$db_name",
      "configuredSlaDomainId": "$sla_domain_id",
      "configuredSlaDomainName": "$sla_domain_name",
      "effectiveSlaDomainId": "$sla_domain_id",
      "effectiveSlaDomainName": "sla_domain_name",
      "instanceId": "$instance_id"
      "instanceName": "$instance_name"
    }
    ```

    List all snapshots for a database with a GET on [`/mssql/db/{id}/snapshot`](#operation/queryMssqlDbSnapshot).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/mssql/db/$db_id/snapshot"
    ```

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "id": "$snapshot_id",
          "date": "2017-02-02T18:53:12.718Z",
          "isOnDemandSnapshot": true
        }
      ],
      "total": 1
    }
    ```

    Point-in-time recovery is supported when log backups are taken. The range of recoverable times can be listed with a GET on [`/mssql/db/{id}/recoverable_range`](#operation/getMssqlDbRecoverableRanges).

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/mssql/db/$db_id/recoverable_range"
    ```

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "beginTime": "2017-02-02T18:53:12.694Z",
          "endTime": "2017-02-02T20:53:12.694Z"
        }
      ],
      "total": 1
    }
    ```

    A 'missed snapshot' occurs when a snapshot that is required by SLA Domain policy cannot be created.
    To retrieve information about missed snapshots, send a GET request to the [`/mssql/db/{id}/missed_snapshot`](#operation/getMissedMssqlDbSnapshots) endpoint.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/mssql/db/$db_id/missed_snapshot"
    ```

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "missedSnapshotTime": "2000-01-02T11:08:40.420Z"
        }
      ],
      "total": 1
    }
    ```

    To retrieve the recoverable time ranges that were missed for a specified database, send a GET request to the [`/mssql/db/{id}/missed_recoverable_range`](#operation/getMssqlDbMissedRecoverableRanges) endpoint.

    ```bash
    curl -X GET \
      "https://$cluster_address/api/v1/mssql/db/$db_id/missed_recoverable_range"
    ```

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "beginTime": "2017-02-02T18:53:12.694Z",
          "endTime": "2017-02-02T20:53:12.694Z"
        }
      ],
      "total": 1
    }
    ```

    Delete all snapshots for a specific database with a DELETE on [`/mssql/db/{id}/snapshot`](#operation/deleteMssqlDbSnapshots).

    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/mssql/db/$db_id/snapshot"
    ```

    ## Restore

    Perform a restore with a POST on [`/mssql/db/{id}/restore`](#operation/createRestoreMssqlDb) specifying the timestamp as the recovery point.

    ```bash
    curl -X POST -d \
      '{
        "recoveryPoint": {
          "timestampMs": 12345
        }
      }' \
      "https://$cluster_address/api/v1/mssql/db/$db_id/restore"
    ```

    A database can also be exported to another instance with a POST on [`/mssql/db/{id}/export`](#operation/createExportMssqlDb).

    ```bash
    curl -X POST -d \
      '{
        "recoveryPoint": {
          "timestampMs": 12345
        },
        "targetInstanceId": "$instance_id",
        "targetDatabaseName": "$db_name"
      }' \
      "https://$cluster_address/api/v1/mssql/db/$db_id/export"
    ```

    ## Live Mount

    Perform a Live Mount with a POST on [`/mssql/db/{id}/mount`](#operation/createMssqlMount), specifying the timestamp as the recovery point.

    ```bash
    curl -X POST -d \
      '{
        "recoveryPoint": {
          "timestampMs": 12345
        },
        "mountedDatabaseName": "$db_name"
      }' \
      "https://$cluster_address/api/v1/mssql/db/$db_id/mount"
    ```

    All current Live Mounts can be found with a GET on [`/mssql/db/mount`](#operation/queryMssqlMount).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/db/mount"
    ```

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "id": "$mount_id",
          "sourceDatabaseId": "$source_db_id",
          "sourceRecoveryPoint": {
            "timestampMs": 12345
          },
          "targetInstanceId": "$target_instance_id",
          "creationDate": "2017-02-02T18:53:12.694Z",
          "isReady": true,
          "mountedDatabaseId": "$mounted_db_id"
        }
      ],
      "total": 1
    }
    ```

    Further details for a single Live Mount are acquired from [`/mssql/db/mount/{id}`](#operation/getMssqlMount).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/db/mount/$mount_id"
    ```

    ```bash
    {
      "id": "$mount_id",
      "sourceDatabaseId": "$source_db_id",
      "sourceRecoveryPoint": {
        "timestampMs": 12345
      },
      "targetInstanceId": "$target_instance_id",
      "creationDate": "2017-02-02T18:53:12.694Z",
      "isReady": true,
      "mountedDatabaseId": "$mounted_db_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/mssql/db/$source_db_id",
          "rel": "sourceDatabase"
        },
        {
          "href": "https://$cluster_address/api/v1/mssql/instance/$target_instance_id",
          "rel": "targetInstance"
        },
        {
          "href": "https://$cluster_address/api/v1/mssql/db/$mounted_db_id",
          "rel": "mountedDatabase"
        }
      ],
    }
    ```

    Delete a Live Mount with a DELETE on [`/mssql/db/mount/{id}`](#operation/createMssqlUnmount).

    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/mssql/db/mount/$mount_id"
    ```

    ## Log Shipping

    Create a Log Shipping Configuration with a POST on [`/mssql/db/{id}/log_shipping`](#operation/createLogShippingConfiguration).

    ```bash
    curl -X POST -d \
      '{
        "config": {
          "targetInstanceId": "$target_instance_id",
          "targetDatabaseName": "$db_name",
          "state": "$state"
        }
      }' \
      "https://$cluster_address/api/v1/mssql/db/{id}/log_shipping"
    ```

    All current Log Shipping Configurations can be found with a GET on [`/mssql/db/log_shipping`](#operation/queryLogShippingConfigurations).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/db/log_shipping"
    ```

    ```bash
    {
      "hasMore": true,
      "data": [
        {
          "id": "$log_shipping_id",
          "lastAppliedPoint": "2017-02-02T18:53:12.694Z",
          "location": "$host_name/$instance_name",
          "primaryDatabaseId": "$primary_db_id",
          "primaryDatabaseName": "$primary_database_name",
          "secondaryDatabaseName": "$secondary_database_name",
          "secondaryDatabaseId": "$secondary_database_id",
          "state": "$state",
          "status": "OK"
        }
      ],
      "total": 1
    }
    ```

    Further details for a single Log Shipping configuration are acquired from [`/mssql/db/log_shipping/{id}`](#operation/getLogShippingConfiguration).

    ```bash
    curl -X GET "https://$cluster_address/api/v1/mssql/db/log_shipping/{id}"
    ```

    ```bash
    {
      "id": "$log_shipping_id",
      "lastAppliedPoint": "2017-02-02T18:53:12.694Z",
      "location": "$host_name/$instance_name",
      "primaryDatabaseId": "$primary_db_id",
      "primaryDatabaseName": "$primary_database_name",
      "secondaryDatabaseName": "$secondary_database_name",
      "secondaryDatabaseId": "$secondary_database_id",
      "state": "$state",
      "status": "OK"
      "links": [
        {
          "href": "https://$cluster_address/api/v1/mssql/db/$primary_db_id",
          "rel": "primaryDatabase"
        },
        {
          "href": "https://$cluster_address/api/v1/mssql/instance/$secondary_instance_id",
          "rel": "secondaryInstance"
        },
        {
          "href": "https://$cluster_address/api/v1/mssql/db/$secondary_db_id",
          "rel": "secondaryDatabase"
        }
      ],
    }
    ```

    Update a Log Shipping Configuration with a PATCH on [`/mssql/db/log_shipping/{id}`](#operation/updateLogShippingConfiguration).

    ```bash
    curl -X PATCH -d \
      '{
        "config": {
          "state": "$state"
        }
      }' \
      "https://$cluster_address/api/v1/mssql/db/log_shipping/$id"
    ```

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/mssql/db/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "QUEUED"
    }
    ```

    Delete a Log Shipping Configuration with a DELETE on [`/mssql/db/log_shipping/{id}`](#operation/deleteLogShippingConfiguration).

    ```bash
    curl -X DELETE "https://$cluster_address/api/v1/mssql/db/log_shipping/$id?delete_secondary_database=true"
    ```

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/mssql/db/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "QUEUED"
    }
    ```

    Reseed a Log Shipping Configuration with a POST on [`/mssql/db/log_shipping/{id}/reseed`](#operation/reseedSecondary)

    ```bash
    curl -X POST -d \
      '{
        "config": {
          "state": "$state"
        }
      }' \
      "https://$cluster_address/api/v1/mssql/db/log_shipping/$id/reseed"
    ```

    ```bash
    {
      "id": "$request_id",
      "links": [
        {
          "href": "https://$cluster_address/api/v1/mssql/db/request/$request_id",
          "rel": "self"
        }
      ],
      "status": "QUEUED"
    }
    ```

    # Legal

    ## Copyright

    Rubrik REST API - Copyright © 2017 Rubrik Inc.
    All rights reserved.

    This documentation may be used free of charge. Selling without prior written consent is prohibited.
    Obtain permission before redistributing. In all cases, this copyright notice and disclaimer must remain
    intact.


    ## Disclaimer

    THE CONTENTS OF THIS DOCUMENTATION ARE PROVIDED "AS IS," AND COPYRIGHT HOLDERS MAKE NO
    REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
    WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, OR
    TITLE; THAT THE CONTENTS OF THE DOCUMENTATION ARE SUITABLE FOR ANY PURPOSE; THAT THE
    IMPLEMENTATION OF SUCH CONTENTS WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS,
    TRADEMARKS OR OTHER RIGHTS.
    COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL
    DAMAGES ARISING OUT OF ANY USE OF THE DOCUMENTATION OR THE PERFORMANCE OR IMPLEMENTATION OF
    THE CONTENTS THEREOF.

    ## Trademarks

    Rubrik, the Rubrik logo, Rubrik Envision, and Rubrik Edge are trademarks or registered trademarks of Rubrik, Inc. in the U.S. and/or other countries. All other trademarks are the property of their respective owners.
  x-logo:
    url: 'https://www.rubrik.com/wp-content/uploads/2016/11/Rubrik-Snowflake-small.png'
basePath: /api/v1
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  '/cluster/{id}':
    get:
      summary: Get cluster details
      description: Retrieve public information about the Rubrik cluster
      operationId: getPublicClusterInfo
      tags:
        - /cluster
      x-group: cluster
      parameters:
        - in: path
          description: ID of the Rubrik cluster or *me* for self.
          name: id
          required: true
          default: me
          type: string
      responses:
        '200':
          description: Information about the cluster
          schema:
            $ref: '#/definitions/ClusterInfo'
    patch:
      summary: Change Rubrik cluster properties
      description: Change the properties of a specified Rubrik cluster
      operationId: updateCluster
      tags:
        - /cluster
      x-group: cluster
      parameters:
        - in: path
          description: 'ID of a Rubrik cluster object, or use *me* for the Rubrik cluster that is hosting the current API session.'
          name: id
          required: true
          default: me
          type: string
        - in: body
          description: Array that contains the changed information for the Rubrik cluster object.
          name: cluster_update
          required: true
          schema:
            $ref: '#/definitions/ClusterUpdate'
      responses:
        '200':
          description: Updated information for a specified Rubrik cluster
          schema:
            $ref: '#/definitions/ClusterInfo'
  '/cluster/{id}/version':
    get:
      summary: Get cluster software version
      description: Retrieves software version of the Rubrik cluster
      operationId: getClusterVersion
      security: []
      tags:
        - /cluster
      x-group: cluster
      parameters:
        - in: path
          description: ID of the Rubrik cluster or *me* for self
          name: id
          required: true
          default: me
          type: string
      responses:
        '200':
          description: Software version running on the cluster
          schema:
            $ref: '#/definitions/ClusterVersion'
      x-unauthenticated: true
  '/cluster/{id}/api_version':
    get:
      summary: Get cluster REST API version
      description: Retrieves software version of the Rubrik cluster
      operationId: getClusterApiVersion
      security: []
      tags:
        - /cluster
      x-group: cluster
      parameters:
        - in: path
          description: ID of the Rubrik cluster or *me* for self
          name: id
          required: true
          default: me
          type: string
      responses:
        '200':
          description: REST API version running on the cluster
          schema:
            $ref: '#/definitions/ClusterApiVersion'
      x-unauthenticated: true
  /fileset:
    get:
      summary: Get summary information for all filesets
      description: 'Retrieve summary information for each fileset. Optionally, filter the retrieved information.'
      operationId: queryFileset
      tags:
        - /fileset
      x-group: fileset
      parameters:
        - name: primary_cluster_id
          in: query
          description: |-
            Filter the summary information based on the primary_cluster_id of the primary Rubrik cluster.
            Use **_local_** as the primary_cluster_id of the Rubrik cluster that is hosting the current REST API session.
          required: false
          type: string
        - name: host_id
          in: query
          description: Filter the summary information based on the ID of the host referenced by the fileset.
          required: false
          type: string
        - name: share_id
          in: query
          description: |-
            Filter the summary information based on the ID of the host share referenced by the fileset.
            Use **_NONE_** to only return information for filesets that were not created based on a host share.
            Use **_ANY_** to only return information for filesets that were created based on a host share.
          required: false
          type: string
        - name: is_relic
          in: query
          description: Filter the summary information based on the relic status of the fileset. Returns both relic and non relic if the parameter is not set.
          required: false
          type: boolean
        - name: effective_sla_domain_id
          in: query
          description: |-
            Filter the summary information based on the ID of the effective SLA Domain inherited by a fileset.
            Use **_UNPROTECTED_** to only return information for filesets that do not have an effective SLA Domain.
            Use **_PROTECTED_** to only return information for filesets that do have an effective SLA Domain.
          required: false
          type: string
        - name: template_id
          in: query
          description: |-
            Filter the summary information based on the ID of a fileset template.

            Use **_NONE_** to only return information for filesets that were not created from a fileset template.

            Use **_ANY_** to only return information for filesets that were created from a fileset template.
          required: false
          type: string
        - name: limit
          in: query
          description: |-
            Limit the summary information to a specified maximum number of filesets.

            Optionally, use with **_offset_** to start the count at a specified point.

            Optionally, use with **_sort_by_** to perform sort on given attributes. Include **_sort_order_** to determine the ascending or descending direction of sort.
          required: false
          type: integer
          format: int32
          minimum: 0
        - name: offset
          in: query
          description: 'Starting position in the list of fileset entries contained in the response. The summary information includes the specified numbered entry and all higher numbered entries. Use with **_limit_** to retrieve the summary information as smaller groups of entries, e.g. for paging of results.'
          required: false
          type: integer
          format: int32
          minimum: 0
        - name: name
          in: query
          description: Retrieve filesets with a name matching the provided name. The search is performed as a case-insensitive infix search.
          required: false
          type: string
        - name: host_name
          in: query
          description: Retrieve filesets with a host name matching the provided name. The search is performed as a case-insensitive infix search.
          required: false
          type: string
        - name: sort_by
          in: query
          description: |-
            Specifies a comma-separated list of fileset attributes to use in sorting the fileset summary information. Performs an ASCII sort of the summary information using each specified attribute, in the order specified.

            Valid attributes are: **_name_**, **_hostName_**, **_templateType_**, **_slaName_**, **_includes_**, **_excludes_**, and **_exceptions_**. Requires **_sort_order_**.
          required: false
          type: string
          enum:
            - name
            - hostName
            - templateId
            - effectiveSlaDomainName
            - includes
            - excludes
            - exceptions
        - name: sort_order
          in: query
          description: 'Sort order, either ascending or descending'
          required: false
          type: string
          enum:
            - asc
            - desc
      responses:
        '200':
          description: Summary information for filesets.
          schema:
            $ref: '#/definitions/FilesetSummaryListResponse'
    post:
      summary: Create one fileset for a host
      description: Create a fileset for a network host. A fileset is a fileset template applied to a host
      operationId: createFileset
      tags:
        - /fileset
      x-group: fileset
      parameters:
        - in: body
          description: 'Specify a template id along with either host id or share id. If a share id is provided, the host id will be inferred from the host share'
          name: definition
          required: true
          schema:
            $ref: '#/definitions/FilesetCreate'
      responses:
        '201':
          description: Details of the new fileset.
          schema:
            $ref: '#/definitions/FilesetDetail'
  '/fileset/{id}':
    get:
      summary: Get information for a single fileset
      description: Retrieve summary information for a fileset by specifying the fileset ID.
      operationId: getFileset
      tags:
        - /fileset
      x-group: fileset
      parameters:
        - in: path
          description: Specify the fileset ID.
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Detailed information for the specified fileset.
          schema:
            $ref: '#/definitions/FilesetDetail'
    patch:
      summary: Update a Fileset
      description: Update a Fileset with the specified properties.
      operationId: updateFileset
      tags:
        - /fileset
      x-group: fileset
      parameters:
        - in: path
          description: ID of the Fileset to update.
          name: id
          required: true
          type: string
        - in: body
          description: Properties to update.
          name: fileset_update_properties
          required: true
          schema:
            $ref: '#/definitions/FilesetUpdate'
      responses:
        '200':
          description: Returned if the update was successful
          schema:
            $ref: '#/definitions/FilesetDetail'
    delete:
      summary: Delete a fileset
      description: Delete a fileset by specifying the fileset ID.
      operationId: deleteFileset
      tags:
        - /fileset
      x-group: fileset
      parameters:
        - in: path
          description: Provide a fileset ID to delete.
          name: id
          required: true
          type: string
        - in: query
          description: Flag to indicate whether to preserve snapshots of the fileset or to delete them. Default behavior is to preserve them.
          name: preserve_snapshots
          required: false
          type: boolean
      responses:
        '204':
          description: Deleted the specified fileset.
        '404':
          description: Fileset deletion failed
  '/fileset/{id}/missed_snapshot':
    get:
      summary: Get missed snapshots for a fileset
      description: Retrieve summary information about all missed snapshots for a fileset.
      operationId: getMissedFilesetSnapshots
      tags:
        - /fileset
      x-group: fileset
      parameters:
        - in: path
          description: ID of the fileset.
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Summary information about missed snapshots for the specified fileset.
          schema:
            $ref: '#/definitions/MissedSnapshotListResponse'
  '/fileset/{id}/search':
    get:
      summary: Search for a file within the fileset
      description: Search for a file within the fileset. Search via full path prefix or filename prefix.
      operationId: searchFileset
      tags:
        - /fileset
      x-group: fileset
      parameters:
        - in: path
          description: Fileset ID to search
          name: id
          required: true
          type: string
        - in: query
          description: The path query. Either path prefix or filename prefix.
          name: path
          required: true
          type: string
      responses:
        '200':
          description: Search results
          schema:
            $ref: '#/definitions/SearchResponseListResponse'
  '/fileset/{id}/snapshot':
    post:
      summary: Initiate an on-demand backup for a fileset
      description: Create an on-demand backup request for the given fileset.
      operationId: createFilesetBackupJob
      tags:
        - /fileset
      x-group: fileset
      parameters:
        - in: path
          description: ID of the Fileset
          name: id
          required: true
          type: string
        - in: body
          description: Configuration for the on-demand backup.
          required: false
          name: config
          schema:
            $ref: '#/definitions/BaseOnDemandSnapshotConfig'
      responses:
        '202':
          description: Status for the backup request.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
    delete:
      summary: Delete all snapshots of a fileset
      description: |-
        Delete all snapshots that were created based on a fileset by providing the fileset ID.
        Requires an unprotected fileset. Remove the fileset from all SLA Domains.
      operationId: deleteFilesetSnapshots
      tags:
        - /fileset
      x-group: fileset
      parameters:
        - in: path
          description: ID of the fileset.
          name: id
          required: true
          type: string
      responses:
        '204':
          description: Successfully removed all snapshots for the fileset.
  '/fileset/snapshot/{id}':
    get:
      summary: Get information for a fileset snapshot
      description: Retrieve summary information for a fileset snapshot by specifying the snapshot ID.
      operationId: getFilesetSnapshot
      tags:
        - /fileset
      x-group: fileset
      parameters:
        - in: path
          description: ID of snapshot
          name: id
          required: true
          type: string
        - in: query
          description: Whether or not to fetch verbose fileset snapshot information. The performance of this endpoint will decrease if set to true.
          name: verbose
          type: boolean
          default: false
      responses:
        '200':
          description: Detailed information for the specified fileset snapshot.
          schema:
            $ref: '#/definitions/FilesetSnapshotDetail'
    delete:
      summary: Delete a fileset snapshot
      description: 'Delete a fileset snapshot. A snapshot is deleted only if it is an on-demand snapshot, a snapshot of an unprotected fileset or a local snapshot that was downloaded from an archive location.'
      operationId: deleteFilesetSnapshot
      tags:
        - /fileset
      x-group: fileset
      parameters:
        - in: path
          description: ID of snapshot
          name: id
          required: true
          type: string
        - in: query
          description: Snapshot location to delete. Use **_local_** to delete all local snapshots and **_all_** to delete the snapshot in all locations.
          name: location
          required: true
          type: string
          enum:
            - all
            - local
      responses:
        '204':
          description: Snapshot sucessfully deleted
  '/fileset/snapshot/{id}/browse':
    get:
      summary: Lists all files and directories in a given path
      description: Lists all files and directories in a given path
      operationId: browseFilesetSnapshot
      tags:
        - /fileset
      x-group: fileset
      parameters:
        - in: path
          description: ID of snapshot
          name: id
          required: true
          type: string
        - in: query
          description: The absolute path of the starting point for the directory listing.
          name: path
          required: true
          type: string
        - in: query
          description: 'Starting position in the list of path entries contained in the query results, sorted by lexicographical order. The response includes the specified numbered entry and all higher numbered entries.'
          name: offset
          required: false
          type: integer
          format: int32
        - in: query
          description: Maximum number of entries in the response.
          name: limit
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: List of files and directories at the specified path.
          schema:
            $ref: '#/definitions/BrowseResponseListResponse'
  '/fileset/snapshot/{id}/download':
    post:
      summary: Create a download fileset snapshot from archival request
      description: Create a download fileset snapshot from archival request.
      operationId: createDownloadFilesetSnapshotFromCloud
      tags:
        - /fileset
      x-group: fileset
      parameters:
        - in: path
          description: ID of snapshot
          name: id
          required: true
          type: string
      responses:
        '202':
          description: Status for the download request.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  '/fileset/snapshot/{id}/download_file':
    post:
      summary: Create a file download job from a fileset backup
      description: |-
        Initiate a job to download a file from a backup of a fileset. Returns a job instance ID.
        To retrieve the file, use GET /user_notification/{user_id} to monitor the job. When the download is ready, JobNotificationInfo includes the job instance ID as the value of **_jobId_** and the file download link as the value of DownloadFile.
      operationId: createFilesetDownloadFileJob
      tags:
        - /fileset
      x-group: fileset
      parameters:
        - in: path
          description: ID of snapshot
          name: id
          required: true
          type: string
        - in: body
          description: Configuration for a download job.
          name: config
          required: true
          schema:
            $ref: '#/definitions/FilesetDownloadFileJobConfig'
      responses:
        '202':
          description: Status for the download request.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  '/fileset/snapshot/{id}/export_file':
    post:
      summary: Create export job
      description: Initiate a job to copy a file or folder from a fileset backup to a destination host other than the source host. Returns the job instance ID.
      operationId: createFilesetExportFileJob
      tags:
        - /fileset
      x-group: fileset
      parameters:
        - in: path
          description: ID of snapshot
          name: id
          required: true
          type: string
        - in: body
          description: Configuration for job to export a file or folder from a fileset backup.
          name: config
          required: true
          schema:
            $ref: '#/definitions/FilesetExportFileJobConfig'
      responses:
        '202':
          description: Status for the export request.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  '/fileset/snapshot/{id}/restore_file':
    post:
      summary: Create restore job
      description: Initiate a job to copy a file or folder from a fileset backup to the source host. Returns the job instance ID.
      operationId: createFilesetRestoreFileJob
      tags:
        - /fileset
      x-group: fileset
      parameters:
        - in: path
          description: ID of snapshot
          name: id
          required: true
          type: string
        - in: body
          description: Configuration for job to restore a file or folder from a fileset backup.
          name: config
          required: true
          schema:
            $ref: '#/definitions/FilesetRestoreFileJobConfig'
      responses:
        '202':
          description: Status for the restore request.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  '/fileset/request/{id}':
    get:
      summary: Get details about an async request
      description: Get details about a fileset related async request.
      operationId: getFilesetAsyncRequestStatus
      tags:
        - /fileset
      x-group: fileset
      parameters:
        - in: path
          description: ID of the request
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Status for the async request.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  /fileset_template:
    get:
      summary: Get summary information for all fileset templates
      description: 'Retrieve summary information for all fileset templates, including: ID and name of the fileset template, fileset template creation timestamp, array of the included filepaths, array of the excluded filepaths.'
      operationId: queryFilesetTemplate
      tags:
        - /fileset_template
      x-group: fileset
      parameters:
        - name: primary_cluster_id
          in: query
          description: |-
            Filter the summary information based on the primary_cluster_id of the primary Rubrik cluster.
            Use **_local_** as the primary_cluster_id of the Rubrik cluster that is hosting the current REST API session.
          required: false
          type: string
        - name: operating_system_type
          in: query
          description: |-
            Filter the summary information based on the operating system type of the fileset. Accepted values: 'Windows', 'UnixLike', 'ANY', 'NONE'.
            Use **_NONE_** to only return information for fileset templates that do not have operating system type set.
            Use **_ANY_** to only return information for fileset templates that have operating system type set.
          required: false
          type: string
          enum:
            - UnixLike
            - Windows
            - ANY
            - NONE
        - name: share_type
          in: query
          description: |-
            Filter the summary information based on the share type where the fileset is assigned to. Accepted values: 'NFS', 'SMB', 'ANY', 'NONE'.
            Use **_NONE_** to only return information for fileset templates that do not have share type set.
            Use **_ANY_** to only return information for fileset templates that have share type set.
          required: false
          type: string
          enum:
            - NFS
            - SMB
            - ANY
            - NONE
        - name: name
          in: query
          description: Retrieve fileset templates with a name matching the provided name. The search is performed as a case-insensitive infix search.
          required: false
          type: string
        - name: sort_by
          in: query
          description: |-
            Specifies a comma-separated list of fileset attributes to use in sorting the fileset summary information. Performs an ASCII sort of the summary information using each specified attribute, in the order specified.

            Valid attributes are: **_name_**, **_includes_**, **_excludes_**, **_exceptions_**, **_hostCount_**, **_shareType_**. Default sort_order is ascending
          required: false
          type: string
          enum:
            - name
            - hostCount
            - includes
            - excludes
            - exceptions
            - shareType
        - name: sort_order
          in: query
          description: 'Sort order, either ascending or descending'
          required: false
          type: string
          enum:
            - asc
            - desc
      responses:
        '200':
          description: Summary information for all fileset templates.
          schema:
            $ref: '#/definitions/FilesetTemplateDetailListResponse'
    post:
      summary: Create a fileset template
      description: |-
        Create a fileset template. The template is applied to the host.  Each template is a set of paths on the host.

        A template uses full paths and wildcards to define the objects to include, exclude, and exempt from exclusion.

        The **_exceptions_** value specifies paths that should not be excluded from the fileset by the **_exclude_** value.

        Specify an array of full path descriptions for each property **_include_**, **_exclude_**, and **_exceptions_**.

        Acceptable wildcard characters are
        + **_\*_** Single asterisk matches zero or more characters up to a path deliminator
        + **_\*\*_** Double asterisk matches zero or more characters

        The following rules apply to path descriptions
        + Accepts UTF-8 characters
        + Case sensitive
        + Forward slash character **_/_** is the path deliminator
        + Symbolic links must point to a subset of a non symbolic link path
        + Paths that do not start with **_/_** are modified to start with **_\*\*/_**
        + Paths that do not end with **_\*_** are modified to end with **_/\*\*_**
      operationId: createFilesetTemplate
      tags:
        - /fileset_template
      x-group: fileset
      parameters:
        - in: body
          description: Provide an object with the fileset template definition.
          name: definition
          required: true
          schema:
            $ref: '#/definitions/FilesetTemplateCreate'
      responses:
        '201':
          description: Summary information for the created fileset template.
          schema:
            $ref: '#/definitions/FilesetTemplateDetail'
  '/fileset_template/{id}':
    get:
      summary: Get information for a fileset template
      description: Retrieve summary information for a specified fileset template.
      operationId: getFilesetTemplate
      tags:
        - /fileset_template
      x-group: fileset
      parameters:
        - in: path
          description: The ID of the fileset template.
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Summary information for the specified fileset template.
          schema:
            $ref: '#/definitions/FilesetTemplateDetail'
    patch:
      summary: Modify a fileset template
      description: Modify the values of specified fileset template.
      operationId: updateFilesetTemplate
      tags:
        - /fileset_template
      x-group: fileset
      parameters:
        - in: path
          description: ID of the fileset template to update.
          name: id
          required: true
          type: string
        - in: body
          description: Provide an object with the fileset template definition.
          name: definition
          required: true
          schema:
            $ref: '#/definitions/FilesetTemplatePatch'
      responses:
        '200':
          description: Detailed information for modified fileset template.
          schema:
            $ref: '#/definitions/FilesetTemplateDetail'
    delete:
      summary: Delete a fileset template
      description: Deletes the specfied fileset template. All associated filesets are deleted.
      operationId: deleteFilesetTemplate
      tags:
        - /fileset_template
      x-group: fileset
      parameters:
        - in: path
          description: ID of the fileset template to remove.
          name: id
          required: true
          type: string
        - in: query
          description: Flag to indicate whether to convert snapshots of all filesets of this template to relics or to delete them.  Default is true.
          name: preserve_snapshots
          required: false
          type: boolean
      responses:
        '204':
          description: Successfully removed the specified fileset template.
  /host:
    get:
      summary: Get summary information for hosts
      description: Retrieve summary information for all hosts that are registered with a Rubrik cluster.
      operationId: queryHost
      tags:
        - /host
      x-group: hosts
      parameters:
        - in: query
          description: |-
            Filter the summary information based on the operating system type. Accepted values are 'Windows', 'UnixLike', 'ANY', 'NONE'.
            Use **_NONE_** to only return information for hosts templates that do not have operating system type set.
            Use **_ANY_** to only return information for hosts that have operating system type set.
          name: operating_system_type
          required: false
          type: string
          enum:
            - ANY
            - NONE
            - UnixLike
            - Windows
        - in: query
          description: |-
            Filter the summary information based on the operating system.
            Use **_AIX_**, **_Linux_** or **_Solaris_** to restrict the returned information to hosts with operating systems within the specified operating system family.
            Use a specific operating system release version to restrict the returned information to hosts with operating systems that match the specified version.
          name: operating_system
          required: false
          type: string
        - in: query
          description: Filters the summary information based on the Rubrik cluster specified by the value of primary_cluster_id. Use 'local' for the Rubrik cluster that is hosting the current REST API session.
          name: primary_cluster_id
          required: false
          type: string
        - in: query
          description: Retrieve hosts with a host name matching the provided name. The search type is infix
          name: hostname
          required: false
          type: string
        - name: sort_by
          in: query
          description: |-
            Specifies the host attribute to use in sorting the host summary information. Performs an ASCII sort of the summary information using the specified attribute, in the order specified.
            Valid attributes are 'hostname'
          required: false
          type: string
          enum:
            - hostname
        - in: query
          description: 'Sort order, either ascending or descending'
          name: sort_order
          required: false
          type: string
          enum:
            - asc
            - desc
      responses:
        '200':
          description: Summary information for registered hosts.
          schema:
            $ref: '#/definitions/HostSummaryListResponse'
    post:
      summary: Register a host
      description: Register a host.
      operationId: registerHost
      tags:
        - /host
      x-group: hosts
      parameters:
        - in: body
          description: Registration definition for a host.
          name: host
          required: true
          schema:
            $ref: '#/definitions/HostRegister'
      responses:
        '201':
          description: Summary information from registration of the host.
          schema:
            $ref: '#/definitions/HostDetail'
  '/host/{id}':
    get:
      summary: Get summary information for a host
      description: Retrieve summary information for a registered host.
      operationId: getHost
      tags:
        - /host
      x-group: hosts
      parameters:
        - in: path
          description: ID of the registered host.
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Summary information for the specified host.
          schema:
            $ref: '#/definitions/HostDetail'
    patch:
      summary: Modify information for a registered host
      description: 'Change the FQDN or IPv4 value used to connect with a registered host. Optionally, specify whether to compress data before transfer.'
      operationId: updateHost
      tags:
        - /host
      x-group: hosts
      parameters:
        - in: path
          description: ID of the registered host
          name: id
          required: true
          type: string
        - in: body
          description: Properties of host to update
          name: host_update_properties
          required: true
          schema:
            $ref: '#/definitions/HostUpdate'
      responses:
        '200':
          description: Summary information for the specified host.
          schema:
            $ref: '#/definitions/HostDetail'
    delete:
      summary: Delete a registered host
      description: Delete host by specifying the host ID.
      operationId: deleteHost
      tags:
        - /host
      x-group: hosts
      parameters:
        - in: path
          description: ID of the host to delete
          name: id
          required: true
          type: string
      responses:
        '204':
          description: Deleted specified host.
  '/host/{id}/refresh':
    post:
      summary: Refresh a host
      description: Refresh the properties of a host object when changes on the host are not seen in the Rubrik web UI.
      operationId: refreshHost
      tags:
        - /host
      x-group: hosts
      parameters:
        - in: path
          description: ID assigned to a host object.
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Refreshed the properties shown for the specified host
          schema:
            $ref: '#/definitions/HostDetail'
  '/host/{id}/search':
    get:
      summary: Search for a file within the host
      description: Search for a file within the host. Search via full path prefix or filename prefix.
      operationId: searchHost
      tags:
        - /host
      x-group: hosts
      parameters:
        - in: path
          description: ID of the host to search
          name: id
          required: true
          type: string
        - in: query
          description: The path query. Either path prefix or filename prefix.
          name: path
          required: true
          type: string
      responses:
        '200':
          description: Search results
          schema:
            $ref: '#/definitions/SearchResponseListResponse'
  /ldap_service:
    get:
      summary: Get a list of LDAP services
      description: Get a list of LDAP services.
      operationId: queryLdapService
      tags:
        - /ldap_service
      x-group: ldap_service
      parameters: []
      responses:
        '200':
          description: Returns the list of authentication domains
          schema:
            $ref: '#/definitions/LdapServiceSummaryListResponse'
    post:
      summary: Add a new authentication domain
      description: 'Add a new authentication domain. '
      operationId: createLdapService
      tags:
        - /ldap_service
      x-group: ldap_service
      parameters:
        - in: body
          description: Information for joining an authentication domain
          name: ldap_service_info
          required: true
          schema:
            $ref: '#/definitions/LdapServiceInfo'
      responses:
        '201':
          description: Returns a summary of the newly created authentication domain.
          schema:
            $ref: '#/definitions/LdapServiceSummary'
  '/ldap_service/{id}':
    get:
      summary: Get a LDAP service for the given id
      description: Get a LDAP service for the given id
      operationId: getLdapService
      tags:
        - /ldap_service
      x-group: ldap_service
      parameters:
        - in: path
          description: ID of the Auth Domain to be retrieved
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Returns a summary of the requested authentication domain.
          schema:
            $ref: '#/definitions/LdapServiceSummary'
    patch:
      summary: Update a existing authentication domain
      description: Update a existing authentication domain.
      operationId: updateLdapService
      tags:
        - /ldap_service
      x-group: ldap_service
      parameters:
        - in: path
          description: ID of the authentication domain to be updated
          name: id
          required: true
          type: string
        - in: body
          description: Information for updating an authentication domain
          name: ldap_service_info
          required: true
          schema:
            $ref: '#/definitions/LdapServiceInfoUpdate'
      responses:
        '200':
          description: Returns a summary of the newly updated authentication domain.
          schema:
            $ref: '#/definitions/LdapServiceSummary'
    delete:
      summary: Delete a auth domain for the given id
      description: Delete a auth domain for the given id
      operationId: deleteLdapService
      tags:
        - /ldap_service
      x-group: ldap_service
      parameters:
        - in: path
          description: ID of the Auth Domain to be deleted
          name: id
          required: true
          type: string
      responses:
        '204':
          description: Delete Successful
  '/ldap_service/{id}/refresh': {}
  '/ldap_service/request/{id}': {}
  /mssql/db:
    get:
      summary: Get summary information for SQL Server databases
      description: Returns a list of summary information for Microsoft SQL databases.
      operationId: queryMssqlDb
      tags:
        - /mssql
      x-group: mssql
      parameters:
        - in: query
          description: Filter by Microsoft SQL instance.
          name: instance_id
          required: false
          type: string
        - in: query
          description: Filter by the `id` of an Always On Availability Group.
          name: availability_group_id
          required: false
          type: string
        - in: query
          description: Filter by effective SLA domain.
          name: effective_sla_domain_id
          required: false
          type: string
        - in: query
          description: Filter by primary cluster.
          name: primary_cluster_id
          required: false
          type: string
        - in: query
          description: Filter database summary information by the value of the `isRelic` field.
          name: is_relic
          required: false
          type: boolean
        - in: query
          description: Filter database summary information by the value of the `isLiveMount` field.
          name: is_live_mount
          required: false
          type: boolean
        - in: query
          description: Filter database summary information by the value of the `isLogShippingSecondary` field.
          name: is_log_shipping_secondary
          required: false
          type: boolean
      responses:
        '200':
          description: Returned if the query was successful.
          schema:
            $ref: '#/definitions/MssqlDbSummaryListResponse'
  '/mssql/db/{id}':
    get:
      summary: Get detailed information for a Microsoft SQL database
      description: Returns a detailed view of a Microsoft SQL database.
      operationId: getMssqlDb
      tags:
        - /mssql
      x-group: mssql
      parameters:
        - in: path
          description: ID of the Microsoft SQL database to fetch.
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Returned if the query was successful.
          schema:
            $ref: '#/definitions/MssqlDbDetail'
    patch:
      summary: Update a Microsoft SQL database
      description: Update a Microsoft SQL database with the specified properties.
      operationId: updateMssqlDb
      tags:
        - /mssql
      x-group: mssql
      parameters:
        - in: path
          description: ID of the Microsoft SQL database to update.
          name: id
          required: true
          type: string
        - in: body
          description: Properties to update.
          name: db_update_properties
          required: true
          schema:
            $ref: '#/definitions/MssqlDbUpdate'
      responses:
        '200':
          description: Returned if the update was successful
          schema:
            $ref: '#/definitions/MssqlDbDetail'
  '/mssql/db/{id}/export':
    post:
      summary: Export a Microsoft SQL database to a new location
      description: 'Create a request to export a Microsoft SQL database. To check the result of the request, poll /mssql/request/{id}.'
      operationId: createExportMssqlDb
      tags:
        - /mssql
      x-group: mssql
      parameters:
        - in: path
          description: ID of the Microsoft SQL database.
          name: id
          required: true
          type: string
        - in: body
          description: Configuration for the export.
          name: config
          required: true
          schema:
            $ref: '#/definitions/ExportMssqlDbJobConfig'
      responses:
        '202':
          description: Returns the async request for the initiated export.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  '/mssql/db/{id}/missed_recoverable_range':
    get:
      summary: Get missed recoverable ranges of a Microsoft SQL database
      description: 'Retrieve a list of missed recoverable ranges for a Microsoft SQL database. For each run of one type of error, the first and last occurrence of the error are given.'
      operationId: getMssqlDbMissedRecoverableRanges
      tags:
        - /mssql
      x-group: mssql
      parameters:
        - in: path
          description: ID of the Microsoft SQL database.
          name: id
          required: true
          type: string
        - in: query
          description: 'Filter the missed ranges to end after this time. The date-time string should be in ISO8601 format, such as "2016-01-01T01:23:45.678".'
          name: after_time
          required: false
          type: string
          format: date-time
        - in: query
          description: 'Filter the missed ranges to start before this time. The date-time string should be in ISO8601 format, such as "2016-01-01T01:23:45.678".'
          name: before_time
          required: false
          type: string
          format: date-time
      responses:
        '200':
          description: Returns the missed recoverable ranges for the Microsoft SQL database.
          schema:
            $ref: '#/definitions/MssqlMissedRecoverableRangeListResponse'
  '/mssql/db/{id}/missed_snapshot':
    get:
      summary: Get summary information for missed snapshots of a SQL database
      description: 'Returns a list of summary information for the missed snapshots of a Microsoft SQL database, including the time of day and the locations where the snapshot was missed.'
      operationId: getMissedMssqlDbSnapshots
      tags:
        - /mssql
      x-group: mssql
      parameters:
        - in: path
          description: ID of the Microsoft SQL database.
          name: id
          required: true
          type: string
        - in: query
          description: 'Filter snapshots to those missed on or after this time. The date-time string should be in ISO8601 format, such as "2016-01-01T01:23:45.678".'
          name: after_time
          required: false
          type: string
          format: date-time
        - in: query
          description: 'Filter snapshots to those missed on or before this time. The date-time string should be in ISO8601 format, such as "2016-01-01T01:23:45.678".'
          name: before_time
          required: false
          type: string
          format: date-time
      responses:
        '200':
          description: Returns details about the missed snapshots.
          schema:
            $ref: '#/definitions/MissedSnapshotListResponse'
  '/mssql/db/{id}/mount':
    post:
      summary: Live Mount SQL Server database from a point in time copy
      description: 'Create an async request to Live Mount a SQL Server database. Poll the task status by using /mssql/request/{id}.'
      operationId: createMssqlMount
      tags:
        - /mssql
      x-group: mssql_mount
      parameters:
        - in: path
          description: ID of the SQL Server database.
          name: id
          required: true
          type: string
        - in: body
          description: Configuration for the Live Mount.
          name: config
          required: true
          schema:
            $ref: '#/definitions/MountMssqlDbConfig'
      responses:
        '202':
          description: Returns the async task object for the Live Mount request.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  '/mssql/db/{id}/recoverable_range':
    get:
      summary: Get recoverable ranges of a Microsoft SQL database
      description: Retrieve the recoverable ranges for a specified Microsoft SQL database. A begin and/or end timestamp can be provided to retrieve only the ranges that fall within the window.
      operationId: getMssqlDbRecoverableRanges
      tags:
        - /mssql
      x-group: mssql
      parameters:
        - in: path
          description: ID of the Microsoft SQL database.
          name: id
          required: true
          type: string
        - in: query
          description: 'Filter ranges to end after this time. The date-time string should be in ISO8601 format, such as "2016-01-01T01:23:45.678Z".'
          name: after_time
          required: false
          type: string
          format: date-time
        - in: query
          description: 'Filter ranges to start before this time. The date-time string should be in ISO8601 format, such as "2016-01-01T01:23:45.678".'
          name: before_time
          required: false
          type: string
          format: date-time
      responses:
        '200':
          description: Returns the recoverable ranges for the Microsoft SQL database.
          schema:
            $ref: '#/definitions/MssqlRecoverableRangeListResponse'
  '/mssql/db/{id}/restore':
    post:
      summary: Restore a Microsoft SQL database
      description: 'Create a request to restore a SQL Server database. To check the result of the request, poll /mssql/request/{id}.'
      operationId: createRestoreMssqlDb
      tags:
        - /mssql
      x-group: mssql
      parameters:
        - in: path
          description: ID of the Microsoft SQL database.
          name: id
          required: true
          type: string
        - in: body
          description: Configuration for the restore.
          name: config
          required: true
          schema:
            $ref: '#/definitions/RestoreMssqlDbJobConfig'
      responses:
        '202':
          description: Returns the async request for the initiated restore.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  '/mssql/db/{id}/snapshot':
    get:
      summary: Get summary information for snapshots of a Microsoft SQL database
      description: Returns a list of summary information for snapshots of a Microsoft SQL database.
      operationId: queryMssqlDbSnapshot
      tags:
        - /mssql
      x-group: mssql
      parameters:
        - in: path
          description: ID of the Microsoft SQL database.
          name: id
          required: true
          type: string
        - in: query
          description: 'Filter snapshots to those taken on or after this time. The date-time string should be in ISO8601 format, such as "2016-01-01T01:23:45.678".'
          name: after_time
          required: false
          type: string
          format: date-time
        - in: query
          description: 'Filter snapshots to those taken before or on this time. The date-time string should be in ISO8601 format, such as "2016-01-01T01:23:45.678".'
          name: before_time
          required: false
          type: string
          format: date-time
      responses:
        '200':
          description: Returns summary information for snapshots.
          schema:
            $ref: '#/definitions/MssqlDbSnapshotSummaryListResponse'
    post:
      summary: Take an on-demand backup of a Microsoft SQL database
      description: 'Take an on-demand backup of a Microsoft SQL database. The forceFullSnapshot property can be set to true to force a full snapshot. To check the result of the request, poll /mssql/request/{id}.'
      operationId: createOnDemandMssqlBackup
      tags:
        - /mssql
      x-group: mssql
      parameters:
        - in: path
          description: ID of the Microsoft SQL database.
          name: id
          required: true
          type: string
        - in: body
          description: Configuration for the on-demand backup.
          name: config
          required: true
          schema:
            $ref: '#/definitions/MssqlBackupJobConfig'
      responses:
        '202':
          description: Returns the async request for the initiated on-demand backup.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
    delete:
      summary: Delete all snapshots of a Microsoft SQL database
      description: Deletes all snapshots of a Microsoft SQL database. The database must be unprotected for the operation to succeed.
      operationId: deleteMssqlDbSnapshots
      tags:
        - /mssql
      x-group: mssql
      parameters:
        - in: path
          description: ID of the Microsoft SQL database.
          name: id
          required: true
          type: string
      responses:
        '204':
          description: Returned if all snapshots for the Microsoft SQL database were successfully removed.
  '/mssql/db/{id}/log_backup':
    post:
      summary: Take an on-demand log backup for a Microsoft SQL database
      description: Take an on-demand log backup for a Microsoft SQL database.
      operationId: createOnDemandMssqlLogBackup
      tags:
        - /mssql
      x-group: mssql
      parameters:
        - in: path
          description: ID of the Microsoft SQL database.
          name: id
          required: true
          type: string
      responses:
        '202':
          description: Returns the async request for the initiated on-demand log backup.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  /mssql/db/mount:
    get:
      summary: Get summary information for all Live Mounts of SQL Server databases
      description: Returns a list with summary information for all Live Mounted SQL Server databases.
      operationId: queryMssqlMount
      tags:
        - /mssql
      x-group: mssql_mount
      parameters:
        - in: query
          description: Filters by the ID of the source SQL Server database.
          name: source_database_id
          required: false
          type: string
        - in: query
          description: Filters by the name of the source SQL Server database using infix search.
          name: source_database_name
          required: false
          type: string
        - in: query
          description: Filters by the ID of the target SQL Server instance.
          name: target_instance_id
          required: false
          type: string
        - in: query
          description: Filters by the name of the mounted SQL Server database using infix search.
          name: mounted_database_name
          required: false
          type: string
        - in: query
          description: 'Specifies the SQL Server Live Mount attribute to use in sorting the summary information. Performs an ASCII sort using the specified attribute, in the order specified by sort_order.'
          name: sort_by
          required: false
          type: string
          enum:
            - sourceDatabaseName
            - sourceRecoveryPoint
            - mountedDatabaseName
            - creationDate
        - in: query
          description: 'Specifies the sort order, either ascending or descending. Default order is ascending.'
          name: sort_order
          required: false
          type: string
          enum:
            - asc
            - desc
        - in: query
          description: Returns the portion of the ordered list that starts after the element specified by the offset number.
          name: offset
          required: false
          type: integer
          format: int32
          minimum: 0
        - in: query
          description: Sets the maximum number of a elements to include in the data array of the response.
          name: limit
          required: false
          type: integer
          format: int32
          minimum: 0
      responses:
        '200':
          description: Returns summary information for all Live Mounts.
          schema:
            $ref: '#/definitions/MssqlMountSummaryListResponse'
  '/mssql/db/mount/{id}':
    get:
      summary: Get detailed information for a Live Mount of a SQL Server database
      description: Returns detailed information for the specified Live Mount of a SQL Server database.
      operationId: getMssqlMount
      tags:
        - /mssql
      x-group: mssql_mount
      parameters:
        - in: path
          description: ID of the Live Mount to fetch.
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Returns detailed information for a specified Live Mount of a SQL Server database.
          schema:
            $ref: '#/definitions/MssqlMountDetail'
    delete:
      summary: Delete a Live Mount of a SQL Server database
      description: 'Create an async request to delete a Live Mount of a SQL Server database. Poll the task status by using /mssql/request/{id}.'
      operationId: createMssqlUnmount
      tags:
        - /mssql
      x-group: mssql_mount
      parameters:
        - in: path
          description: ID of the Live Mount to delete.
          name: id
          required: true
          type: string
        - in: query
          description: 'Remove all data within the Rubrik cluster related to the Live Mount, even if the SQL Server database cannot be contacted. Default value is false.'
          name: force
          required: false
          type: boolean
      responses:
        '202':
          description: Returns the task object for the async request to delete the Live Mount of a SQL Server database.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  '/mssql/db/snapshot/{id}':
    get:
      summary: Get details information about a Microsoft SQL database snapshot
      description: Returns detailed information about a Microsoft SQL database snapshot.
      operationId: getMssqlDbSnapshot
      tags:
        - /mssql
      x-group: mssql
      parameters:
        - in: path
          description: ID of the snapshot.
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Returns details about a Microsoft SQL database snapshot.
          schema:
            $ref: '#/definitions/MssqlDbSnapshotDetail'
  '/mssql/db/{id}/log_shipping':
    post:
      summary: Create a log shipping configuration
      description: 'Create a log shipping configuration between a specified primary database and a specified secondary database. The transaction logs from the primary database are regularly restored to the secondary database in order to maintain the secondary database as a point-in-time copy of the primary database. The primary database must have log backups configured, and it must be in the full or bulk-logged recovery model.'
      operationId: createLogShippingConfiguration
      tags:
        - /mssql
      x-group: mssql_log_shipping
      parameters:
        - in: path
          description: ID of the primary database object.
          name: id
          required: true
          type: string
        - in: body
          description: Object containing the values of a log shipping configuration.
          name: config
          required: true
          schema:
            $ref: '#/definitions/MssqlLogShippingCreateConfig'
      responses:
        '202':
          description: Returned when the specified log shipping configuration is successfully applied.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  /mssql/db/log_shipping:
    get:
      summary: Get log shipping configurations
      description: Retrieves all log shipping configuration objects. Results can be filtered and sorted.
      operationId: queryLogShippingConfigurations
      tags:
        - /mssql
      x-group: mssql_log_shipping
      parameters:
        - in: query
          description: ID of a primary database object.
          name: primary_database_id
          required: false
          type: string
        - in: query
          description: Filter log shipping configuration objects by performing an infix search using the name of a primary database.
          name: primary_database_name
          required: false
          type: string
        - in: query
          description: Filter log shipping configuration objects by performing an infix search using the name of a secondary database.
          name: secondary_database_name
          required: false
          type: string
        - in: query
          description: Filter log shipping configuration objects by performing an infix search using the location string value (host/instance) for a secondary database.
          name: location
          required: false
          type: string
        - in: query
          description: Filter log shipping configuration objects based on the status value for the secondary database.
          name: status
          required: false
          type: string
          enum:
            - OK
            - Broken
            - Initializing
            - Stale
        - name: limit
          in: query
          description: Limit the summary information to a specified maximum number of results.
          required: false
          type: integer
          format: int32
          minimum: 0
        - name: offset
          in: query
          description: Starting position in the list of results contained in the response. The summary information includes the specified numbered result and all higher numbered results.
          required: false
          type: integer
          format: int32
          minimum: 0
        - in: query
          description: Specifies an attribute used to ASCII-sort the results. Sorting by the last_applied attribute represents the timestamp as an ISO 8601-encoded string.
          name: sort_by
          required: false
          type: string
          enum:
            - secondaryDatabaseName
            - primaryDatabaseName
            - lastAppliedPoint
            - location
        - in: query
          name: sort_order
          description: 'Sort order, either ascending or descending.'
          required: false
          type: string
          enum:
            - asc
            - desc
      responses:
        '200':
          description: Summary list of descendant objects
          schema:
            $ref: '#/definitions/MssqlLogShippingSummaryListResponse'
  '/mssql/db/log_shipping/{id}':
    get:
      summary: Get a log shipping configuration
      description: Retrieves a particular log shipping configuration with all the details of the configuration.
      operationId: getLogShippingConfiguration
      tags:
        - /mssql
      x-group: mssql_log_shipping
      parameters:
        - in: path
          description: ID of a log shipping configuration.
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Returned when the request for the log shipping configuration details is successful.
          schema:
            $ref: '#/definitions/MssqlLogShippingDetail'
    patch:
      summary: Update a specified log shipping configuration
      description: Updates a specified log shipping configuration.
      operationId: updateLogShippingConfiguration
      tags:
        - /mssql
      x-group: mssql_log_shipping
      parameters:
        - in: path
          description: ID of a log shipping configuration object.
          name: id
          required: true
          type: string
        - in: body
          description: Configuration parameters for the update operation.
          name: config
          required: true
          schema:
            $ref: '#/definitions/MssqlLogShippingUpdate'
      responses:
        '202':
          description: Returns the request ID of an asynchronous job that updates a log shipping configuration object.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
    delete:
      summary: Delete a specified log shipping configuration
      description: Deletes the specified log shipping configuration
      operationId: deleteLogShippingConfiguration
      tags:
        - /mssql
      x-group: mssql_log_shipping
      parameters:
        - in: path
          description: ID of a log shipping configuration object.
          name: id
          required: true
          type: string
        - in: query
          decription: 'Boolean value that determines whether to attempt to delete the secondary database associated with the specified log shipping configuration. The default value is false. When set to false, no attempt is made to delete the secondary database. When set to true, starts an asynchronous job to delete the secondary database.'
          name: delete_secondary_database
          required: false
          type: boolean
      responses:
        '202':
          description: 'Returns with the request ID of an async job to delete a log shipping configuration object and, if specified, a secondary database.'
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  '/mssql/db/log_shipping/{id}/reseed':
    post:
      summary: Reseed a secondary database
      description: Starts an asynchronous job to reseed a secondary database. Reseeding restores the data in the secondary database based on a log shipping configuration.
      operationId: reseedSecondary
      tags:
        - /mssql
      x-group: mssql_log_shipping
      parameters:
        - in: path
          description: ID of the log shipping configuration object for the specified secondary database.
          name: id
          required: true
          type: string
        - in: body
          description: Configuration parameters for the reseed operation.
          name: config
          required: true
          schema:
            $ref: '#/definitions/MssqlLogShippingReseedConfig'
      responses:
        '202':
          description: Returns with a request ID for the async job to reseed a secondary database.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  /mssql/instance:
    get:
      summary: Get summary information for Microsoft SQL instances
      description: Returns a list of summary information for Microsoft SQL instances.
      operationId: queryMssqlInstance
      tags:
        - /mssql
      x-group: mssql
      parameters:
        - name: root_id
          in: query
          description: Include only instances that belong to this root.
          required: false
          type: string
        - in: query
          description: Limits the instances returned within one cluster specified by primary_cluster_id.
          name: primary_cluster_id
          required: false
          type: string
      responses:
        '200':
          description: Returned if the query was successful.
          schema:
            $ref: '#/definitions/MssqlInstanceSummaryListResponse'
  '/mssql/instance/{id}':
    get:
      summary: Get detailed information for a Microsoft SQL instance
      description: Returns a detailed view of a Microsoft SQL instance.
      operationId: getMssqlInstance
      tags:
        - /mssql
      x-group: mssql
      parameters:
        - in: path
          description: ID of the Microsoft SQL instance.
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Returned if the query was successful.
          schema:
            $ref: '#/definitions/MssqlInstanceDetail'
    patch:
      summary: Update a Microsoft SQL instance
      description: Update a Microsoft SQL instance with specified properties.
      operationId: updateMssqlInstance
      tags:
        - /mssql
      x-group: mssql
      parameters:
        - in: path
          description: ID of the Microsoft SQL instance.
          name: id
          required: true
          type: string
        - in: body
          description: Properties to update.
          name: instance_update_properties
          required: true
          schema:
            $ref: '#/definitions/MssqlInstanceUpdate'
      responses:
        '200':
          description: Returned if the update was successful.
          schema:
            $ref: '#/definitions/MssqlInstanceDetail'
  '/mssql/request/{id}':
    get:
      summary: Get details for an async request
      description: Returns the task object for an async request related to SQL Server databases.
      operationId: getMssqlAsyncRequestStatus
      tags:
        - /mssql
      x-group: mssql
      parameters:
        - in: path
          description: ID of the async request.
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Status of the async request.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  /session:
    post:
      summary: Create user session
      description: Open a user session.
      operationId: createSession
      tags:
        - /session
      x-group: session
      parameters:
        - in: query
          description: 'Bind the new session to the specified organization. When this parameter is not specified, the session will be bound to an organization chosen according to the user''s preferences and authorizations.'
          name: organization_id
          required: false
          type: string
        - in: query
          description: 'Bind the new session to the specified directory. When this parameter is unspecified, the session will be bound to local domain.'
          name: realm
          required: false
          type: string
      responses:
        '200':
          description: Session creation successful
          schema:
            $ref: '#/definitions/SessionSummary'
  '/session/{id}':
    delete:
      summary: Delete user session
      description: Close a user session and invalidate the session token.
      operationId: deleteSession
      tags:
        - /session
      x-group: session
      parameters:
        - in: path
          description: Session ID or  *me* for session of bearer token.
          name: id
          required: true
          default: me
          type: string
      responses:
        '204':
          description: Invalidation successful
  /sla_domain:
    get:
      summary: Get list of SLA Domains
      description: Retrieve summary information for all SLA Domains.
      operationId: querySlaDomain
      tags:
        - /sla_domain
      x-group: sla_domain
      parameters:
        - name: primary_cluster_id
          in: query
          description: Limits the information retrieved to those SLA Domains that are associated with the Rubrik cluster ID that is specified by primary_cluster_id. Use **local** for the Rubrik cluster that is hosting the current REST API session.
          required: false
          type: string
        - name: name
          in: query
          description: Limit the list information to those SLA Domains which match the specified SLA Domain 'name' value.
          required: false
          type: string
        - name: sort_by
          in: query
          description: Attribute to use to sort the SLA Domains summary information. Optionally use **_sort_order_** to specify whether to sort in ascending or descending order
          required: false
          type: string
          enum:
            - name
        - name: sort_order
          in: query
          description: 'Sort order, either ascending or descending. If not specified, SLA Domain summary results will be sorted in ascending order'
          required: false
          type: string
          enum:
            - asc
            - desc
      responses:
        '200':
          description: Summary information for SLA Domains
          schema:
            $ref: '#/definitions/SlaDomainSummaryListResponse'
    post:
      summary: Create SLA Domain
      description: Create a new SLA Domain on a Rubrik cluster by specifying Domain Rules and policies.
      operationId: createSlaDomain
      tags:
        - /sla_domain
      x-group: sla_domain
      parameters:
        - in: body
          description: 'SLA Domain definition. The SLA domain accepts two backup windows, one for a regular backup or snapshot and one for the first full backup or snapshot. Specify times using Rubrik cluster timezone.'
          name: definition
          required: true
          schema:
            $ref: '#/definitions/SlaDomainDefinition'
      responses:
        '201':
          description: Summary of newly created SLA Domain.
          schema:
            $ref: '#/definitions/SlaDomainSummary'
  '/sla_domain/{id}':
    get:
      summary: Get SLA Domain details
      description: Retrieve summary information for a specified SLA Domain.
      operationId: getSlaDomain
      tags:
        - /sla_domain
      x-group: sla_domain
      parameters:
        - in: path
          description: ID of the SLA Domain.
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Object containing information about the SLA Domain
          schema:
            $ref: '#/definitions/SlaDomainSummary'
    delete:
      summary: Remove SLA Domain
      description: 'Delete an SLA Domain from a Rubrik cluster. The SLA Domain must not be assigned to any VMs, filesets or databases.'
      operationId: deleteSlaDomain
      tags:
        - /sla_domain
      x-group: sla_domain
      parameters:
        - in: path
          description: ID of the SLA Domain.
          name: id
          required: true
          type: string
      responses:
        '204':
          description: Removed the specified SLA Domain.
    put:
      summary: Update SLA Domain
      description: Update the properties of an SLA Domain.
      operationId: updateSlaDomain
      tags:
        - /sla_domain
      x-group: sla_domain
      parameters:
        - in: path
          description: ID of the SLA Domain.
          name: id
          required: true
          type: string
        - in: body
          description: 'Object containing the updated SLA Domain. The SLA domain accepts two backup windows, one for a regular backup or snapshot and one for the first full backup or snpashot. Specify times using the Rubrik cluster time zone.'
          name: update_info
          required: true
          schema:
            $ref: '#/definitions/SlaDomainDefinition'
      responses:
        '200':
          description: Object containing updated SLA Domain.
          schema:
            $ref: '#/definitions/SlaDomainSummary'
    patch:
      summary: Patch SLA Domain
      description: Patch the properties of an SLA Domain.
      operationId: patchSlaDomain
      tags:
        - /sla_domain
      x-group: sla_domain
      parameters:
        - in: path
          description: ID of the SLA Domain.
          name: id
          required: true
          type: string
        - in: body
          description: 'Object containing the fields to be edited for SLA Domain. The SLA Domain accepts two backup windows, one for a regular backup or snapshot and one for the first full backup or snapshot. Specify times using the Rubrik cluster timezone. Remote SLA Domain only supports edit to the archival specification.'
          name: patch_info
          required: true
          schema:
            $ref: '#/definitions/SlaDomainPatchDefinition'
      responses:
        '200':
          description: Object containing the patched SLA Domain.
          schema:
            $ref: '#/definitions/SlaDomainSummary'
  /vmware/vcenter:
    get:
      summary: Get list of vCenters
      description: 'Retrieve information for each managed vCenter, including: ID, managed ID, address, username, SLA ID, and primary cluster ID.'
      operationId: queryVcenter
      tags:
        - /vmware/vcenter
      x-group: vcenter
      parameters:
        - in: query
          description: Limits the information to the Rubrik cluster specified by the value of primary_cluster_id. Use 'local' for the Rubrik cluster that is hosting the current REST API session.
          name: primary_cluster_id
          required: false
          type: string
      responses:
        '200':
          description: Summary information for managed vCenters.
          schema:
            $ref: '#/definitions/VcenterSummaryListResponse'
    post:
      summary: Add vCenter Server
      description: 'Create a vCenter Server object by providing the address and account credentials of the vCenter Server. Initiates an asynchronous job to establish a connection with the vCenter Server and retrieve all metadata. Use GET /vcenter/{id}/status to check status.'
      operationId: createVcenter
      tags:
        - /vmware/vcenter
      x-group: vcenter
      parameters:
        - in: body
          description: 'IP address and account credentials of the vCenter Server server, and ID of the managing Rubrik cluster.'
          name: vcenter_detail
          required: true
          schema:
            $ref: '#/definitions/VcenterConfig'
      responses:
        '202':
          description: Status for the add vCenter Server request.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  '/vmware/vcenter/{id}':
    get:
      summary: Get the details of a vCenter Server
      description: Retrieve detailed information for a vCenter Server object.
      operationId: getVcenter
      tags:
        - /vmware/vcenter
      x-group: vcenter
      parameters:
        - in: path
          description: ID of the vCenter Server.
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Details for a vCenter Server object.
          schema:
            $ref: '#/definitions/VcenterDetail'
    patch:
      summary: Update the SLA Domain for a vCenter Server
      description: Update the SLA Domain that is configured for a vCenter Server.
      operationId: patchVcenter
      tags:
        - /vmware/vcenter
      x-group: vcenter
      parameters:
        - in: path
          description: ID of the vCenter Server.
          name: id
          required: true
          type: string
        - in: body
          description: Object containing updated vCenter Server information.
          name: update_properties
          required: true
          schema:
            $ref: '#/definitions/VcenterPatch'
      responses:
        '200':
          description: Summary of the updated vCenter Server object.
          schema:
            $ref: '#/definitions/VcenterSummary'
    put:
      summary: Update vCenter Server
      description: 'Update the address, username and password of the specified vCenter Server object.'
      operationId: updateVcenter
      tags:
        - /vmware/vcenter
      x-group: vcenter
      parameters:
        - in: path
          description: ID of the vCenter Server.
          name: id
          required: true
          type: string
        - in: body
          description: Object containing updated vCenter Server information.
          name: update_properties
          required: true
          schema:
            $ref: '#/definitions/VcenterConfig'
      responses:
        '200':
          description: Summary of the updated vCenter Server object.
          schema:
            $ref: '#/definitions/VcenterSummary'
    delete:
      summary: Remove vCenter Server
      description: Initiates an asynchronous job to remove a vCenter Server object. The vCenter Server cannot have VMs mounted through the Rubrik cluster.
      operationId: deleteVcenter
      tags:
        - /vmware/vcenter
      x-group: vcenter
      parameters:
        - in: path
          description: ID of the vCenter Server to remove.
          name: id
          required: true
          type: string
      responses:
        '202':
          description: Status for the async request.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  '/vmware/vcenter/{id}/refresh':
    post:
      summary: Refresh vCenter Server metadata
      description: Create a job to refresh the metadata for the specified vCenter Server
      operationId: createRefresh
      tags:
        - /vmware/vcenter
      x-group: vcenter
      parameters:
        - in: path
          description: ID of the vCenter Server
          name: id
          required: true
          type: string
      responses:
        '202':
          description: Job Instance ID of the scheduled vCenter Server refresh job.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  '/vmware/vcenter/request/{id}':
    get:
      summary: Get vCenter Server async request
      description: Get details about a vcenter related async request.
      operationId: getVcenterAsyncRequestStatus
      tags:
        - /vmware/vcenter
      x-group: vcenter
      parameters:
        - in: path
          description: ID of the request
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Status for the async request.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  /vmware/vm:
    get:
      summary: Get list of VMs
      description: Get summary of all the VMs
      operationId: queryVm
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: query
          description: Filter by ID of effective SLA Domain.
          name: effective_sla_domain_id
          required: false
          type: string
        - in: query
          description: 'Filter by primary cluster ID, or **local**.'
          name: primary_cluster_id
          required: false
          type: string
        - name: limit
          in: query
          description: Limit the number of matches returned.
          required: false
          type: integer
          format: int32
          minimum: 0
        - name: offset
          in: query
          description: Ignore these many matches in the beginning.
          required: false
          type: integer
          format: int32
          minimum: 0
        - name: is_relic
          in: query
          description: 'Filter by the isRelic field of the virtual machine. When this parameter is not set, return both relic and non-relic virtual machines.'
          required: false
          type: boolean
        - name: name
          in: query
          description: Search by using a virtual machine name.
          required: false
          type: string
        - name: moid
          in: query
          description: Search by using a virtual machine managed object ID.
          required: false
          type: string
        - name: sla_assignment
          in: query
          description: Filter by SLA Domain assignment type.
          enum:
            - Derived
            - Direct
            - Unassigned
          required: false
          type: string
        - name: sort_by
          in: query
          description: Sort results based on the specified attribute.
          required: false
          type: string
          enum:
            - effectiveSlaDomainName
            - name
            - moid
            - folderPath
            - infraPath
        - name: sort_order
          in: query
          description: 'Sort order, either ascending or descending.'
          required: false
          type: string
          enum:
            - asc
            - desc
      responses:
        '200':
          description: Virtual machine summary.
          schema:
            $ref: '#/definitions/VirtualMachineSummaryListResponse'
  '/vmware/vm/{id}':
    get:
      summary: Get VM details
      description: Retrieve details for a virtual machine.
      operationId: getVm
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: ID of the virtual machine.
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Virtual machine details.
          schema:
            $ref: '#/definitions/VirtualMachineDetail'
    patch:
      summary: Update VM
      description: Update a virtual machine with specified properties. Use the guestCredential field to update the guest credential for a specified virtual machine.
      operationId: updateVm
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: ID of virtual machine.
          name: id
          required: true
          type: string
        - in: body
          description: Properties to update.
          name: vm_update_properties
          required: true
          schema:
            $ref: '#/definitions/VirtualMachineUpdateWithSecret'
      responses:
        '200':
          description: Virtual machine details.
          schema:
            $ref: '#/definitions/VirtualMachineDetail'
  '/vmware/vm/{id}/register_agent':
    post:
      summary: Register Rubrik Backup Service
      description: Register the Rubrik Backup Service that is running on a specified host with the specified Rubrik cluster.
      operationId: vmRegisterAgent
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: ID assigned to a virtual machine object.
          name: id
          required: true
          type: string
      responses:
        '204':
          description: Successfully registered the Rubrik Backup Service for a specified virtual machine.
  '/vmware/vm/{id}/search':
    get:
      summary: Search for a file from a VM
      description: Search for a file in the snapshots of a a virtual machine. Specify the file by full path prefix or filename prefix.
      operationId: searchVm
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: ID of the virtual machine.
          name: id
          required: true
          type: string
        - in: query
          description: The path query. Use either a path prefix or a filename prefix.
          name: path
          required: true
          type: string
      responses:
        '200':
          description: File search results.
          schema:
            $ref: '#/definitions/SearchResponseListResponse'
  '/vmware/vm/{id}/snapshot':
    get:
      summary: Get list of snapshots of VM
      description: Retrieve summary information for the snapshots of a virtual machine.
      operationId: querySnapshot
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: ID of the virtual machine.
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Summary snapshot information for a virtual machine.
          schema:
            $ref: '#/definitions/VmSnapshotSummaryListResponse'
    post:
      summary: Create an on-demand snapshot for a VM
      description: Use the ID of a virtual machine to create an on-demand snapshot.
      operationId: createOnDemandBackup
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: ID of the virtual machine.
          name: id
          required: true
          type: string
        - in: body
          description: Configuration for the on-demand snapshot.
          required: false
          name: config
          schema:
            $ref: '#/definitions/BaseOnDemandSnapshotConfig'
      responses:
        '202':
          description: On-demand snapshot status.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
    delete:
      summary: Delete all snapshots of VM
      description: Delete all of the snapshots from a virtual machine.
      operationId: deleteVmwareSnapshots
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: Virtual machine ID.
          name: id
          required: true
          type: string
      responses:
        '204':
          description: Snapshots successfully deleted.
  '/vmware/vm/{id}/guest_script/run':
    post:
      summary: Run guest OS script
      description: 'Run the specified preBackup, postSnap, or postBackup script in the guest OS of a virtual machine. The script must exist and meet requirements.'
      operationId: runGuestOsScript
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: ID of the virtual machine.
          name: id
          required: true
          type: string
        - in: body
          description: 'Configuration used to run the specified preBackup, postSnap, or postBackup guest OS script.'
          name: config
          required: true
          schema:
            $ref: '#/definitions/VmGuestScriptRunConfig'
      responses:
        '204':
          description: Guest OS script ran successfully and returned a 0 exit code.
  '/vmware/vm/{id}/missed_snapshot':
    get:
      summary: Get details about missed snapshots for a VM
      description: Retrieve details about the missed snapshots for a virtual machine.
      operationId: missedSnapshots
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: ID of a virtual machine.
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Missed snapshot details for a virtual machine.
          schema:
            $ref: '#/definitions/MissedSnapshotListResponse'
  '/vmware/vm/request/{id}':
    get:
      summary: Get asynchronous request details for VM
      description: Get the details of an asynchronous request that involves a VMware virtual machine.
      operationId: getAsyncRequestStatus
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: ID of an asynchronous request.
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Status of an asynchronous request.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  '/vmware/vm/snapshot/{id}':
    get:
      summary: Get VM snapshot details
      description: Retrieve detailed information about a virtual machine snapshot.
      operationId: getSnapshot
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: ID of a snapshot.
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Snapshot details.
          schema:
            $ref: '#/definitions/VmSnapshotDetail'
    delete:
      summary: Delete VM snapshot
      description: Designate a snapshot as expired and available for garbage collection. The snapshot must be an on-demand snapshot or a snapshot from a virtual machine that is not assigned to an SLA Domain.
      operationId: deleteVmwareSnapshot
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: ID of snapshot.
          name: id
          required: true
          type: string
        - in: query
          description: 'Location of the snapshot. Use **_local_** to delete only the local copy of the snapshot. Or use **_all_** to delete the snapshot locally, on a replication target, and at an archival location.'
          name: location
          required: true
          type: string
          enum:
            - all
            - local
      responses:
        '204':
          description: Snapshot successfully deleted.
  '/vmware/vm/snapshot/{id}/browse':
    get:
      summary: List files in VM snapshot
      description: 'For a virtual machine snapshot, list the directories and files that are beneath a specified file system path.'
      operationId: browseVmwareSnapshot
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: ID of snapshot
          name: id
          required: true
          type: string
        - in: query
          description: The absolute path of the starting point for the directory listing.
          name: path
          required: true
          type: string
        - in: query
          description: 'Starting position in the list of path entries contained in the query results, sorted by lexicographical order. The response includes the specified numbered entry and all higher numbered entries.'
          name: offset
          required: false
          type: integer
          format: int32
        - in: query
          description: Maximum number of entries in the response.
          name: limit
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: List of files and directories at the specified path.
          schema:
            $ref: '#/definitions/BrowseResponseListResponse'
  '/vmware/vm/snapshot/{id}/download':
    post:
      summary: Download snapshot from archive
      description: 'Provides a method for retrieving a snapshot, that is not available locally, from an archival location.'
      operationId: createDownloadSnapshotFromCloud
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: ID of snapshot
          name: id
          required: true
          type: string
      responses:
        '202':
          description: Status for the download request.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  '/vmware/vm/snapshot/{id}/download_file':
    post:
      summary: Download file from VM snapshot
      description: Create a request to download a file from a virtual machine snapshot.
      operationId: createDownloadFileJob
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: ID of a snapshot.
          name: id
          required: true
          type: string
        - in: body
          description: Configuration for the file download request.
          name: config
          required: true
          schema:
            $ref: '#/definitions/DownloadFileJobConfig'
      responses:
        '202':
          description: Status of the file download request.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  '/vmware/vm/snapshot/{id}/export':
    post:
      summary: Export VM snapshot
      description: 'Export a virtual machine from a snapshot, using a specified hypervisor host as the datastore.'
      operationId: createExport
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: ID of a snapshot.
          name: id
          required: true
          type: string
        - in: body
          description: Configuration for the export request.
          name: config
          required: true
          schema:
            $ref: '#/definitions/ExportSnapshotJobConfig'
      responses:
        '202':
          description: Status of the export request.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  '/vmware/vm/snapshot/{id}/instant_recover':
    post:
      summary: Instantly recover a VM
      description: 'Instantly recovery a virtual machine from a snapshot. The Instant Recovery request starts the virtual machine with networking enabled and renames and powers off the source virtual machine, if it still exists.'
      operationId: createInstantRecovery
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: ID of Snapshot
          name: id
          required: true
          type: string
        - in: body
          description: Configuration for the Instant Recovery request.
          name: config
          required: true
          schema:
            $ref: '#/definitions/InstantRecoveryJobConfig'
      responses:
        '202':
          description: Status of the Instant Recovery request.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  '/vmware/vm/snapshot/{id}/restore_file':
    post:
      summary: Restore file from VM snapshot
      description: Create a request to restore a file or folder to the source virtual machine.
      operationId: createRestoreFileJob
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: ID of a snapshot.
          name: id
          required: true
          type: string
        - in: body
          description: Configuration for the restore request.
          name: config
          required: true
          schema:
            $ref: '#/definitions/RestoreFileJobConfig'
      responses:
        '202':
          description: Status of the restore request.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  '/vmware/vm/snapshot/{id}/mount':
    post:
      summary: Live mount a VM from a snapshot
      description: Create a request to Live Mount a virtual machine from a snapshot using a specified configuration.
      operationId: createMountV1
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: ID of a snapshot.
          name: id
          required: true
          type: string
        - in: body
          description: Configuration for the Live Mount request.
          name: config
          required: false
          schema:
            $ref: '#/definitions/MountSnapshotJobConfigV1'
      responses:
        '202':
          description: Status of the Live Mount request.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  /vmware/vm/snapshot/mount:
    get:
      summary: Get Live Mount information
      description: Retrieve summary information about Live Mount activity.
      operationId: queryMountV1
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: query
          description: Filters information by virtual machine ID.
          name: vm_id
          required: false
          type: string
        - name: offset
          in: query
          description: 'Starting position in the list of Live Mount entries contained in the response. The summary information includes the specified numbered entry and all higher numbered entries. Use with **_limit_** to retrieve the summary information as smaller groups of entries, e.g. for paging of the results.'
          required: false
          type: integer
          format: int32
          minimum: 0
        - name: limit
          in: query
          description: 'Limit the summary information to a specified maximum number of entries. Optionally, use with **_offset_** to start the count at a specified point. Default is 25.'
          required: false
          type: integer
          format: int32
          minimum: 0
      responses:
        '200':
          description: Summary information for all Live Mounts.
          schema:
            $ref: '#/definitions/VmwareVmMountSummaryV1ListResponse'
  '/vmware/vm/snapshot/mount/{id}':
    get:
      summary: Get information for a Live Mount
      description: Retrieve detailed information for a specified Live Mount.
      operationId: getMountV1
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: ID of a Live Mount.
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Detailed information for the specified Live Mount.
          schema:
            $ref: '#/definitions/VmwareVmMountDetailV1'
    patch:
      summary: Power a Live Mount on and off
      description: Power a specified Live Mount virtual machine on or off. Pass **_true_** to power the virtual machine on and pass **_false_** to power the virtual machine off.
      operationId: updateMount
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: ID of a Live Mount.
          name: id
          required: true
          type: string
        - in: body
          description: Power state configuration.
          name: config
          required: true
          schema:
            $ref: '#/definitions/UpdateMountConfig'
      responses:
        '200':
          description: Details of the Live Mount.
          schema:
            $ref: '#/definitions/VmwareVmMountDetailV1'
    delete:
      summary: Delete a Live Mount VM
      description: Create a request to delete a Live Mount virtual machine.
      operationId: createUnmount
      tags:
        - /vmware/vm
      x-group: vm
      parameters:
        - in: path
          description: ID of a Live Mount
          name: id
          required: true
          type: string
        - in: query
          description: Force unmount to remove metadata when the datastore of the Live Mount virtual machine was moved off of the Rubrik cluster.
          name: force
          required: false
          type: boolean
      responses:
        '202':
          description: Status of the delete request.
          schema:
            $ref: '#/definitions/AsyncRequestStatus'
  '/vmware/vm/virtual_disk/{id}':
    get:
      summary: Details about the specific Virtual Disk
      description: Detailed about the specific Virtual Disk
      operationId: getVirtualDisk
      tags:
        - /vmware/vm
      x-group: virtual_disk
      parameters:
        - in: path
          description: ID of the Virtual Disk
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Return details about the virtual disk
          schema:
            $ref: '#/definitions/VirtualDiskDetail'
    patch:
      summary: Update a specific Virtual Disk
      description: Update a specific Virtual Disk
      operationId: updateVirtualDisk
      tags:
        - /vmware/vm
      x-group: virtual_disk
      parameters:
        - in: path
          description: ID of the Virtual Disk
          name: id
          required: true
          type: string
        - in: body
          description: Virtual Disk update information
          name: update_info
          required: true
          schema:
            $ref: '#/definitions/VirtualDiskUpdate'
      responses:
        '200':
          description: The updated Virtual Disk
          schema:
            $ref: '#/definitions/VirtualDiskDetail'
  /vmware/host:
    get:
      summary: Get summary of all the ESXi hypervisor
      description: Get summary of all the ESXi hypervisor
      operationId: queryVmwareHost
      tags:
        - /vmware/host
      x-group: vmware_host
      parameters:
        - in: query
          description: ID of the Primary cluster
          name: primary_cluster_id
          required: false
          type: string
      responses:
        '200':
          description: List of VMware host summaries
          schema:
            $ref: '#/definitions/VmwareHostSummaryListResponse'
  '/vmware/host/{id}':
    get:
      summary: Get details of a ESXi hypervisor
      description: Get details of a ESXi hypervisor
      operationId: getVmwareHost
      tags:
        - /vmware/host
      x-group: vmware_host
      parameters:
        - in: path
          description: ID of the VMWare host
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Details about the vmware host
          schema:
            $ref: '#/definitions/VmwareHostDetail'
    patch:
      summary: Update the SLA Domain for an ESXi hypervisor
      description: Update the SLA Domain that is configured for an ESXi hypervisor.
      operationId: updateVmwareHost
      tags:
        - /vmware/host
      x-group: vmware_host
      parameters:
        - in: path
          description: ID of the ESXi hypervisor
          name: id
          required: true
          type: string
        - in: body
          description: Object with changes for the ESXi hypervisor information.
          name: update_properties
          required: true
          schema:
            $ref: '#/definitions/VmwareHostUpdate'
      responses:
        '200':
          description: Details for the ESXi hypervisor
          schema:
            $ref: '#/definitions/VmwareHostDetail'
  /windows_cluster:
    get:
      summary: Get summary information for Windows clusters
      description: Returns a list of summary information for Windows server failover clusters.
      operationId: queryWindowsCluster
      tags:
        - /windows_cluster
      x-group: windows_cluster
      parameters:
        - in: query
          description: Filter by primary_cluster_id. Use **local** for the local cluster.
          name: primary_cluster_id
          required: false
          type: string
        - in: query
          description: Filter by is_agentless flag.
          name: is_agentless
          required: false
          type: boolean
      responses:
        '200':
          description: Returned if the query was successful.
          schema:
            $ref: '#/definitions/WindowsClusterSummaryListResponse'
  '/windows_cluster/{id}':
    get:
      summary: Get detailed information for a Windows cluster
      description: Returns a detailed view of a Windows server failover cluster.
      operationId: getWindowsCluster
      tags:
        - /windows_cluster
      x-group: windows_cluster
      parameters:
        - in: path
          description: ID of the Windows cluster.
          name: id
          required: true
          type: string
      responses:
        '200':
          description: Returned if the query was successful.
          schema:
            $ref: '#/definitions/WindowsClusterDetail'
responses:
  RequestFailedException:
    description: Request failed.
    schema:
      $ref: '#/definitions/RequestFailedException'
securityDefinitions:
  BasicAuth:
    type: basic
  Bearer:
    type: apiKey
    name: Authorization
    in: header
security:
  - BasicAuth: []
  - Bearer: []
tags:
  - name: Endpoint reference
    x-traitTag: true
  - name: /cluster
    x-displayName: /cluster
    description: Cluster configuration and health
  - name: /fileset
    x-displayName: /fileset
    description: File system filesets
  - name: /fileset_template
    x-displayName: /fileset_template
    description: File system fileset templates
  - name: /host
    x-displayName: /host
    description: Linux hosts and Windows hosts
  - name: /ldap_service
    x-displayName: /ldap_service
    description: LDAP services
  - name: /mssql
    x-displayName: /mssql
    description: SQL Server instances and databases
  - name: /session
    x-displayName: /session
    description: User session management
  - name: /sla_domain
    x-displayName: /sla_domain
    description: SLA Domains
  - name: /vmware/host
    x-displayName: /vmware/host
    description: VMware hypervisor hosts
  - name: /vmware/vcenter
    x-displayName: /vmware/vcenter
    description: VMware vCenter
  - name: /vmware/vm
    x-displayName: /vmware/vm
    description: VMware virtual machines
  - name: /windows_cluster
    x-displayName: /windows_cluster
    description: Windows clusters
definitions:
  AgentStatus:
    type: object
    required:
      - agentStatus
    properties:
      agentStatus:
        type: string
        description: The agent connection status.
      disconnectReason:
        type: string
        description: The reason the agent disconnected.
  ArchivalSpec:
    type: object
    required:
      - locationId
      - archivalThreshold
    properties:
      locationId:
        type: string
      archivalThreshold:
        type: integer
        format: int64
  AsyncRequestStatus:
    type: object
    required:
      - id
      - status
      - links
    properties:
      id:
        type: string
        description: The ID of the request object. Use it to poll the status.
      status:
        type: string
        description: Status of the id.
      progress:
        type: number
        format: double
        description: The current progress in terms of percentage of the async request.
      startTime:
        type: string
        format: date-time
        description: The start time of the request
      endTime:
        type: string
        format: date-time
        description: The end time of the request
      nodeId:
        type: string
        description: The ID of the node where the job ran.
      error:
        $ref: '#/definitions/RequestErrorInfo'
        description: Any errors encountered
      links:
        type: array
        description: References to any related objects
        items:
          $ref: '#/definitions/Link'
  BackupWindow:
    type: object
    required:
      - startTimeAttributes
      - durationInHours
    properties:
      startTimeAttributes:
        $ref: '#/definitions/SlaStartTimeAttributes'
      durationInHours:
        type: integer
        format: int32
  BaseGuestCredential:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
        description: 'Username for the account used to login to the VM guest OS. To include a domain, use the format <domain>\<username>.'
      password:
        type: string
        description: Password for the account used to login to the VM guest OS.
        x-secret: true
  BaseGuestCredentialDetail:
    type: object
    required:
      - username
    properties:
      username:
        type: string
  BaseOnDemandSnapshotConfig:
    type: object
    properties:
      slaId:
        type: string
  BaseSnapshotDetail:
    allOf:
      - $ref: '#/definitions/BaseSnapshotSummary'
      - type: object
        properties:
          config:
            type: string
          isCorrupt:
            type: boolean
  BaseSnapshotSummary:
    type: object
    required:
      - id
      - date
      - isOnDemandSnapshot
      - replicationLocationIds
      - slaId
      - slaName
    properties:
      id:
        type: string
      date:
        type: string
        format: date-time
      expirationDate:
        type: string
        format: date-time
      sourceObjectType:
        type: string
      isOnDemandSnapshot:
        type: boolean
      cloudState:
        type: integer
        format: int64
        description: Integer value that represents the archival state of a snapshot. 0 means the snapshot is not archived. 2 means the snapshot is archived. 3 means the snapshot is downloaded from the archival location. 4 means the snapshot is in the process of being downloaded from the archival location. 6 means the snapshot is stored locally and at the archival location.
      consistencyLevel:
        type: string
      indexState:
        type: integer
        format: int64
        description: Integer value representing the state of the indexing job for a snapshot. 0 means that the indexing has not begun or is in progress. 1 means indexing completed successfully. 2 means that the indexer failed to process this snapshot.
      replicationLocationIds:
        type: array
        items:
          type: string
      archivalLocationIds:
        type: array
        items:
          type: string
      slaId:
        type: string
      slaName:
        type: string
  BlackoutWindow:
    type: object
    required:
      - startTime
    properties:
      startTime:
        type: string
      endTime:
        type: string
  BlackoutWindowResponseInfo:
    type: object
    required:
      - blackoutWindowStatus
      - blackoutWindows
    properties:
      blackoutWindowStatus:
        $ref: '#/definitions/BlackoutWindowStatus'
      blackoutWindows:
        $ref: '#/definitions/BlackoutWindows'
  BlackoutWindowStatus:
    type: object
    required:
      - isGlobalBlackoutActive
    properties:
      isGlobalBlackoutActive:
        type: boolean
      isSnappableBlackoutActive:
        type: boolean
  BlackoutWindows:
    type: object
    required:
      - globalBlackoutWindows
    properties:
      globalBlackoutWindows:
        type: array
        items:
          $ref: '#/definitions/BlackoutWindow'
      snappableBlackoutWindows:
        type: array
        items:
          $ref: '#/definitions/BlackoutWindow'
  BrowseResponse:
    type: object
    properties:
      filename:
        type: string
        description: The name of the file
      path:
        type: string
        description: The complete path of the file
      lastModified:
        type: string
      size:
        type: integer
        format: int64
      fileMode:
        type: string
        description: 'The type of file, either a regular file or a directory'
      statusMessage:
        type: string
        description: Description about the status
  BrowseResponseListResponse:
    type: object
    properties:
      hasMore:
        type: boolean
        description: If there is more
      data:
        type: array
        description: List of matching objects
        items:
          $ref: '#/definitions/BrowseResponse'
      total:
        type: integer
        description: Total list responses
  CloudInstantiationSpec:
    type: object
    required:
      - imageRetentionInSeconds
    properties:
      imageRetentionInSeconds:
        type: integer
        format: int64
        description: |
          Specifies the number of seconds to retain an image file that is generated for a snappable. Setting this to -1 disables cloud instantiation for the snappable.
  ClusterApiVersion:
    type: object
    required:
      - apiVersion
    properties:
      apiVersion:
        type: string
        description: REST API version
  ClusterGeolocation:
    type: object
    required:
      - address
    properties:
      address:
        type: string
        description: Address information for mapping the location of the Rubrik cluster. This value is used to provide a location for the Rubrik cluster on the dashboard map.
  ClusterInfo:
    type: object
    required:
      - id
      - version
      - apiVersion
      - name
      - timezone
      - acceptedEulaVersion
      - latestEulaVersion
    properties:
      id:
        type: string
        description: ID of the Rubrik cluster
      version:
        type: string
        description: Rubrik cluster software version
      apiVersion:
        type: string
        description: REST API version
      name:
        type: string
        description: Name of the cluster
      timezone:
        $ref: '#/definitions/ClusterTimezone'
        description: Cluster time zone
      geolocation:
        $ref: '#/definitions/ClusterGeolocation'
        description: Cluster geolocation
      acceptedEulaVersion:
        type: string
        description: Version of the EULA accepted by admin.
      latestEulaVersion:
        type: string
        description: Latest version of the EULA that must be accepted by admin.
  ClusterTimezone:
    type: object
    required:
      - timezone
    properties:
      timezone:
        type: string
        description: Cluster time zone.
        enum:
          - Africa/Johannesburg
          - Africa/Lagos
          - Africa/Nairobi
          - America/Anchorage
          - America/Araguaina
          - America/Barbados
          - America/Chicago
          - America/Denver
          - America/Los_Angeles
          - America/Mexico_City
          - America/New_York
          - America/Noronha
          - America/Phoenix
          - America/Toronto
          - America/Vancouver
          - Asia/Bangkok
          - Asia/Dhaka
          - Asia/Dubai
          - Asia/Hong_Kong
          - Asia/Karachi
          - Asia/Kathmandu
          - Asia/Kolkata
          - Asia/Magadan
          - Asia/Singapore
          - Asia/Tokyo
          - Atlantic/Cape_Verde
          - Australia/Perth
          - Australia/Sydney
          - Europe/Amsterdam
          - Europe/Athens
          - Europe/London
          - Europe/Moscow
          - Pacific/Auckland
          - Pacific/Honolulu
          - Pacific/Midway
          - UTC
  ClusterUpdate:
    type: object
    properties:
      name:
        type: string
        description: New name for a Rubrik cluster
      timezone:
        $ref: '#/definitions/ClusterTimezone'
        description: New time zone for a Rubrik cluster
      geolocation:
        $ref: '#/definitions/ClusterGeolocation'
        description: New geolocation for a Rubrik cluster
      acceptedEulaVersion:
        type: string
        description: Version of the EULA accepted by admin. By modifying this attribute you agree to the specific version of the EULA. You can view the EULA from UI.
  ClusterVersion:
    type: object
    required:
      - version
    properties:
      version:
        type: string
        description: Rubrik cluster software version
  DataCenterSummary:
    allOf:
      - $ref: '#/definitions/SlaAssignable'
      - type: object
        required:
          - effectiveSlaDomainId
          - effectiveSlaDomainName
        properties:
          vcenterId:
            type: string
          effectiveSlaDomainId:
            type: string
          effectiveSlaDomainName:
            type: string
          effectiveSlaSourceObjectId:
            type: string
            description: ID of the object from which the effective SLA domain is inherited
          effectiveSlaSourceObjectName:
            type: string
            description: Name of the object from which the effective SLA domain is inherited
  DataStoreSummary:
    type: object
    required:
      - id
    properties:
      id:
        type: string
      name:
        type: string
      capacity:
        type: integer
        format: int64
      dataStoreType:
        type: string
      dataCenterName:
        type: string
      isLocal:
        type: boolean
  DownloadFileJobConfig:
    type: object
    required:
      - path
    properties:
      path:
        type: string
        description: Absolute file path
  ExampleEnum:
    type: string
    description: Example enum
    enum:
      - value1
      - value2
  ExportMssqlDbJobConfig:
    type: object
    required:
      - targetInstanceId
      - targetDatabaseName
      - recoveryPoint
    properties:
      recoveryPoint:
        $ref: '#/definitions/MssqlRecoveryPoint'
      targetInstanceId:
        type: string
        description: ID of the Microsoft SQL instance for the new database.
      targetDatabaseName:
        type: string
        description: Name of the new database.
      targetDataFilePath:
        type: string
        description: The target path to store all data files.
      targetLogFilePath:
        type: string
        description: The target path to store all log files.
      targetFilePaths:
        type: array
        description: One target path for each individual database file. Overrides targetDataFilePath and targetLogFilePath.
        items:
          $ref: '#/definitions/MssqlDbFileExportPath'
      finishRecovery:
        type: boolean
        description: 'A Boolean value that determines the recovery option to use during database restore. When this value is ''true'', the database is restored using the RECOVERY option and is fully functional at the end of the restore operation. When this value is ''false'', the database is restored using the NORECOVERY option and remains in recovering mode at the end of the restore operation.'
      maxDataStreams:
        type: integer
        format: int32
        description: Maximum number of parallel data streams that can be used to copy data to the target system
  ExportSnapshotJobConfig:
    allOf:
      - $ref: '#/definitions/MountExportSnapshotJobCommonOptions'
      - type: object
        required:
          - datastoreId
        properties:
          hostId:
            type: string
            description: ID of the ESXi host to export the new virtual machine to.
          datastoreId:
            type: string
            description: ID of the datastore to assign to the exported virtual machine.
          unregisterVm:
            type: boolean
            description: Determines whether the new virtual machine created from a snapshot is registered with the vCenter Server. Use 'true' to remove the registration from vCenter Server. Use 'false' to keep the registration with the vCenter Server. The default is 'false'.
  FileVersion:
    type: object
    properties:
      lastModified:
        type: string
      size:
        type: integer
        format: int64
      snapshotId:
        type: string
        description: The snapshot this file belongs to
      fileMode:
        type: string
        description: 'The type of file, either a regular file or a directory'
      source:
        type: string
        description: 'The location where the file is stored, either in the cloud or locally'
  FilesetCreate:
    allOf:
      - type: object
        required:
          - templateId
        properties:
          hostId:
            type: string
          shareId:
            type: string
          templateId:
            type: string
  FilesetDetail:
    allOf:
      - $ref: '#/definitions/FilesetUpdate'
      - $ref: '#/definitions/FilesetSummary'
      - type: object
        required:
          - snapshotCount
        properties:
          protectionDate:
            type: string
            format: date-time
          snapshotCount:
            type: integer
            format: int32
          archivedSnapshotCount:
            type: integer
            format: int32
          snapshots:
            type: array
            items:
              $ref: '#/definitions/FilesetSnapshotSummary'
          localStorage:
            type: integer
            format: int64
          archiveStorage:
            type: integer
            format: int64
          preBackupScript:
            type: string
            description: Script to run before backup of this Fileset starts
          postBackupScript:
            type: string
            description: Script to run after backup of this Fileset ends
          backupScriptTimeout:
            type: integer
            format: int64
            description: Number of seconds after which the script is killed if it has not completed execution
          backupScriptErrorHandling:
            type: string
            description: 'Action taken if script fails. Options are "abort", "continue"'
  FilesetDownloadFileJobConfig:
    type: object
    required:
      - sourceDir
    properties:
      sourceDir:
        type: string
        description: Source directory to download from
  FilesetExportFileJobConfig:
    allOf:
      - $ref: '#/definitions/FilesetRestoreFileJobConfig'
      - type: object
        required:
          - hostId
        properties:
          hostId:
            type: string
            description: Host ID
          shareId:
            type: string
            description: Network share ID
  FilesetOptions:
    type: object
    properties:
      allowBackupNetworkMounts:
        type: boolean
        description: Include or exclude locally-mounted remote file systems from backups.
      allowBackupHiddenFoldersInNetworkMounts:
        type: boolean
        description: Include or exclude hidden folders inside locally-mounted remote file systems from backups.
      useWindowsVss:
        type: boolean
        description: Use VSS during Windows backups.
  FilesetRestoreFileJobConfig:
    type: object
    required:
      - sourceDir
      - destinationDir
    properties:
      sourceDir:
        type: string
        description: Source directory to restore from
      destinationDir:
        type: string
        description: Destination directory
      ignoreErrors:
        type: boolean
        description: Optional field to determine if we should ignore single error during restore. Default value is false
  FilesetSnapshotDetail:
    allOf:
      - $ref: '#/definitions/FilesetSnapshotSummary'
      - type: object
        required:
          - lastModified
          - size
        properties:
          lastModified:
            type: string
          size:
            type: integer
            format: int64
          verbose:
            $ref: '#/definitions/FilesetSnapshotVerbose'
  FilesetSnapshotSummary:
    allOf:
      - $ref: '#/definitions/BaseSnapshotSummary'
      - type: object
        required:
          - filesetName
        properties:
          filesetName:
            type: string
          fileCount:
            type: integer
            format: int64
  FilesetSnapshotVerbose:
    type: object
    required:
      - hasFingerprint
      - partitionPaths
    properties:
      hasFingerprint:
        type: boolean
        description: Whether or not the fileset snapshot has fingerprint info
      partitionPaths:
        type: array
        items:
          type: string
        description: List a partition paths for the fileset snapshot
  FilesetSummary:
    allOf:
      - $ref: '#/definitions/FilesetOptions'
      - $ref: '#/definitions/SlaAssignable'
      - type: object
        required:
          - hostName
          - includes
          - isRelic
          - templateId
          - templateName
        properties:
          hostId:
            type: string
          shareId:
            type: string
          hostName:
            type: string
          templateId:
            type: string
          templateName:
            type: string
          operatingSystemType:
            type: string
          effectiveSlaDomainId:
            type: string
            description: The ID of the effective SLA domain for this Fileset
          effectiveSlaDomainName:
            type: string
            description: The name of the effective SLA domain for this Fileset
          includes:
            type: array
            items:
              type: string
          excludes:
            type: array
            items:
              type: string
          exceptions:
            type: array
            items:
              type: string
          isRelic:
            type: boolean
  FilesetSummaryListResponse:
    type: object
    properties:
      hasMore:
        type: boolean
        description: If there is more
      data:
        type: array
        description: List of matching objects
        items:
          $ref: '#/definitions/FilesetSummary'
      total:
        type: integer
        description: Total list responses
  FilesetTemplateCreate:
    allOf:
      - $ref: '#/definitions/FilesetOptions'
      - type: object
        required:
          - name
          - includes
        properties:
          name:
            type: string
          includes:
            type: array
            items:
              type: string
          excludes:
            type: array
            items:
              type: string
          exceptions:
            type: array
            items:
              type: string
          operatingSystemType:
            type: string
            description: Operating system type of filesets created by template.
            enum:
              - UnixLike
              - Windows
          shareType:
            type: string
            enum:
              - NFS
              - SMB
          preBackupScript:
            type: string
            description: Script to run before backup of this fileset starts
          postBackupScript:
            type: string
            description: Script to run after backup of this fileset ends
          backupScriptTimeout:
            type: integer
            format: int64
            description: Number of seconds after which the script is killed if it has not completed execution
          backupScriptErrorHandling:
            type: string
            description: 'Action taken if script fails. Options are "abort", "continue"'
  FilesetTemplateDetail:
    allOf:
      - $ref: '#/definitions/FilesetTemplateCreate'
      - type: object
        required:
          - id
          - primaryClusterId
        properties:
          id:
            type: string
          primaryClusterId:
            type: string
          isArchived:
            type: boolean
          hostCount:
            type: integer
            format: int32
            description: Number of hosts where this template has been applied
          shareCount:
            type: integer
            format: int32
            description: Number of shares where this template has been applied
  FilesetTemplateDetailListResponse:
    type: object
    properties:
      hasMore:
        type: boolean
        description: If there is more
      data:
        type: array
        description: List of matching objects
        items:
          $ref: '#/definitions/FilesetTemplateDetail'
      total:
        type: integer
        description: Total list responses
  FilesetTemplatePatch:
    allOf:
      - $ref: '#/definitions/FilesetOptions'
      - type: object
        required:
          - id
        properties:
          id:
            type: string
          name:
            type: string
          includes:
            type: array
            items:
              type: string
          excludes:
            type: array
            items:
              type: string
          exceptions:
            type: array
            items:
              type: string
          operatingSystemType:
            type: string
            description: Operating system type of filesets created by template
            enum:
              - UnixLike
              - Windows
          shareType:
            type: string
            enum:
              - NFS
              - SMB
          preBackupScript:
            type: string
            description: Script to run before backup of this Fileset starts
          postBackupScript:
            type: string
            description: Script to run after backup of this Fileset ends
          backupScriptTimeout:
            type: integer
            format: int64
            description: Number of seconds after which the script is killed if it has not completed execution
          backupScriptErrorHandling:
            type: string
            description: 'Action taken if script fails. Options are "abort", "continue"'
  FilesetUpdate:
    type: object
    properties:
      configuredSlaDomainId:
        type: string
        description: Assign Fileset to SLA domain
  HostDetail:
    allOf:
      - $ref: '#/definitions/HostSummary'
      - type: object
        required:
          - isRelic
        properties:
          agentId:
            type: string
          compressionEnabled:
            type: boolean
          isRelic:
            type: boolean
            description: 'A relic host is deleted, but still may have snapshots associated with its children (e.g. Fileset)'
  HostRegister:
    type: object
    required:
      - hostname
    properties:
      hostname:
        type: string
      hasAgent:
        type: boolean
      organizationId:
        type: string
        description: The ID of the organization to which the host is assigned.
      nasConfig:
        $ref: '#/definitions/NasConfig'
  HostSummary:
    type: object
    required:
      - id
      - hostname
    properties:
      id:
        type: string
      hostname:
        type: string
      primaryClusterId:
        type: string
      operatingSystem:
        type: string
      operatingSystemType:
        type: string
      status:
        type: string
      nasBaseConfig:
        $ref: '#/definitions/NasBaseConfig'
      organizationId:
        type: string
        description: The ID of the organization to which the host is assigned (set by Envoy).
      organizationName:
        type: string
        description: The name of the organization to which the host is assigned (set by Envoy).
  HostSummaryListResponse:
    type: object
    properties:
      hasMore:
        type: boolean
        description: If there is more
      data:
        type: array
        description: List of matching objects
        items:
          $ref: '#/definitions/HostSummary'
      total:
        type: integer
        description: Total list responses
  HostUpdate:
    type: object
    properties:
      hostname:
        type: string
      compressionEnabled:
        type: boolean
      nasConfig:
        $ref: '#/definitions/NasConfig'
  InstantRecoveryJobConfig:
    allOf:
      - $ref: '#/definitions/MountExportSnapshotJobCommonOptions'
      - type: object
        properties:
          hostId:
            type: string
            description: ID of the ESXi host to use for Instant Recovery
          preserveMoid:
            type: boolean
            default: false
            description: Determines whether to preserve the moid of the source virtual machine in a restore operation. Use 'true' to keep the moid of the source. Use 'false' to assign a new moid. The default is 'false'.
          vlan:
            type: integer
            format: int32
            description: VLAN ID for the VLAN ESXi host prefer to use for mounting the datastore.
  LdapServiceInfo:
    type: object
    required:
      - bindUserName
      - bindUserPassword
    properties:
      dynamicDnsName:
        type: string
        description: Dynamic DNS name for locating authentication servers.
      bindUserName:
        type: string
        description: The name of the user that searches the authentication server for other users.
      bindUserPassword:
        type: string
        x-secret: true
        description: Password for the bind user.
      baseDn:
        type: string
        x-hidden: true
        description: The path to the directory where searches for users begin.
      authServers:
        type: array
        items:
          type: string
        description: An ordered list of authentication servers. Servers on this list have priority over servers discovered using dynamic DNS.
      name:
        type: string
        description: Human friendly name.
  LdapServiceInfoUpdate:
    type: object
    properties:
      authServers:
        description: An ordered list of authentication servers. Servers on this list have priority over servers discovered using dynamic DNS.
        type: array
        items:
          type: string
      dynamicDnsName:
        description: Dynamic DNS name for locating authentication servers.
        type: string
      baseDn:
        description: The path to the directory where searches for users begin.
        x-hidden: true
        type: string
      bindUserName:
        description: The name of the user that searches the authentication server for other users.
        type: string
      bindUserPassword:
        description: Password for the bind user.
        type: string
        x-secret: true
      name:
        description: Human friendly name.
        type: string
  LdapServiceSummary:
    type: object
    required:
      - id
      - domainType
      - name
    properties:
      id:
        type: string
        description: ID of this authentication domain.
      domainType:
        type: string
        description: 'Domain type, for example local or AD.'
      name:
        type: string
        description: Domain name.
      serviceAccount:
        type: string
        description: Computer account name associated with this cluster.
      initialRefreshStatus:
        x-hidden: true
        type: string
        description: Status message from the initial refresh.
  LdapServiceSummaryListResponse:
    type: object
    properties:
      hasMore:
        type: boolean
        description: If there is more
      data:
        type: array
        description: List of matching objects
        items:
          $ref: '#/definitions/LdapServiceSummary'
      total:
        type: integer
        description: Total list responses
  Link:
    type: object
    required:
      - href
      - rel
    properties:
      href:
        type: string
        description: The link's destination.
      rel:
        type: string
        description: The relation of this link's destination to the current resource.
  LsnRecoveryPoint:
    type: object
    required:
      - lsn
    properties:
      lsn:
        type: string
        description: LSN of the recovery point.
      recoveryForkGuid:
        type: string
        description: 'Recovery fork GUID of the recovery point. If not provided, the recovery fork GUID of the latest snapshot is used.'
  MissedSnapshot:
    type: object
    required:
      - archivalLocationType
      - missedSnapshotTime
    properties:
      archivalLocationType:
        type: array
        items:
          type: string
      missedSnapshotTime:
        type: string
        format: date-time
  MissedSnapshotListResponse:
    type: object
    properties:
      hasMore:
        type: boolean
        description: If there is more
      data:
        type: array
        description: List of matching objects
        items:
          $ref: '#/definitions/MissedSnapshot'
      total:
        type: integer
        description: Total list responses
  MountExportSnapshotJobCommonOptions:
    type: object
    properties:
      vmName:
        type: string
        description: Name of the new VM created by mount or export
      disableNetwork:
        type: boolean
        description: Sets the state of the network interfaces when the virtual machine is mounted or exported. Use 'false' to enable the network interfaces. Use 'true' to disable the network interfaces. Disabling the interfaces can prevent IP conflicts.
      removeNetworkDevices:
        type: boolean
        description: Determines whether to remove the network interfaces from the mounted or exported virtual machine. Set to 'true' to remove all network interfaces. The default value is 'false'.
      powerOn:
        type: boolean
        description: Determines whether the virtual machine should be powered on after mount or export. Set to 'true' to power on the virtual machine. Set to 'false' to mount or export the virtual machine but not power it on. The default is 'true'.
      keepMacAddresses:
        type: boolean
        description: 'Determines whether the MAC addresses of the network interfaces on the source virtual machine are assigned to the new virtual machine. Set to ''true'' to assign the original MAC addresses to the new virtual machine. Set to ''false'' to assign new MAC addresses. The default is ''false''. When removeNetworkDevices is set to true, this property is ignored.'
  MountMssqlDbConfig:
    type: object
    required:
      - recoveryPoint
      - mountedDatabaseName
    properties:
      recoveryPoint:
        $ref: '#/definitions/MssqlRecoveryPoint'
      mountedDatabaseName:
        type: string
        description: Name to assign to the mounted database.
      targetInstanceId:
        type: string
        description: 'ID of the SQL Server instance to mount the database on. For availability source databases, this must be specified. When unspecified for non-availability source databases, the source SQL Server instance is used.'
  MountSnapshotJobConfigV1:
    allOf:
      - $ref: '#/definitions/MountExportSnapshotJobCommonOptions'
      - type: object
        properties:
          hostId:
            type: string
            description: ID of the ESXi host to mount the new virtual machine on.
          dataStoreName:
            type: string
            description: Name of the host NAS datastore to use with the new virtual machine. The Rubrik cluster creates a new datastore on the host using the provided name.
          vlan:
            type: integer
            format: int32
            description: VLAN ID for the VLAN ESXi host prefer to use for mounting the datastore.
          createDatastoreOnly:
            type: boolean
            description: 'The job creates a datastore that contains the VMDK, but does not create the corresponding virtual machine.'
  MssqlBackupJobConfig:
    allOf:
      - $ref: '#/definitions/BaseOnDemandSnapshotConfig'
      - type: object
        properties:
          forceFullSnapshot:
            type: boolean
            description: Whether to force a full snapshot or an incremental.
  MssqlDatabaseFileType:
    type: string
    description: File type of a database file.
    enum:
      - Data
      - Log
      - Filestream
  MssqlDbDetail:
    allOf:
      - $ref: '#/definitions/MssqlDbSummary'
      - type: object
        required:
          - snapshotCount
        properties:
          snapshotCount:
            type: integer
            format: int32
          isLocal:
            type: boolean
          isStandby:
            type: boolean
            description: 'This field is deprecated. Use the isStandby field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.'
          latestRecoveryPoint:
            type: string
            format: date
          oldestRecoveryPoint:
            type: string
            format: date
          protectionDate:
            type: string
            format: date
          recoveryForkGuid:
            type: string
            description: 'This field is deprecated. Use the recoveryForkGuid field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.'
          maxDataStreams:
            type: integer
            format: int32
          localStorage:
            type: integer
            format: int64
          archiveStorage:
            type: integer
            format: int64
          preBackupScript:
            $ref: '#/definitions/MssqlScriptDetail'
          postBackupScript:
            $ref: '#/definitions/MssqlScriptDetail'
  MssqlDbFileExportPath:
    type: object
    required:
      - logicalName
      - exportPath
    properties:
      logicalName:
        type: string
        description: Logical name of the database file.
      exportPath:
        type: string
        description: The target path for the database file.
      newLogicalName:
        type: string
        description: New logical name for the database file.
      newFilename:
        type: string
        description: New filename for the database file.
  MssqlDbReplica:
    type: object
    required:
      - instanceId
      - instanceName
      - state
      - hasPermissions
      - isStandby
      - recoveryModel
      - isArchived
      - rootProperties
    properties:
      instanceId:
        type: string
        description: ID of the SQL Server instance managing the replica.
      instanceName:
        type: string
        description: Name of the SQL Server instance managing the replica.
      recoveryModel:
        type: string
        description: The recovery model of the replica.
        enum:
          - SIMPLE
          - FULL
          - BULK_LOGGED
      state:
        type: string
        description: The state of the replica.
      hasPermissions:
        type: boolean
        description: '`True` when the Rubrik cluster has sufficient permissions to perform all necessary operations.'
      isStandby:
        type: boolean
        description: '`True` when the replica is in standby mode.'
      recoveryForkGuid:
        type: string
        description: The recovery fork GUID of the replica.
      isArchived:
        type: boolean
        description: '`True` when the replica is archived.'
      availabilityInfo:
        $ref: '#/definitions/MssqlDbReplicaAvailabilityInfo'
        description: 'For an availability database, provides additional information about a database replica.'
      rootProperties:
        $ref: '#/definitions/MssqlRootProperties'
  MssqlDbReplicaAvailabilityInfo:
    type: object
    required:
      - role
    properties:
      role:
        type: string
        description: 'Role of the availability database replica. Possible values are: `PRIMARY`, `SECONDARY`, or `RESOLVING`.'
        enum:
          - PRIMARY
          - SECONDARY
          - RESOLVING
  MssqlDbSnapshotDetail:
    allOf:
      - $ref: '#/definitions/BaseSnapshotDetail'
      - type: object
        required:
          - canLiveMount
        properties:
          database:
            $ref: '#/definitions/MssqlDbSummary'
          canLiveMount:
            type: boolean
  MssqlDbSnapshotSummary:
    allOf:
      - $ref: '#/definitions/BaseSnapshotSummary'
      - type: object
        required:
          - databaseName
          - canLiveMount
        properties:
          databaseName:
            type: string
          canLiveMount:
            type: boolean
  MssqlDbSnapshotSummaryListResponse:
    type: object
    properties:
      hasMore:
        type: boolean
        description: If there is more
      data:
        type: array
        description: List of matching objects
        items:
          $ref: '#/definitions/MssqlDbSnapshotSummary'
      total:
        type: integer
        description: Total list responses
  MssqlDbSummary:
    allOf:
      - $ref: '#/definitions/Snappable'
      - type: object
        required:
          - rootProperties
          - id
          - isRelic
          - copyOnly
          - logBackupFrequencyInSeconds
          - logBackupRetentionHours
          - name
          - primaryClusterId
          - isLiveMount
          - isLogShippingSecondary
          - isInAvailabilityGroup
          - replicas
        properties:
          rootProperties:
            $ref: '#/definitions/MssqlRootProperties'
          id:
            type: string
          instanceId:
            type: string
            description: 'This field is deprecated. Use the instanceId field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.'
          instanceName:
            type: string
            description: 'This field is deprecated. Use the instanceName field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.'
          isRelic:
            type: boolean
          primaryClusterId:
            type: string
          copyOnly:
            type: boolean
            description: 'Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.'
          logBackupFrequencyInSeconds:
            type: integer
            format: int32
          logBackupRetentionHours:
            type: integer
            format: int32
            description: Hours to keep a log backup. A value of -1 indicates that a log will only expire when the preceding snapshots have expired.
          name:
            type: string
          isLiveMount:
            type: boolean
            description: Boolean value that specifies whether a database object is a Live Mount. Value is 'true' when the database object is a Live Mount.
          isLogShippingSecondary:
            type: boolean
            description: Boolean value that specifies whether a database object represents a secondary database. Value is 'true' when the database object represents a secondary database in a log shipping configuration.
          recoveryModel:
            type: string
            description: 'This field is deprecated. Use the recoveryModel field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.'
            enum:
              - SIMPLE
              - FULL
              - BULK_LOGGED
          state:
            type: string
            description: 'This field is deprecated. Use the state field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.'
          hasPermissions:
            type: boolean
            description: 'This field is deprecated. Use the hasPermissions field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.'
          isInAvailabilityGroup:
            type: boolean
          replicas:
            type: array
            description: 'List of replicas of this database. An availability database may have multiple replicas, while other databases will have only one replica.'
            items:
              $ref: '#/definitions/MssqlDbReplica'
          availabilityGroupId:
            type: string
            description: 'For an availability database, the ID of the availability group that the database belongs to.'
  MssqlDbSummaryListResponse:
    type: object
    properties:
      hasMore:
        type: boolean
        description: If there is more
      data:
        type: array
        description: List of matching objects
        items:
          $ref: '#/definitions/MssqlDbSummary'
      total:
        type: integer
        description: Total list responses
  MssqlDbUpdate:
    allOf:
      - $ref: '#/definitions/MssqlNonSlaProperties'
      - type: object
        properties:
          maxDataStreams:
            type: integer
            format: int32
            description: Maximum number of parallel data streams that can be used to backup the database.
          configuredSlaDomainId:
            type: string
            description: Assign DB to SLA Domain
          preBackupScript:
            $ref: '#/definitions/MssqlScriptDetail'
          postBackupScript:
            $ref: '#/definitions/MssqlScriptDetail'
  MssqlInstanceDetail:
    allOf:
      - $ref: '#/definitions/MssqlInstanceSummary'
  MssqlInstanceSummary:
    allOf:
      - $ref: '#/definitions/MssqlNonSlaProperties'
      - type: object
        required:
          - id
          - primaryClusterId
          - rootProperties
        properties:
          id:
            type: string
          internalTimestamp:
            type: integer
            format: int64
          name:
            type: string
          primaryClusterId:
            type: string
          rootProperties:
            $ref: '#/definitions/MssqlRootProperties'
          clusterInstanceAddress:
            type: string
            description: 'The address of the instance in a Windows server failover cluster, populated only if it belongs to one.'
          protectionDate:
            type: string
            format: date
          version:
            type: string
          configuredSlaDomainId:
            type: string
            description: SLA Domain ID assigned to instance
          configuredSlaDomainName:
            type: string
            description: SLA Domain name assigned to instance
  MssqlInstanceSummaryListResponse:
    type: object
    properties:
      hasMore:
        type: boolean
        description: If there is more
      data:
        type: array
        description: List of matching objects
        items:
          $ref: '#/definitions/MssqlInstanceSummary'
      total:
        type: integer
        description: Total list responses
  MssqlInstanceUpdate:
    allOf:
      - $ref: '#/definitions/MssqlNonSlaProperties'
      - type: object
        properties:
          clusterInstanceAddress:
            type: string
            description: Address of the instance in a Windows server failover cluster.
          configuredSlaDomainId:
            type: string
            description: ID of the SLA Domain assigned to the instance
  MssqlLogShippingCreateConfig:
    allOf:
      - $ref: '#/definitions/MssqlLogShippingTargetStateOptions'
      - type: object
        required:
          - targetInstanceId
          - targetDatabaseName
        properties:
          maxDataStreams:
            type: integer
            format: int32
            description: Maximum number of parallel data streams that can be used to copy data to the target system.
          targetDatabaseName:
            type: string
            description: The name of the secondary database.
          targetDataFilePath:
            type: string
            description: The path to the default target location for data file storage.
          targetFilePaths:
            type: array
            description: Array of database file storage paths. Each path is the target storage location for a database file. Values in this array override the values in targetDataFilePath and targetLogFilePath for the specified database files.
            items:
              $ref: '#/definitions/MssqlDbFileExportPath'
          targetInstanceId:
            type: string
            description: The ID of the SQL Server instance that hosts the secondary database.
          targetLogFilePath:
            type: string
            description: The path to the location of the log files.
  MssqlLogShippingDetail:
    allOf:
      - $ref: '#/definitions/MssqlLogShippingSummary'
      - type: object
        required:
          - links
        properties:
          shouldDisconnectStandbyUsers:
            type: boolean
            description: 'Whether to automatically disconnect users from a secondary database in Standby mode when a restore operation is performed. If this value is false and users remain connected, then any scheduled restore operations will fail. This is only returned when the secondary database is in Standby mode.'
          links:
            $ref: '#/definitions/MssqlLogShippingLinks'
  MssqlLogShippingLinks:
    type: object
    required:
      - primaryDatabase
      - secondaryInstance
    properties:
      primaryDatabase:
        $ref: '#/definitions/Link'
      secondaryInstance:
        $ref: '#/definitions/Link'
      secondaryDatabase:
        $ref: '#/definitions/Link'
      seedRequest:
        $ref: '#/definitions/Link'
  MssqlLogShippingListSortAttribute:
    type: string
    description: The field by which to sort when enumerating log shipping entries
    enum:
      - secondaryDatabaseName
      - primaryDatabaseName
      - lastAppliedPoint
      - location
  MssqlLogShippingOkState:
    type: string
    description: Secondary database states for log shipping configurations which have a status of OK.
    enum:
      - RESTORING
      - STANDBY
  MssqlLogShippingReseedConfig:
    allOf:
      - $ref: '#/definitions/MssqlLogShippingTargetStateOptions'
  MssqlLogShippingStatus:
    type: string
    description: Status of a log shipping configuration.
    enum:
      - OK
      - Broken
      - Initializing
      - Stale
  MssqlLogShippingStatusInfo:
    type: object
    required:
      - status
      - message
    properties:
      status:
        $ref: '#/definitions/MssqlLogShippingStatus'
      message:
        type: string
        description: Detailed message describing the current status of the log shipping configuration.
  MssqlLogShippingSummary:
    type: object
    required:
      - id
      - location
      - primaryDatabaseId
      - primaryDatabaseName
      - secondaryDatabaseName
      - status
    properties:
      id:
        type: string
        description: The ID assigned to the log shipping configuration object.
      lastAppliedPoint:
        type: string
        format: date-time
        description: The timestamp of the last transaction that was applied using the specified log shipping configuration object.
      location:
        type: string
        description: The location of a specified secondary database in the format "host/instance".
      primaryDatabaseId:
        type: string
        description: The ID of the primary database.
      primaryDatabaseName:
        type: string
        description: The name of the primary database.
      secondaryDatabaseName:
        type: string
        description: The name of the secondary database.
      secondaryDatabaseId:
        type: string
        description: The ID of the secondary database.
      state:
        type: string
        description: The current state of the secondary database.
      lagTime:
        type: integer
        format: int64
        description: The number of milliseconds between the time the latest backup was applied to the secondary database and when that backup was taken on the primary database.
      status:
        $ref: '#/definitions/MssqlLogShippingStatusInfo'
  MssqlLogShippingSummaryListResponse:
    type: object
    properties:
      hasMore:
        type: boolean
        description: If there is more
      data:
        type: array
        description: List of matching objects
        items:
          $ref: '#/definitions/MssqlLogShippingSummary'
      total:
        type: integer
        description: Total list responses
  MssqlLogShippingTargetStateOptions:
    type: object
    required:
      - state
    properties:
      state:
        $ref: '#/definitions/MssqlLogShippingOkState'
      shouldDisconnectStandbyUsers:
        type: boolean
        description: 'Whether to automatically disconnect users from a secondary database in Standby mode when a restore operation is performed. If this value is false and users remain connected, then any scheduled restore operations will fail. If the "state" field is `RESTORING`, this value can be omitted and will otherwise be ignored.'
  MssqlLogShippingUpdate:
    allOf:
      - $ref: '#/definitions/MssqlLogShippingTargetStateOptions'
  MssqlMissedRecoverableRange:
    type: object
    required:
      - beginTime
      - endTime
      - errorType
      - description
    properties:
      beginTime:
        type: string
        format: date-time
      endTime:
        type: string
        format: date-time
      errorType:
        type: string
      description:
        type: string
      firstError:
        $ref: '#/definitions/MssqlMissedRecoverableRangeError'
      lastError:
        $ref: '#/definitions/MssqlMissedRecoverableRangeError'
  MssqlMissedRecoverableRangeError:
    type: object
    required:
      - time
    properties:
      time:
        type: string
        format: date-time
      eventSeriesId:
        type: string
      eventMessage:
        type: string
  MssqlMissedRecoverableRangeListResponse:
    type: object
    properties:
      hasMore:
        type: boolean
        description: If there is more
      data:
        type: array
        description: List of matching objects
        items:
          $ref: '#/definitions/MssqlMissedRecoverableRange'
      total:
        type: integer
        description: Total list responses
  MssqlMountDetail:
    allOf:
      - $ref: '#/definitions/MssqlMountSummary'
      - type: object
        required:
          - links
        properties:
          mountRequestId:
            type: string
            description: ID of the async request object for the mount task.
          unmountRequestId:
            type: string
            description: ID of the async request object for the delete task.
          links:
            $ref: '#/definitions/MssqlMountLinks'
  MssqlMountLinks:
    type: object
    required:
      - sourceDatabase
      - targetInstance
    properties:
      sourceDatabase:
        $ref: '#/definitions/Link'
      targetInstance:
        $ref: '#/definitions/Link'
      mountedDatabase:
        $ref: '#/definitions/Link'
      mountRequest:
        $ref: '#/definitions/Link'
      unmountRequest:
        $ref: '#/definitions/Link'
  MssqlMountSummary:
    type: object
    required:
      - id
      - sourceDatabaseId
      - sourceDatabaseName
      - sourceRecoveryPoint
      - targetInstanceId
      - targetRootName
      - creationDate
      - status
      - mountedDatabaseName
    properties:
      id:
        type: string
      sourceDatabaseId:
        type: string
      sourceDatabaseName:
        type: string
      sourceRecoveryPoint:
        $ref: '#/definitions/MssqlRecoveryPoint'
      targetInstanceId:
        type: string
      targetRootName:
        type: string
        description: Name of the top-level object on which the target instance resides.
      creationDate:
        type: string
        format: date-time
        description: The date this mount was created.
      ownerId:
        type: string
        description: ID of the user who created this mount.
      ownerName:
        type: string
        description: Name of the user who created this mount.
      status:
        type: string
        description: The status of this mount. The status is **_Available_** when the database is successfully mounted and ready to use.
        enum:
          - Available
          - Unavailable
          - Mounting
          - Unmounting
      mountedDatabaseId:
        type: string
        description: 'ID for the mounted SQL Server database, once it is available.'
      mountedDatabaseName:
        type: string
        description: Name for the mounted SQL Server database.
  MssqlMountSummaryListResponse:
    type: object
    properties:
      hasMore:
        type: boolean
        description: If there is more
      data:
        type: array
        description: List of matching objects
        items:
          $ref: '#/definitions/MssqlMountSummary'
      total:
        type: integer
        description: Total list responses
  MssqlNonSlaProperties:
    type: object
    properties:
      logBackupFrequencyInSeconds:
        type: integer
        format: int32
        description: Seconds between two log backups. A value of 0 disables log backup.
      logRetentionHours:
        type: integer
        format: int32
        description: Number of hours to retain a log backup. When the value is set to -1 the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired.
      copyOnly:
        type: boolean
        description: 'Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.'
  MssqlRecoverableRange:
    type: object
    required:
      - beginTime
      - endTime
      - status
      - isMountAllowed
    properties:
      beginTime:
        type: string
        format: date-time
      endTime:
        type: string
        format: date-time
      status:
        type: string
      isMountAllowed:
        type: boolean
  MssqlRecoverableRangeListResponse:
    type: object
    properties:
      hasMore:
        type: boolean
        description: If there is more
      data:
        type: array
        description: List of matching objects
        items:
          $ref: '#/definitions/MssqlRecoverableRange'
      total:
        type: integer
        description: Total list responses
  MssqlRecoveryPoint:
    type: object
    properties:
      lsnPoint:
        $ref: '#/definitions/LsnRecoveryPoint'
      timestampMs:
        type: integer
        format: int64
        description: Recovery point specified in the form of a timestamp (in milliseconds).
  MssqlRootProperties:
    type: object
    required:
      - rootType
      - rootName
    properties:
      rootType:
        type: string
        description: 'Type of the root object for this object. The root object is the top-level object from which this object is derived. If this object is an availability database, the root object is **_MssqlAvailabilityGroup_**. Otherwise, if this object is part of a cluster, the root object is **_WindowsCluster_**. Otherwise, the root object is **_Host_**.'
        enum:
          - Host
          - WindowsCluster
          - MssqlAvailabilityGroup
      rootId:
        type: string
        description: ID of the root of this object.
      rootName:
        type: string
        description: Name of the root of this object.
  MssqlScriptDetail:
    type: object
    required:
      - scriptPath
      - timeoutMs
      - scriptErrorAction
    x-rk-nullable-properties:
      - scriptPath
      - timeoutMs
      - scriptErrorAction
    properties:
      scriptPath:
        type: string
        description: The script to be run
      timeoutMs:
        type: integer
        format: int64
        description: Time (in ms) after which the script will be terminated if it has not completed
      scriptErrorAction:
        $ref: '#/definitions/ScriptErrorAction'
        description: Action to take if the script returns an error or times out.
  NasBaseConfig:
    type: object
    required:
      - vendorType
      - apiUsername
    properties:
      vendorType:
        type: string
        description: Type of NAS vendor 'ISILON/NETAPP'
      apiUsername:
        type: string
        description: username to access NAS API
      apiCertificate:
        type: string
        description: TLS certification to validate NAS server
      apiHostname:
        type: string
        description: Hostname or IP to issue NAS API to
      zoneName:
        type: string
        description: Name of the Isilon zone that data IP belongs to
  NasConfig:
    type: object
    required:
      - vendorType
      - apiUsername
      - apiPassword
    properties:
      vendorType:
        type: string
        description: Type of NAS vendor 'ISILON/NETAPP'
      apiUsername:
        type: string
        description: Username to access NAS API
      apiPassword:
        type: string
        description: Password to access NAS API
        x-secret: true
      apiCertificate:
        type: string
        description: TLS certification to validate NAS server
      apiHostname:
        type: string
        description: Hostname or IP to issue NAS API to
      zoneName:
        type: string
        description: Name of the Isilon zone that data IP belongs to
  OperatingSystemFamily:
    type: string
    description: The family type of the host operating system.
    enum:
      - AIX
      - Linux
      - Solaris
  ParentAppInfo:
    type: object
    required:
      - isProtectedThruHierarchy
    properties:
      id:
        type: string
        description: ID assigned to the vApp object that manages a specified virtual machine.
      isProtectedThruHierarchy:
        type: boolean
        description: 'Boolean value that indicates whether a virtual machine is protected through the SLA Domain assigned to the parent vApp. Set to ''true'' when the virtual machine is protected through the parent vApp, otherwise set to ''false''. Direct assignment of a virtual machine to an SLA Domain is not possible when this value is ''true''. Also, setting this value to true is not possible when the virtual machine has an existing direct assignment to an SLA Domain.'
  RefreshableObjectConnectionStatus:
    type: object
    required:
      - status
    properties:
      status:
        $ref: '#/definitions/RefreshableObjectConnectionStatusType'
        description: Status of the Nutanix Cluster.
      message:
        type: string
        description: Details about the object status. Will be populated if the status is "BadlyConfigured"
  RefreshableObjectConnectionStatusType:
    type: string
    description: 'Status of the refreshable object. Possible values are "Disconnected" (no communication possible with object), "Refreshing" (able to communicate with object but has not refreshed yet), "Connected" (refreshed the metadata for the object), "BadlyConfigured" (object not configured correctly), "Deleting" (in process of removing the object), and "Remote" (replicated object that we should not connect to).'
    enum:
      - Disconnected
      - Refreshing
      - Connected
      - BadlyConfigured
      - Deleting
      - Remote
  ReplicationSpec:
    type: object
    required:
      - locationId
      - retentionLimit
    properties:
      locationId:
        type: string
      retentionLimit:
        type: integer
        format: int64
  RequestErrorInfo:
    type: object
    required:
      - message
    properties:
      message:
        type: string
        description: The error message for failed ids.
  RequestFailedException:
    type: object
    required:
      - errorType
      - message
    properties:
      errorType:
        type: string
      message:
        type: string
      code:
        type: string
      param:
        type: string
  RestoreFileJobConfig:
    type: object
    required:
      - path
      - restorePath
    properties:
      path:
        type: string
        description: Absolute file path
      domainName:
        type: string
        description: Domain name (Use . for local admin)
      username:
        type: string
        description: Username
      password:
        type: string
        description: Password
        x-secret: true
      restorePath:
        type: string
        description: Directory of folder to copy files into
      ignoreErrors:
        type: boolean
        default: false
        description: 'Optional field to determine whether to ignore errors during restore jobs that use the Rubrik Backup Service. Default value is false, errors are not ignored.'
      shouldSaveCredentials:
        type: boolean
        description: Whether we should save the user-entered credentials
  RestoreMssqlDbJobConfig:
    type: object
    required:
      - recoveryPoint
    properties:
      recoveryPoint:
        $ref: '#/definitions/MssqlRecoveryPoint'
      finishRecovery:
        type: boolean
        description: 'A Boolean value that determines the recovery option to use during database restore. When this value is ''true'', the database is restored using the RECOVERY option and is fully functional at the end of the restore operation. When this value is ''false'', the database is restored using the NORECOVERY option and remains in recovering mode at the end of the restore operation.'
      maxDataStreams:
        type: integer
        format: int32
        description: Maximum number of parallel data streams that can be used to copy data to the target system
  ScriptErrorAction:
    type: string
    description: Action to take if the script returns an error or times out.
    enum:
      - abort
      - continue
  SearchResponse:
    type: object
    properties:
      path:
        type: string
      filename:
        type: string
        description: Just the filename without the whole path
      fileVersions:
        type: array
        items:
          $ref: '#/definitions/FileVersion'
  SearchResponseListResponse:
    type: object
    properties:
      hasMore:
        type: boolean
        description: If there is more
      data:
        type: array
        description: List of matching objects
        items:
          $ref: '#/definitions/SearchResponse'
      total:
        type: integer
        description: Total list responses
  SessionSummary:
    type: object
    required:
      - id
      - organizationId
      - userId
      - token
    properties:
      id:
        type: string
      organizationId:
        type: string
      userId:
        type: string
      token:
        type: string
  SlaAssignable:
    type: object
    required:
      - id
      - name
      - configuredSlaDomainId
      - configuredSlaDomainName
      - primaryClusterId
    properties:
      id:
        type: string
      name:
        type: string
      configuredSlaDomainId:
        type: string
        description: ID of the configured SLA domain
      configuredSlaDomainName:
        type: string
        description: name of the configured SLA domain
      primaryClusterId:
        type: string
  SlaDomainDefinition:
    type: object
    required:
      - name
      - frequencies
      - firstFullAllowedBackupWindows
    properties:
      name:
        type: string
      frequencies:
        type: array
        items:
          $ref: '#/definitions/SlaFrequency'
      allowedBackupWindows:
        type: array
        items:
          $ref: '#/definitions/BackupWindow'
      firstFullAllowedBackupWindows:
        type: array
        items:
          $ref: '#/definitions/BackupWindow'
      localRetentionLimit:
        type: integer
        format: int64
      archivalSpecs:
        type: array
        items:
          $ref: '#/definitions/ArchivalSpec'
      replicationSpecs:
        type: array
        items:
          $ref: '#/definitions/ReplicationSpec'
  SlaDomainPatchDefinition:
    type: object
    properties:
      name:
        type: string
      frequencies:
        type: array
        items:
          $ref: '#/definitions/SlaFrequency'
      allowedBackupWindows:
        type: array
        items:
          $ref: '#/definitions/BackupWindow'
      firstFullAllowedBackupWindows:
        type: array
        items:
          $ref: '#/definitions/BackupWindow'
      localRetentionLimit:
        type: integer
        format: int64
      archivalSpecs:
        type: array
        items:
          $ref: '#/definitions/ArchivalSpec'
      replicationSpecs:
        type: array
        items:
          $ref: '#/definitions/ReplicationSpec'
  SlaDomainSummary:
    type: object
    required:
      - id
      - primaryClusterId
      - name
      - frequencies
      - allowedBackupWindows
      - firstFullAllowedBackupWindows
      - isDefault
      - maxLocalRetentionLimit
    properties:
      id:
        type: string
      primaryClusterId:
        type: string
      name:
        type: string
      frequencies:
        type: array
        items:
          $ref: '#/definitions/SlaFrequency'
      allowedBackupWindows:
        type: array
        items:
          $ref: '#/definitions/BackupWindow'
      firstFullAllowedBackupWindows:
        type: array
        items:
          $ref: '#/definitions/BackupWindow'
      localRetentionLimit:
        type: integer
        format: int64
        description: 'Retention limit for snapshots on the local Rubrik system. If none, they will remain as long as SLA requires.'
      maxLocalRetentionLimit:
        type: integer
        format: int64
        description: 'Maximum limit for snapshots to be retained on the local Rubrik system. For local sla, it would be max of frequencies but for remote sla, it would be the retentionLimit set on the replication target location. (Local location is the replication target location for remote sla)'
      archivalSpecs:
        type: array
        items:
          $ref: '#/definitions/ArchivalSpec'
        description: Specification for archival locations on this SLA
      replicationSpecs:
        type: array
        items:
          $ref: '#/definitions/ReplicationSpec'
        description: Specification for replication locations on this SLA
      numDbs:
        type: integer
        format: int32
        description: The number of actively protected databases under this SLA domain.
      numFilesets:
        type: integer
        format: int32
        description: The number of filesets protected under this SLA domain.
      numHypervVms:
        type: integer
        format: int32
        description: The number of hyperv VMs protected under this SLA domain.
      numNutanixVms:
        type: integer
        format: int32
        description: The number of Nutanix VMs protected under this SLA domain.
      numManagedVolumes:
        type: integer
        format: int32
        description: The number of Managed volumes protected under this SLA domain.
      numStorageArrayVolumeGroups:
        type: integer
        format: int32
        description: The number of storage array volume groups protected under this SLA domain.
      numWindowsVolumeGroups:
        type: integer
        format: int32
        description: The number of Windows volume groups protected under this SLA Domain.
      numLinuxHosts:
        type: integer
        format: int32
        description: 'The number of linux servers, with a fileset, protected under this SLA domain.'
      numShares:
        type: integer
        format: int32
        description: The number of shares protected under this SLA domain.
      numWindowsHosts:
        type: integer
        format: int32
        description: 'The number of windows servers, with a fileset, protected under this SLA domain.'
      numVms:
        type: integer
        format: int32
      numEc2Instances:
        type: integer
        format: int32
        description: The number of EC2 instances protected under this SLA domain.
      numVcdVapps:
        type: integer
        format: int32
        description: The number of vApps protected under this SLA domain.
      isDefault:
        type: boolean
      uiColor:
        type: string
  SlaDomainSummaryListResponse:
    type: object
    properties:
      hasMore:
        type: boolean
        description: If there is more
      data:
        type: array
        description: List of matching objects
        items:
          $ref: '#/definitions/SlaDomainSummary'
      total:
        type: integer
        description: Total list responses
  SlaFrequency:
    type: object
    required:
      - timeUnit
      - frequency
      - retention
    properties:
      timeUnit:
        type: string
        description: 'Units for frequency and retention. Accepted values are Hourly, Daily, Weekly, Monthly, and Yearly.'
      frequency:
        type: integer
        format: int32
      retention:
        type: integer
        format: int32
  SlaStartTimeAttributes:
    type: object
    required:
      - minutes
      - hour
    properties:
      minutes:
        type: integer
        format: int32
      hour:
        type: integer
        format: int32
      dayOfWeek:
        type: integer
        format: int32
  Snappable:
    allOf:
      - $ref: '#/definitions/SlaAssignable'
      - type: object
        required:
          - effectiveSlaDomainId
          - effectiveSlaDomainName
          - slaAssignment
        properties:
          slaAssignment:
            enum:
              - Derived
              - Direct
              - Unassigned
            type: string
            description: SLA assignment type
          effectiveSlaDomainId:
            type: string
            description: ID of the effective SLA domain
          effectiveSlaDomainName:
            type: string
            description: name of the effective SLA domain
          effectiveSlaSourceObjectId:
            type: string
            description: ID of the object from which the effective SLA domain is inherited
          effectiveSlaSourceObjectName:
            type: string
            description: Name of the object from which the effective SLA domain is inherited
  SortOrder:
    type: string
    description: Sort order.
    enum:
      - asc
      - desc
  Status:
    type: object
    required:
      - status
    properties:
      status:
        type: string
      description:
        type: string
  UpdateMountConfig:
    type: object
    required:
      - powerStatus
    properties:
      powerStatus:
        type: boolean
        description: 'True to power on, false to power off'
  VcenterConfig:
    type: object
    required:
      - hostname
      - username
      - password
    properties:
      hostname:
        type: string
      username:
        type: string
      password:
        type: string
        x-secret: true
      conflictResolutionAuthz:
        type: string
        enum:
          - AllowAutoConflictResolution
          - NoConflictResolution
        description: 'Set to ''AllowAutoConflictResolution'' to link the relic virtual machine objects of a virtual machine to the current object for the virtual machine or to ''NoConflictResolution'' to prevent linking. The Rubrik cluster generates a unique ID for each virtual machine when a vCenter Server is added. When a virtual machine changes to another vCenter Server or unregisters and registers with the same vCenter Server, a new unique ID is generated for that virtual machine. When this happens, the virtual machine object associated with the original ID becomes a relic. This option links relic virtual machine objects with the current virtual machine object of a specific virtual machine, and makes the collective snapshot history available through the current object. Default value is ''NoConflictResolution''.'
      caCerts:
        type: string
        description: Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
  VcenterDetail:
    allOf:
      - $ref: '#/definitions/VcenterSummary'
      - type: object
        required:
          - status
          - connectionStatus
        properties:
          status:
            type: string
            description: Status of a vCenter. DEPRECATED. Please use connectionStatus.
          connectionStatus:
            $ref: '#/definitions/RefreshableObjectConnectionStatus'
            description: Connection status of a vCenter.
  VcenterPatch:
    type: object
    properties:
      caCerts:
        type: string
        description: Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----. Use an empty string to remove the existing certificates for the vCenter.
      configuredSlaDomainId:
        type: string
        description: ID of the SLA Domain that is configured for this vCenter Server.
  VcenterSummary:
    allOf:
      - $ref: '#/definitions/VcenterPatch'
      - $ref: '#/definitions/SlaAssignable'
      - type: object
        required:
          - hostname
          - username
        properties:
          hostname:
            type: string
          username:
            type: string
          conflictResolutionAuthz:
            type: string
            enum:
              - AllowAutoConflictResolution
              - NoConflictResolution
            description: 'Set to ''AllowAutoConflictResolution'' to link the relic virtual machine objects of a virtual machine to the current object for the virtual machine or to ''NoConflictResolution'' to prevent linking. The Rubrik cluster generates a unique ID for each virtual machine when a vCenter Server is added. When a virtual machine changes to another vCenter Server or unregisters and registers with the same vCenter Server, a new unique ID is generated for that virtual machine. When this happens, the virtual machine object associated with the original ID becomes a relic. This option links relic virtual machine objects with the current virtual machine object of a specific virtual machine, and makes the collective snapshot history available through the current object. Default value is ''NoConflictResolution''.'
  VcenterSummaryListResponse:
    type: object
    properties:
      hasMore:
        type: boolean
        description: If there is more
      data:
        type: array
        description: List of matching objects
        items:
          $ref: '#/definitions/VcenterSummary'
      total:
        type: integer
        description: Total list responses
  VirtualDiskDetail:
    type: object
    properties:
      id:
        type: string
      fileName:
        type: string
      deviceKey:
        type: integer
        format: int64
        description: Unique and reusable key that vSphere uses to identify VMDK files and other devices in the hardware of a virtual machine.
      size:
        type: integer
        format: int64
      excludeFromSnapshots:
        type: boolean
  VirtualDiskUpdate:
    type: object
    properties:
      excludeFromSnapshots:
        type: boolean
  VirtualMachineDetail:
    allOf:
      - $ref: '#/definitions/VirtualMachineUpdate'
      - $ref: '#/definitions/VirtualMachineSummary'
      - $ref: '#/definitions/BlackoutWindowResponseInfo'
      - type: object
        required:
          - effectiveSlaDomain
          - maxNestedVsphereSnapshots
          - physicalStorage
          - isArrayIntegrationPossible
          - isArrayIntegrationEnabled
          - guestOsType
        properties:
          effectiveSlaDomain:
            $ref: '#/definitions/SlaDomainSummary'
          currentHost:
            $ref: '#/definitions/VmwareHostSummary'
          virtualDiskIds:
            type: array
            items:
              type: string
          snapshots:
            type: array
            items:
              $ref: '#/definitions/VmSnapshotSummary'
          snapshotCount:
            type: integer
            format: int32
          maxNestedVsphereSnapshots:
            type: integer
            format: int32
          physicalStorage:
            type: integer
            format: int64
          guestOsName:
            type: string
            description: 'Long form name, including type and release designation, for the operating system that is installed on a virtual machine.'
          guestOsType:
            type: string
            description: Type of operating system used by the VMware virtual machine.
            enum:
              - Linux
              - Windows
              - Unknown
          isArrayIntegrationPossible:
            type: boolean
            description: Boolean value that indicates whether the performance enhancements of storage array integration are available for the specified virtual machine object. Storage array integration is available when all of the datastores that are assigned to the virtual machine reside on a qualified storage array. Set to 'true' when storage array integration is available and set to 'false' when storage array integration is not available.
          isArrayIntegrationEnabled:
            type: boolean
            description: Boolean value that determines whether the available storage array integration is used with the specified virtual machine. Set to 'true' to use storage array integration and set to 'false' to not use storage array integration. Refer to the value of 'isArrayIntegrationPossible' to determine whether storage array integration is available for a virtual machine.
          guestCredential:
            $ref: '#/definitions/BaseGuestCredentialDetail'
          isAgentRegistered:
            type: boolean
            description: Boolean value that indicates whether the Rubrik Backup Service is installed and registered for the specified virtual machine. Set to 'true' when the Rubrik Backup Service is installed and registered and in all other cases set to 'false'.
  VirtualMachineScriptDetail:
    type: object
    required:
      - scriptPath
      - timeoutMs
      - failureHandling
    properties:
      scriptPath:
        type: string
        description: The command to be run in VM guest OS
      timeoutMs:
        type: integer
        format: int64
        description: Time (in ms) after which the script will be terminated if it has not completed
      failureHandling:
        enum:
          - abort
          - continue
        type: string
        description: Action to take if the script returns an error or times out.
  VirtualMachineSummary:
    allOf:
      - $ref: '#/definitions/Snappable'
      - type: object
        required:
          - isReplicationEnabled
          - folderPath
          - infraPath
          - vmwareToolsInstalled
          - isRelic
          - snapshotConsistencyMandate
          - guestCredentialAuthorizationStatus
          - moid
          - ipAddress
        properties:
          moid:
            type: string
          vcenterId:
            type: string
          hostName:
            type: string
          hostId:
            type: string
          clusterName:
            type: string
          snapshotConsistencyMandate:
            type: string
            description: Consistency level mandated for this VM or empty string for none.
            enum:
              - UNKNOWN
              - INCONSISTENT
              - CRASH_CONSISTENT
              - FILE_SYSTEM_CONSISTENT
              - VSS_CONSISTENT
              - APP_CONSISTENT
          powerStatus:
            type: string
            description: 'The power status of VM(ON,OFF,SLEEP etc.)'
          protectionDate:
            type: string
            format: date-time
          ipAddress:
            type: string
          agentStatus:
            $ref: '#/definitions/AgentStatus'
            description: The status of the Rubrik Backup Service agent for virtual machines.
          toolsInstalled:
            type: boolean
          isReplicationEnabled:
            type: boolean
          folderPath:
            type: array
            description: Brief info of all the objects in the folder path to this VM
            items:
              $ref: '#/definitions/VmPathPoint'
          infraPath:
            type: array
            description: Brief info of all the objects in the infrastructure path to this VM
            items:
              $ref: '#/definitions/VmPathPoint'
          vmwareToolsInstalled:
            type: boolean
          isRelic:
            type: boolean
          guestCredentialAuthorizationStatus:
            description: 'Status of authentication with a specific virtual machine using guest credentials. Possible values are: SUCCESSFUL, PENDING, or FAILED.'
            type: string
          cloudInstantiationSpec:
            $ref: '#/definitions/CloudInstantiationSpec'
            description: Cloud instantiation specification for the selected virtual machine.
          parentAppInfo:
            $ref: '#/definitions/ParentAppInfo'
            description: Configuration information for the vApp that manages a specified virtual machine.
  VirtualMachineSummaryListResponse:
    type: object
    properties:
      hasMore:
        type: boolean
        description: If there is more
      data:
        type: array
        description: List of matching objects
        items:
          $ref: '#/definitions/VirtualMachineSummary'
      total:
        type: integer
        description: Total list responses
  VirtualMachineUpdate:
    type: object
    properties:
      maxNestedVsphereSnapshots:
        type: integer
        format: int32
      isVmPaused:
        type: boolean
        description: Whether to pause or resume backups/archival for this VM
      configuredSlaDomainId:
        type: string
        description: Assign this VM to the given SLA domain.
      snapshotConsistencyMandate:
        type: string
        description: Consistency level mandated for this VM or empty string for none.
        enum:
          - UNKNOWN
          - INCONSISTENT
          - CRASH_CONSISTENT
          - FILE_SYSTEM_CONSISTENT
          - VSS_CONSISTENT
          - APP_CONSISTENT
      preBackupScript:
        $ref: '#/definitions/VirtualMachineScriptDetail'
      postSnapScript:
        $ref: '#/definitions/VirtualMachineScriptDetail'
      postBackupScript:
        $ref: '#/definitions/VirtualMachineScriptDetail'
      isArrayIntegrationEnabled:
        type: boolean
        description: User setting to dictate whether to use storage array snaphots for ingest. This setting only makes sense for VMs where array based ingest is possible.
      cloudInstantiationSpec:
        $ref: '#/definitions/CloudInstantiationSpec'
        description: Cloud instantiation specification for the selected virtual machine.
      throttlingSettings:
        $ref: '#/definitions/VmwareAdaptiveThrottlingSettings'
  VirtualMachineUpdateWithSecret:
    allOf:
      - $ref: '#/definitions/VirtualMachineUpdate'
      - type: object
        properties:
          shouldRefreshCacheAfterUpdate:
            type: boolean
            description: 'A boolean value that specifies whether an update also refreshes the in-memory cache. When ''false'' updates do not refresh the in-memory cache. When ''true'' updates refresh the in-memory cache. By default, this value is ''true''. Setting this value to ''false'' reduces the time required for updates to complete.'
          guestCredential:
            $ref: '#/definitions/BaseGuestCredential'
  VmGuestScriptRunConfig:
    type: object
    required:
      - phase
    properties:
      phase:
        enum:
          - PreBackup
          - PostSnap
          - PostBackup
        type: string
        description: Run the script configured (if any) for this phase
  VmPathPoint:
    type: object
    required:
      - id
      - managedId
      - name
    properties:
      id:
        type: string
        description: ID of the object
      managedId:
        type: string
        description: (Deprecated) - See **id**
      name:
        type: string
        description: Name of the object
  VmSnapshotDetail:
    allOf:
      - $ref: '#/definitions/BaseSnapshotDetail'
      - type: object
        required:
          - vmName
        properties:
          virtualMachine:
            $ref: '#/definitions/VirtualMachineSummary'
          vmName:
            type: string
          snapshotDiskIds:
            type: array
            items:
              type: string
  VmSnapshotSummary:
    allOf:
      - $ref: '#/definitions/BaseSnapshotSummary'
      - type: object
        required:
          - vmName
        properties:
          vmName:
            type: string
  VmSnapshotSummaryListResponse:
    type: object
    properties:
      hasMore:
        type: boolean
        description: If there is more
      data:
        type: array
        description: List of matching objects
        items:
          $ref: '#/definitions/VmSnapshotSummary'
      total:
        type: integer
        description: Total list responses
  VmwareAdaptiveThrottlingSettings:
    type: object
    properties:
      ioLatencyThreshold:
        type: integer
        format: int32
        description: Threshold virtual machine latency value that determines whether to postpone a scheduled snapshot of the vSphere virtual machine. Specify the threshold value in milliseconds (ms).
      datastoreIoLatencyThreshold:
        type: integer
        format: int32
        description: 'Threshold datastore latency value, measured across all datastores, that determines whether to postpone a scheduled snapshot of a vSphere virtual machine. Specify the threshold value in milliseconds (ms).'
      cpuUtilizationThreshold:
        type: integer
        format: int32
        description: Threshold virtual machine CPU utilization value that determines whether to postpone a scheduled snapshot of a vSphere virtual machine. Specify the threshold value as a percentage.
  VmwareHostDetail:
    allOf:
      - $ref: '#/definitions/VmwareHostUpdate'
      - $ref: '#/definitions/VmwareHostSummary'
      - type: object
        properties:
          moid:
            type: string
          computeClusterId:
            type: string
          datacenter:
            $ref: '#/definitions/DataCenterSummary'
          datastores:
            type: array
            items:
              $ref: '#/definitions/DataStoreSummary'
          virtualMachines:
            type: array
            items:
              $ref: '#/definitions/VirtualMachineSummary'
  VmwareHostSummary:
    allOf:
      - $ref: '#/definitions/SlaAssignable'
      - type: object
        required:
          - effectiveSlaDomainId
          - effectiveSlaDomainName
        properties:
          datacenterId:
            type: string
          computeClusterId:
            type: string
          datastores:
            type: array
            items:
              $ref: '#/definitions/DataStoreSummary'
          effectiveSlaDomainId:
            type: string
          effectiveSlaDomainName:
            type: string
          effectiveSlaSourceObjectId:
            type: string
            description: ID of the object from which the effective SLA domain is inherited
          effectiveSlaSourceObjectName:
            type: string
            description: Name of the object from which the effective SLA domain is inherited
  VmwareHostSummaryListResponse:
    type: object
    properties:
      hasMore:
        type: boolean
        description: If there is more
      data:
        type: array
        description: List of matching objects
        items:
          $ref: '#/definitions/VmwareHostSummary'
      total:
        type: integer
        description: Total list responses
  VmwareHostUpdate:
    type: object
    properties:
      configuredSlaDomainId:
        type: string
        description: ID of the SLA Domain that is configured for this ESXi hypervisor.
  VmwareVmMountDetailV1:
    allOf:
      - $ref: '#/definitions/VmwareVmMountSummaryV1'
      - type: object
        properties:
          powerStatus:
            type: string
            description: 'The power status of the mounted VM(ON,OFF,SLEEP etc.)'
  VmwareVmMountSummaryV1:
    type: object
    required:
      - id
      - snapshotDate
      - vmId
      - isReady
    properties:
      id:
        type: string
      snapshotDate:
        type: string
        format: date-time
      vmId:
        type: string
      mountedVmId:
        type: string
      hostId:
        type: string
      isReady:
        type: boolean
      mountRequestId:
        type: string
      unmountRequestId:
        type: string
      datastoreName:
        type: string
        description: The name of the datastore that contains the mounted VMDK.
      datastoreReady:
        type: boolean
        description: 'A boolean value that specifies whether the datastore is ready. When ''true,'' the datastore is ready. When ''false,'' the datastore is not ready.'
      createDatastoreOnlyMount:
        type: boolean
        description: 'This boolean value determines whether or not the mount is created as a datastore only. When ''true,'' the mount is created with datastore and not the associated virtual machine. When ''false,'' the mount is created with both the datastore and the associated virtual machine.'
  VmwareVmMountSummaryV1ListResponse:
    type: object
    properties:
      hasMore:
        type: boolean
        description: If there is more
      data:
        type: array
        description: List of matching objects
        items:
          $ref: '#/definitions/VmwareVmMountSummaryV1'
      total:
        type: integer
        description: Total list responses
  WindowsClusterDetail:
    allOf:
      - $ref: '#/definitions/WindowsClusterSummary'
      - type: object
        required:
          - naturalId
        properties:
          naturalId:
            type: string
            description: Obtained from ClusterInstanceID under the registry key HKLM\Cluster.
  WindowsClusterSummary:
    type: object
    required:
      - id
      - name
      - fqdn
      - hostIds
      - primaryClusterId
      - isAgentless
    properties:
      id:
        type: string
      name:
        type: string
      fqdn:
        type: string
        description: Fully qualified domain name of this cluster.
      hostIds:
        type: array
        description: IDs of the hosts in this cluster.
        items:
          type: string
      primaryClusterId:
        type: string
      isAgentless:
        type: boolean
        description: Indicates whether the Rubrik Backup Service is installed on hosts in a Windows cluster. The value is true when all hosts in the cluster do not have the Rubrik Backup Service installed. The value is false when one or more of the hosts in the cluster have the Rubrik Backup Service installed.
  WindowsClusterSummaryListResponse:
    type: object
    properties:
      hasMore:
        type: boolean
        description: If there is more
      data:
        type: array
        description: List of matching objects
        items:
          $ref: '#/definitions/WindowsClusterSummary'
      total:
        type: integer
        description: Total list responses
